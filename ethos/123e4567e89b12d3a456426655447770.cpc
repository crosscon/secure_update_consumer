(include "./proofs/eo/cpc/Cpc.eo")
(declare-datatypes ((V1 0)(V2 0)) (((V1_main) (V1_get_greet) (V1_get_greet+0x16) (V1_get_greet+0xd) (V1_main+0x19) (V1_get_greet+0x1d) (V1_None4198448) (V1_printf) (V1_main+0x3f))((V2_main) (V2_get_greet) (V2_get_greet+0x16) (V2_get_greet+0xd) (V2_main+0x19) (V2_get_greet+0x1d) (V2_None4198448) (V2_printf) (V2_main+0x3f))))
(define @v.0.BOUND_VARIABLE_635 () (eo::var "BOUND_VARIABLE_635" V1))
(define @v.1.x () (eo::var "x" V2))
(define @v.1.y () (eo::var "y" V2))
(define @v.0.y () (eo::var "y" V1))
(define @v.0.$x1 () (eo::var "$x1" V1))
(define @v.0.x () (eo::var "x" V1))
(define @v.0.va () (eo::var "va" V1))
(define @v.0.vb () (eo::var "vb" V1))
(define g1 () (let ((_let_1 (= @v.0.y V1_main+0x3f))) (let ((_let_2 (= @v.0.y V1_main+0x19))) (let ((_let_3 (= @v.0.x V1_main+0x19))) (let ((_let_4 (= @v.0.x V1_get_greet))) (let ((_let_5 (= @v.0.x V1_main))) (lambda (@list @v.0.x @v.0.y) (or (and _let_5 (= @v.0.y V1_get_greet)) (and _let_5 _let_2) (and _let_4 (= @v.0.y V1_get_greet+0x16)) (and _let_4 (= @v.0.y V1_get_greet+0xd)) (and (= @v.0.x V1_get_greet+0x16) _let_2) (and (= @v.0.x V1_get_greet+0xd) (= @v.0.y V1_get_greet+0x1d)) (and _let_3 (= @v.0.y V1_None4198448)) (and _let_3 _let_1) (and (= @v.0.x V1_get_greet+0x1d) _let_2) (and (= @v.0.x V1_None4198448) (= @v.0.y V1_printf)) (and (= @v.0.x V1_printf) _let_1)))))))))
(define g2 () (let ((_let_1 (= @v.1.y V2_main+0x3f))) (let ((_let_2 (= @v.1.y V2_main+0x19))) (let ((_let_3 (= @v.1.x V2_main+0x19))) (let ((_let_4 (= @v.1.x V2_get_greet))) (let ((_let_5 (= @v.1.x V2_main))) (lambda (@list @v.1.x @v.1.y) (or (and _let_5 (= @v.1.y V2_get_greet)) (and _let_5 _let_2) (and _let_4 (= @v.1.y V2_get_greet+0x16)) (and _let_4 (= @v.1.y V2_get_greet+0xd)) (and (= @v.1.x V2_get_greet+0x16) _let_2) (and (= @v.1.x V2_get_greet+0xd) (= @v.1.y V2_get_greet+0x1d)) (and _let_3 (= @v.1.y V2_None4198448)) (and _let_3 _let_1) (and (= @v.1.x V2_get_greet+0x1d) _let_2) (and (= @v.1.x V2_None4198448) (= @v.1.y V2_printf)) (and (= @v.1.x V2_printf) _let_1)))))))))
(define f () (lambda (@list @v.0.$x1) (ite (= V1_get_greet @v.0.$x1) V2_get_greet (ite (= V1_None4198448 @v.0.$x1) V2_None4198448 (ite (= V1_printf @v.0.$x1) V2_printf (ite (= V1_get_greet+0x1d @v.0.$x1) V2_get_greet+0x1d (ite (= V1_main+0x19 @v.0.$x1) V2_main+0x19 (ite (= V1_get_greet+0xd @v.0.$x1) V2_get_greet+0xd (ite (= V1_get_greet+0x16 @v.0.$x1) V2_get_greet+0x16 (ite (= V1_main+0x3f @v.0.$x1) V2_main+0x3f V2_main))))))))))
(define @t1 () (= @v.0.va @v.0.vb))
(define @t2 () (f @v.0.vb))
(define @t3 () (f @v.0.va))
(define @t4 () (@list @v.0.va @v.0.vb))
(define @t5 () (= @v.0.y V1_main+0x3f))
(define @t6 () (= @v.0.y V1_main+0x19))
(define @t7 () (= @v.0.x V1_main+0x19))
(define @t8 () (= @v.0.x V1_get_greet))
(define @t9 () (= @v.0.x V1_main))
(define @t10 () (@list @v.0.x @v.0.y))
(define @t11 () (lambda @t10 (or (and @t9 (= @v.0.y V1_get_greet)) (and @t9 @t6) (and @t8 (= @v.0.y V1_get_greet+0x16)) (and @t8 (= @v.0.y V1_get_greet+0xd)) (and (= @v.0.x V1_get_greet+0x16) @t6) (and (= @v.0.x V1_get_greet+0xd) (= @v.0.y V1_get_greet+0x1d)) (and @t7 (= @v.0.y V1_None4198448)) (and @t7 @t5) (and (= @v.0.x V1_get_greet+0x1d) @t6) (and (= @v.0.x V1_None4198448) (= @v.0.y V1_printf)) (and (= @v.0.x V1_printf) @t5))))
(define @t12 () (= @v.1.y V2_main+0x3f))
(define @t13 () (= @v.1.y V2_main+0x19))
(define @t14 () (= @v.1.x V2_main+0x19))
(define @t15 () (= @v.1.x V2_get_greet))
(define @t16 () (= @v.1.x V2_main))
(define @t17 () (@list @v.1.x @v.1.y))
(define @t18 () (lambda @t17 (or (and @t16 (= @v.1.y V2_get_greet)) (and @t16 @t13) (and @t15 (= @v.1.y V2_get_greet+0x16)) (and @t15 (= @v.1.y V2_get_greet+0xd)) (and (= @v.1.x V2_get_greet+0x16) @t13) (and (= @v.1.x V2_get_greet+0xd) (= @v.1.y V2_get_greet+0x1d)) (and @t14 (= @v.1.y V2_None4198448)) (and @t14 @t12) (and (= @v.1.x V2_get_greet+0x1d) @t13) (and (= @v.1.x V2_None4198448) (= @v.1.y V2_printf)) (and (= @v.1.x V2_printf) @t12))))
(define @t19 () (lambda (@list @v.0.$x1) (ite (= V1_get_greet @v.0.$x1) V2_get_greet (ite (= V1_None4198448 @v.0.$x1) V2_None4198448 (ite (= V1_printf @v.0.$x1) V2_printf (ite (= V1_get_greet+0x1d @v.0.$x1) V2_get_greet+0x1d (ite (= V1_main+0x19 @v.0.$x1) V2_main+0x19 (ite (= V1_get_greet+0xd @v.0.$x1) V2_get_greet+0xd (ite (= V1_get_greet+0x16 @v.0.$x1) V2_get_greet+0x16 (ite (= V1_main+0x3f @v.0.$x1) V2_main+0x3f V2_main))))))))))
(define @t20 () (= V1_printf @v.0.va))
(define @t21 () (= V1_main+0x3f @v.0.va))
(define @t22 () (not @t21))
(define @t23 () (= V1_main+0x3f @v.0.vb))
(define @t24 () (= V1_None4198448 @v.0.va))
(define @t25 () (not @t20))
(define @t26 () (= V1_printf @v.0.vb))
(define @t27 () (not @t23))
(define @t28 () (= V1_main+0x19 @v.0.vb))
(define @t29 () (= V1_get_greet+0x1d @v.0.vb))
(define @t30 () (not @t29))
(define @t31 () (= V1_None4198448 @v.0.vb))
(define @t32 () (not @t31))
(define @t33 () (= V1_get_greet+0x1d @v.0.va))
(define @t34 () (not @t24))
(define @t35 () (not @t26))
(define @t36 () (= V1_main+0x19 @v.0.va))
(define @t37 () (not @t33))
(define @t38 () (= V1_get_greet+0xd @v.0.va))
(define @t39 () (not @t36))
(define @t40 () (= V1_get_greet+0x16 @v.0.va))
(define @t41 () (not @t38))
(define @t42 () (= V1_get_greet @v.0.va))
(define @t43 () (not @t40))
(define @t44 () (= V1_get_greet+0xd @v.0.vb))
(define @t45 () (not @t28))
(define @t46 () (= V1_get_greet+0x16 @v.0.vb))
(define @t47 () (not @t44))
(define @t48 () (not @t42))
(define @t49 () (= V1_get_greet @v.0.vb))
(define @t50 () (not @t46))
(define @t51 () (= V1_main @v.0.va))
(define @t52 () (not @t51))
(define @t53 () (and (or @t52 (not @t49)) (or @t52 @t45) (or @t48 @t50) (or @t48 @t47) (or @t43 @t45) (or @t41 @t30) (or @t39 @t32) (or @t39 @t27) (or @t37 @t45) (or @t34 @t35) (or @t25 @t27)))
(define @t54 () (forall @t4 (or @t53 (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t45 @t41 @t47 @t43 @t48 @t50 @t49) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t28 @t39 @t41 @t43 @t48) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t45 @t41 @t47 @t46 @t43 @t42) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t45 @t44 @t41 @t43 @t42) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t28 @t39 @t41 @t40) (and @t22 @t27 @t25 @t35 @t34 @t32 @t29 @t37 @t39 @t38) (and @t22 @t27 @t25 @t35 @t31 @t34 @t37 @t36) (and @t23 @t22 @t25 @t34 @t37 @t36) (and @t22 @t27 @t25 @t35 @t34 @t33 @t32 @t30 @t28) (and @t22 @t27 @t26 @t25 @t24) (and @t23 @t22 @t20))))
(define @t55 () (@quantifiers_skolemize @t54 0))
(define @t56 () (= V1_printf @t55))
(define @t57 () (= V1_main+0x3f @t55))
(define @t58 () (not @t57))
(define @t59 () (@quantifiers_skolemize @t54 1))
(define @t60 () (= V1_main+0x3f @t59))
(define @t61 () (and @t60 @t58 @t56))
(define @t62 () (= V1_None4198448 @t55))
(define @t63 () (not @t56))
(define @t64 () (= V1_printf @t59))
(define @t65 () (not @t60))
(define @t66 () (and @t58 @t65 @t64 @t63 @t62))
(define @t67 () (= V1_main+0x19 @t59))
(define @t68 () (= V1_get_greet+0x1d @t59))
(define @t69 () (not @t68))
(define @t70 () (= V1_None4198448 @t59))
(define @t71 () (not @t70))
(define @t72 () (= V1_get_greet+0x1d @t55))
(define @t73 () (not @t62))
(define @t74 () (not @t64))
(define @t75 () (and @t58 @t65 @t63 @t74 @t73 @t72 @t71 @t69 @t67))
(define @t76 () (= V1_main+0x19 @t55))
(define @t77 () (not @t72))
(define @t78 () (and @t60 @t58 @t63 @t73 @t77 @t76))
(define @t79 () (and @t58 @t65 @t63 @t74 @t70 @t73 @t77 @t76))
(define @t80 () (= V1_get_greet+0xd @t55))
(define @t81 () (not @t76))
(define @t82 () (and @t58 @t65 @t63 @t74 @t73 @t71 @t68 @t77 @t81 @t80))
(define @t83 () (= V1_get_greet+0x16 @t55))
(define @t84 () (not @t80))
(define @t85 () (and @t58 @t65 @t63 @t74 @t73 @t71 @t77 @t69 @t67 @t81 @t84 @t83))
(define @t86 () (= V1_get_greet @t55))
(define @t87 () (not @t83))
(define @t88 () (= V1_get_greet+0xd @t59))
(define @t89 () (not @t67))
(define @t90 () (and @t58 @t65 @t63 @t74 @t73 @t71 @t77 @t69 @t81 @t89 @t88 @t84 @t87 @t86))
(define @t91 () (= V1_get_greet+0x16 @t59))
(define @t92 () (not @t88))
(define @t93 () (and @t58 @t65 @t63 @t74 @t73 @t71 @t77 @t69 @t81 @t89 @t84 @t92 @t91 @t87 @t86))
(define @t94 () (not @t86))
(define @t95 () (and @t58 @t65 @t63 @t74 @t73 @t71 @t77 @t69 @t67 @t81 @t84 @t87 @t94))
(define @t96 () (= V1_get_greet @t59))
(define @t97 () (not @t91))
(define @t98 () (and @t58 @t65 @t63 @t74 @t73 @t71 @t77 @t69 @t81 @t89 @t84 @t92 @t87 @t94 @t97 @t96))
(define @t99 () (or @t63 @t65))
(define @t100 () (or @t73 @t74))
(define @t101 () (or @t77 @t89))
(define @t102 () (or @t81 @t65))
(define @t103 () (or @t81 @t71))
(define @t104 () (or @t84 @t69))
(define @t105 () (or @t87 @t89))
(define @t106 () (or @t94 @t92))
(define @t107 () (or @t94 @t97))
(define @t108 () (= V1_main @t55))
(define @t109 () (not @t108))
(define @t110 () (or @t109 @t89))
(define @t111 () (not @t96))
(define @t112 () (or @t109 @t111))
(define @t113 () (and @t112 @t110 @t107 @t106 @t105 @t104 @t103 @t102 @t101 @t100 @t99))
(define @t114 () (or @t113 @t98 @t95 @t93 @t90 @t85 @t82 @t79 @t78 @t75 @t66 @t61))
(define @t115 () (= (= V1_main+0x19 V1_get_greet) false))
(define @t116 () (= (= V1_get_greet+0x16 V1_get_greet) false))
(define @t117 () (= (= V1_get_greet+0xd V1_get_greet) false))
(define @t118 () (= (= V1_get_greet+0x1d V1_get_greet) false))
(define @t119 () (= (= V1_None4198448 V1_get_greet) false))
(define @t120 () (= (= V1_main+0x3f V1_get_greet) false))
(define @t121 () (= (= V1_printf V1_get_greet) false))
(define @t122 () (= (= V1_get_greet+0x1d V1_main+0x19) false))
(define @t123 () (= (= V1_None4198448 V1_main+0x19) false))
(define @t124 () (= (= V1_main+0x3f V1_main+0x19) false))
(define @t125 () (= (= V1_printf V1_main+0x19) false))
(define @t126 () (@list true true true true))
(define @t127 () (@list true true true true true true true true))
(define @t128 () (= (= V1_main+0x19 V1_get_greet+0x16) false))
(define @t129 () (= (= V1_get_greet+0xd V1_get_greet+0x16) false))
(define @t130 () (= (= V1_get_greet+0x1d V1_get_greet+0x16) false))
(define @t131 () (= (= V1_None4198448 V1_get_greet+0x16) false))
(define @t132 () (= (= V1_main+0x3f V1_get_greet+0x16) false))
(define @t133 () (= (= V1_printf V1_get_greet+0x16) false))
(define @t134 () (= (= V1_main+0x19 V1_get_greet+0xd) false))
(define @t135 () (= (= V1_get_greet+0x1d V1_get_greet+0xd) false))
(define @t136 () (= (= V1_None4198448 V1_get_greet+0xd) false))
(define @t137 () (= (= V1_main+0x3f V1_get_greet+0xd) false))
(define @t138 () (= (= V1_printf V1_get_greet+0xd) false))
(define @t139 () (@list true true true true true))
(define @t140 () (not @t110))
(define @t141 () (not @t112))
(define @t142 () (@list @t68 @t70 @t60 @t64))
(define @t143 () (not @t106))
(define @t144 () (not @t107))
(define @t145 () (= (= V1_None4198448 V1_get_greet+0x1d) false))
(define @t146 () (= (= V1_main+0x3f V1_get_greet+0x1d) false))
(define @t147 () (= (= V1_printf V1_get_greet+0x1d) false))
(define @t148 () (not @t105))
(define @t149 () (= (= V1_printf V1_None4198448) false))
(define @t150 () (@list false))
(define @t151 () (not @t104))
(define @t152 () (not @t102))
(define @t153 () (not @t103))
(define @t154 () (= (= V1_main+0x3f V1_printf) false))
(define @t155 () (@list true))
(define @t156 () (@list @t56))
(define @t157 () (@list false false))
(define @t158 () (@list false true))
(define @t159 () (not @t114))
(define @t160 () (not @t54))
(define @t161 () (ite @t49 V2_get_greet V2_main))
(define @t162 () (ite @t46 V2_get_greet+0x16 @t161))
(define @t163 () (ite @t44 V2_get_greet+0xd @t162))
(define @t164 () (ite @t28 V2_main+0x19 @t163))
(define @t165 () (ite @t29 V2_get_greet+0x1d @t164))
(define @t166 () (ite @t31 V2_None4198448 @t165))
(define @t167 () (ite @t26 V2_printf @t166))
(define @t168 () (ite @t23 V2_main+0x3f @t167))
(define @t169 () (ite @t42 V2_get_greet V2_main))
(define @t170 () (ite @t40 V2_get_greet+0x16 @t169))
(define @t171 () (ite @t38 V2_get_greet+0xd @t170))
(define @t172 () (ite @t36 V2_main+0x19 @t171))
(define @t173 () (ite @t33 V2_get_greet+0x1d @t172))
(define @t174 () (ite @t24 V2_None4198448 @t173))
(define @t175 () (ite @t20 V2_printf @t174))
(define @t176 () (ite @t21 V2_main+0x3f @t175))
(define @t177 () (= @t176 @t168))
(define @t178 () (forall @t4 (or (not @t177) @t1)))
(define @t179 () (= @v.0.vb V1_get_greet))
(define @t180 () (= @v.0.vb V1_get_greet+0x16))
(define @t181 () (= @v.0.vb V1_get_greet+0xd))
(define @t182 () (= @v.0.vb V1_main+0x19))
(define @t183 () (= @v.0.vb V1_get_greet+0x1d))
(define @t184 () (= @v.0.vb V1_None4198448))
(define @t185 () (= @v.0.vb V1_printf))
(define @t186 () (= @v.0.vb V1_main+0x3f))
(define @t187 () (lambda (@list @v.0.BOUND_VARIABLE_635) (ite (= @v.0.BOUND_VARIABLE_635 V1_main+0x3f) V2_main+0x3f (ite (= @v.0.BOUND_VARIABLE_635 V1_printf) V2_printf (ite (= @v.0.BOUND_VARIABLE_635 V1_None4198448) V2_None4198448 (ite (= @v.0.BOUND_VARIABLE_635 V1_get_greet+0x1d) V2_get_greet+0x1d (ite (= @v.0.BOUND_VARIABLE_635 V1_main+0x19) V2_main+0x19 (ite (= @v.0.BOUND_VARIABLE_635 V1_get_greet+0xd) V2_get_greet+0xd (ite (= @v.0.BOUND_VARIABLE_635 V1_get_greet+0x16) V2_get_greet+0x16 (ite (= @v.0.BOUND_VARIABLE_635 V1_get_greet) V2_get_greet V2_main))))))))))
(define @t188 () (_ @t187 @v.0.vb))
(define @t189 () (= @v.0.va V1_get_greet))
(define @t190 () (= @v.0.va V1_get_greet+0x16))
(define @t191 () (= @v.0.va V1_get_greet+0xd))
(define @t192 () (= @v.0.va V1_main+0x19))
(define @t193 () (= @v.0.va V1_get_greet+0x1d))
(define @t194 () (= @v.0.va V1_None4198448))
(define @t195 () (= @v.0.va V1_printf))
(define @t196 () (= @v.0.va V1_main+0x3f))
(define @t197 () (_ @t187 @v.0.va))
(define @t198 () (= V2_printf V2_main))
(define @t199 () (= V2_printf V2_get_greet))
(define @t200 () (= V2_main+0x3f V2_main))
(define @t201 () (= V2_main+0x3f V2_get_greet))
(define @t202 () (= V2_None4198448 V2_main))
(define @t203 () (= V2_None4198448 V2_get_greet))
(define @t204 () (= V2_main+0x19 V2_main))
(define @t205 () (= V2_main+0x19 V2_get_greet))
(define @t206 () (= V2_get_greet+0x1d V2_main))
(define @t207 () (= V2_get_greet+0x1d V2_get_greet))
(define @t208 () (= V2_get_greet+0xd V2_main))
(define @t209 () (= V2_get_greet+0xd V2_get_greet))
(define @t210 () (= V2_get_greet+0x16 V2_main))
(define @t211 () (= V2_get_greet+0x16 V2_get_greet))
(define @t212 () (= V2_get_greet V2_main))
(define @t213 () (= V2_get_greet V2_get_greet))
(define @t214 () (= V2_main V2_main))
(define @t215 () (= V2_main V2_get_greet))
(define @t216 () (or @t23 (and @t35 @t32 @t30 @t45 @t47 @t50 (ite @t49 @t201 @t200))))
(define @t217 () (or @t28 (and @t47 @t50 (ite @t49 @t205 @t204))))
(define @t218 () (or @t36 (and @t41 @t43 (ite @t42 @t205 @t204))))
(define @t219 () (ite @t42 @t213 @t212))
(define @t220 () (ite @t42 @t215 @t214))
(define @t221 () (= V2_printf @t169))
(define @t222 () (and @t34 @t37 @t39 @t41 @t43 @t221))
(define @t223 () (= V2_main+0x3f @t161))
(define @t224 () (and @t35 @t32 @t30 @t45 @t47 @t50 @t223))
(define @t225 () (or @t23 @t224))
(define @t226 () (= V2_None4198448 @t169))
(define @t227 () (and @t37 @t39 @t41 @t43 @t226))
(define @t228 () (= V2_printf @t161))
(define @t229 () (and @t32 @t30 @t45 @t47 @t50 @t228))
(define @t230 () (= V2_main+0x19 @t161))
(define @t231 () (and @t47 @t50 @t230))
(define @t232 () (or @t28 @t231))
(define @t233 () (= V2_get_greet+0x1d @t169))
(define @t234 () (and @t39 @t41 @t43 @t233))
(define @t235 () (= V2_main+0x19 @t169))
(define @t236 () (and @t41 @t43 @t235))
(define @t237 () (or @t36 @t236))
(define @t238 () (= V2_None4198448 @t161))
(define @t239 () (and @t30 @t45 @t47 @t50 @t238))
(define @t240 () (= V2_get_greet+0xd @t169))
(define @t241 () (and @t43 @t240))
(define @t242 () (= V2_get_greet+0x1d @t161))
(define @t243 () (and @t45 @t47 @t50 @t242))
(define @t244 () (= V2_get_greet+0x16 @t169))
(define @t245 () (or @t40 @t244))
(define @t246 () (= V2_get_greet @t169))
(define @t247 () (= V2_get_greet+0xd @t161))
(define @t248 () (and @t50 @t247))
(define @t249 () (or @t44 @t248))
(define @t250 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t45 @t249 @t41 @t43 @t246))
(define @t251 () (= V2_get_greet+0x16 @t161))
(define @t252 () (or @t46 @t251))
(define @t253 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t45 @t41 @t47 @t252 @t43 @t246))
(define @t254 () (= V2_main @t169))
(define @t255 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t232 @t39 @t41 @t43 @t254))
(define @t256 () (= V2_get_greet @t161))
(define @t257 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t45 @t41 @t47 @t43 @t254 @t50 @t256))
(define @t258 () (and @t43 @t221))
(define @t259 () (= V2_printf V2_get_greet+0x16))
(define @t260 () (and @t50 @t223))
(define @t261 () (= V2_main+0x3f V2_get_greet+0x16))
(define @t262 () (and @t43 @t226))
(define @t263 () (= V2_None4198448 V2_get_greet+0x16))
(define @t264 () (and @t50 @t228))
(define @t265 () (and @t50 @t230))
(define @t266 () (= V2_main+0x19 V2_get_greet+0x16))
(define @t267 () (and @t43 @t233))
(define @t268 () (= V2_get_greet+0x1d V2_get_greet+0x16))
(define @t269 () (and @t43 @t235))
(define @t270 () (and @t50 @t238))
(define @t271 () (= V2_get_greet+0xd V2_get_greet+0x16))
(define @t272 () (and @t50 @t242))
(define @t273 () (= V2_get_greet+0x16 V2_get_greet+0x16))
(define @t274 () (and @t43 @t246))
(define @t275 () (= V2_get_greet V2_get_greet+0x16))
(define @t276 () (and @t43 @t254))
(define @t277 () (= V2_main V2_get_greet+0x16))
(define @t278 () (and @t50 @t256))
(define @t279 () (or @t23 (and @t35 @t32 @t30 @t45 @t47 (ite @t46 @t261 @t223))))
(define @t280 () (or @t28 (and @t47 (ite @t46 @t266 @t230))))
(define @t281 () (or @t36 (and @t41 (ite @t40 @t266 @t235))))
(define @t282 () (ite @t40 @t275 @t246))
(define @t283 () (ite @t40 @t277 @t254))
(define @t284 () (= V2_printf @t170))
(define @t285 () (and @t34 @t37 @t39 @t41 @t284))
(define @t286 () (= V2_main+0x3f @t162))
(define @t287 () (and @t35 @t32 @t30 @t45 @t47 @t286))
(define @t288 () (or @t23 @t287))
(define @t289 () (= V2_None4198448 @t170))
(define @t290 () (and @t37 @t39 @t41 @t289))
(define @t291 () (= V2_printf @t162))
(define @t292 () (and @t32 @t30 @t45 @t47 @t291))
(define @t293 () (= V2_main+0x19 @t162))
(define @t294 () (and @t47 @t293))
(define @t295 () (or @t28 @t294))
(define @t296 () (= V2_get_greet+0x1d @t170))
(define @t297 () (and @t39 @t41 @t296))
(define @t298 () (= V2_main+0x19 @t170))
(define @t299 () (and @t41 @t298))
(define @t300 () (or @t36 @t299))
(define @t301 () (= V2_None4198448 @t162))
(define @t302 () (and @t30 @t45 @t47 @t301))
(define @t303 () (= V2_get_greet+0xd @t170))
(define @t304 () (or @t38 @t303))
(define @t305 () (= V2_get_greet+0x1d @t162))
(define @t306 () (and @t45 @t47 @t305))
(define @t307 () (= V2_get_greet+0x16 @t170))
(define @t308 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t295 @t39 @t41 @t307))
(define @t309 () (= V2_get_greet @t170))
(define @t310 () (= V2_get_greet+0xd @t162))
(define @t311 () (or @t44 @t310))
(define @t312 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t45 @t311 @t41 @t309))
(define @t313 () (= V2_get_greet+0x16 @t162))
(define @t314 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t45 @t41 @t309 @t47 @t313))
(define @t315 () (= V2_main @t170))
(define @t316 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t295 @t39 @t41 @t315))
(define @t317 () (= V2_get_greet @t162))
(define @t318 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t45 @t41 @t315 @t47 @t317))
(define @t319 () (and @t41 @t284))
(define @t320 () (= V2_printf V2_get_greet+0xd))
(define @t321 () (and @t47 @t286))
(define @t322 () (= V2_main+0x3f V2_get_greet+0xd))
(define @t323 () (and @t41 @t289))
(define @t324 () (= V2_None4198448 V2_get_greet+0xd))
(define @t325 () (and @t47 @t291))
(define @t326 () (= V2_main+0x19 V2_get_greet+0xd))
(define @t327 () (and @t41 @t296))
(define @t328 () (= V2_get_greet+0x1d V2_get_greet+0xd))
(define @t329 () (and @t47 @t301))
(define @t330 () (= V2_get_greet+0xd V2_get_greet+0xd))
(define @t331 () (and @t47 @t305))
(define @t332 () (and @t41 @t307))
(define @t333 () (= V2_get_greet+0x16 V2_get_greet+0xd))
(define @t334 () (and @t41 @t309))
(define @t335 () (= V2_get_greet V2_get_greet+0xd))
(define @t336 () (and @t47 @t313))
(define @t337 () (and @t41 @t315))
(define @t338 () (= V2_main V2_get_greet+0xd))
(define @t339 () (and @t47 @t317))
(define @t340 () (or @t23 (and @t35 @t32 @t30 @t45 (ite @t44 @t322 @t286))))
(define @t341 () (or @t28 (ite @t44 @t326 @t293)))
(define @t342 () (or @t36 (ite @t38 @t326 @t298)))
(define @t343 () (ite @t38 @t335 @t309))
(define @t344 () (ite @t38 @t338 @t315))
(define @t345 () (= V2_printf @t171))
(define @t346 () (and @t34 @t37 @t39 @t345))
(define @t347 () (= V2_main+0x3f @t163))
(define @t348 () (and @t35 @t32 @t30 @t45 @t347))
(define @t349 () (or @t23 @t348))
(define @t350 () (= V2_None4198448 @t171))
(define @t351 () (and @t37 @t39 @t350))
(define @t352 () (= V2_printf @t163))
(define @t353 () (and @t32 @t30 @t45 @t352))
(define @t354 () (= V2_main+0x19 @t163))
(define @t355 () (or @t28 @t354))
(define @t356 () (= V2_get_greet+0x1d @t171))
(define @t357 () (and @t39 @t356))
(define @t358 () (= V2_main+0x19 @t171))
(define @t359 () (or @t36 @t358))
(define @t360 () (= V2_None4198448 @t163))
(define @t361 () (and @t30 @t45 @t360))
(define @t362 () (= V2_get_greet+0xd @t171))
(define @t363 () (= V2_get_greet+0x1d @t163))
(define @t364 () (and @t45 @t363))
(define @t365 () (or @t29 @t364))
(define @t366 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t365 @t37 @t39 @t362))
(define @t367 () (= V2_get_greet+0x16 @t171))
(define @t368 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t355 @t39 @t367))
(define @t369 () (= V2_get_greet+0xd @t163))
(define @t370 () (= V2_get_greet @t171))
(define @t371 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t370 @t45 @t369))
(define @t372 () (= V2_get_greet+0x16 @t163))
(define @t373 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t370 @t45 @t372))
(define @t374 () (= V2_main @t171))
(define @t375 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t355 @t39 @t374))
(define @t376 () (= V2_get_greet @t163))
(define @t377 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t374 @t45 @t376))
(define @t378 () (and @t39 @t345))
(define @t379 () (= V2_printf V2_main+0x19))
(define @t380 () (and @t45 @t347))
(define @t381 () (= V2_main+0x3f V2_main+0x19))
(define @t382 () (and @t39 @t350))
(define @t383 () (= V2_None4198448 V2_main+0x19))
(define @t384 () (and @t45 @t352))
(define @t385 () (= V2_main+0x19 V2_main+0x19))
(define @t386 () (= V2_get_greet+0x1d V2_main+0x19))
(define @t387 () (and @t45 @t360))
(define @t388 () (and @t39 @t362))
(define @t389 () (= V2_get_greet+0xd V2_main+0x19))
(define @t390 () (and @t39 @t367))
(define @t391 () (= V2_get_greet+0x16 V2_main+0x19))
(define @t392 () (and @t45 @t369))
(define @t393 () (and @t39 @t370))
(define @t394 () (= V2_get_greet V2_main+0x19))
(define @t395 () (and @t45 @t372))
(define @t396 () (and @t39 @t374))
(define @t397 () (= V2_main V2_main+0x19))
(define @t398 () (and @t45 @t376))
(define @t399 () (or @t23 (and @t35 @t32 @t30 (ite @t28 @t381 @t347))))
(define @t400 () (ite @t28 @t385 @t354))
(define @t401 () (ite @t36 @t385 @t358))
(define @t402 () (ite @t36 @t394 @t370))
(define @t403 () (ite @t36 @t397 @t374))
(define @t404 () (= V2_printf @t172))
(define @t405 () (and @t34 @t37 @t404))
(define @t406 () (= V2_main+0x3f @t164))
(define @t407 () (and @t35 @t32 @t30 @t406))
(define @t408 () (or @t23 @t407))
(define @t409 () (= V2_None4198448 @t172))
(define @t410 () (and @t37 @t409))
(define @t411 () (= V2_printf @t164))
(define @t412 () (and @t32 @t30 @t411))
(define @t413 () (= V2_main+0x19 @t164))
(define @t414 () (= V2_get_greet+0x1d @t172))
(define @t415 () (or @t33 @t414))
(define @t416 () (and @t22 @t27 @t25 @t35 @t34 @t415 @t32 @t30 @t413))
(define @t417 () (= V2_main+0x19 @t172))
(define @t418 () (and @t408 @t22 @t25 @t34 @t37 @t417))
(define @t419 () (= V2_None4198448 @t164))
(define @t420 () (and @t30 @t419))
(define @t421 () (or @t31 @t420))
(define @t422 () (and @t22 @t27 @t25 @t35 @t421 @t34 @t37 @t417))
(define @t423 () (= V2_get_greet+0xd @t172))
(define @t424 () (= V2_get_greet+0x1d @t164))
(define @t425 () (or @t29 @t424))
(define @t426 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t425 @t37 @t423))
(define @t427 () (= V2_get_greet+0x16 @t172))
(define @t428 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t427 @t30 @t413))
(define @t429 () (= V2_get_greet+0xd @t164))
(define @t430 () (= V2_get_greet @t172))
(define @t431 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t430 @t30 @t429))
(define @t432 () (= V2_get_greet+0x16 @t164))
(define @t433 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t430 @t30 @t432))
(define @t434 () (= V2_main @t172))
(define @t435 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t434 @t30 @t413))
(define @t436 () (= V2_get_greet @t164))
(define @t437 () (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t434 @t30 @t436))
(define @t438 () (and @t37 @t404))
(define @t439 () (= V2_printf V2_get_greet+0x1d))
(define @t440 () (and @t30 @t406))
(define @t441 () (= V2_main+0x3f V2_get_greet+0x1d))
(define @t442 () (= V2_None4198448 V2_get_greet+0x1d))
(define @t443 () (and @t30 @t411))
(define @t444 () (and @t30 @t413))
(define @t445 () (= V2_main+0x19 V2_get_greet+0x1d))
(define @t446 () (= V2_get_greet+0x1d V2_get_greet+0x1d))
(define @t447 () (and @t37 @t417))
(define @t448 () (and @t37 @t423))
(define @t449 () (= V2_get_greet+0xd V2_get_greet+0x1d))
(define @t450 () (and @t37 @t427))
(define @t451 () (= V2_get_greet+0x16 V2_get_greet+0x1d))
(define @t452 () (and @t30 @t429))
(define @t453 () (and @t37 @t430))
(define @t454 () (= V2_get_greet V2_get_greet+0x1d))
(define @t455 () (and @t30 @t432))
(define @t456 () (and @t37 @t434))
(define @t457 () (= V2_main V2_get_greet+0x1d))
(define @t458 () (and @t30 @t436))
(define @t459 () (or @t23 (and @t35 @t32 (ite @t29 @t441 @t406))))
(define @t460 () (ite @t29 @t445 @t413))
(define @t461 () (ite @t33 @t445 @t417))
(define @t462 () (ite @t33 @t454 @t430))
(define @t463 () (ite @t33 @t457 @t434))
(define @t464 () (= V2_printf @t173))
(define @t465 () (and @t34 @t464))
(define @t466 () (= V2_main+0x3f @t165))
(define @t467 () (and @t35 @t32 @t466))
(define @t468 () (or @t23 @t467))
(define @t469 () (= V2_None4198448 @t173))
(define @t470 () (or @t24 @t469))
(define @t471 () (= V2_printf @t165))
(define @t472 () (and @t32 @t471))
(define @t473 () (= V2_main+0x19 @t165))
(define @t474 () (= V2_get_greet+0x1d @t173))
(define @t475 () (and @t22 @t27 @t25 @t35 @t34 @t474 @t32 @t473))
(define @t476 () (= V2_main+0x19 @t173))
(define @t477 () (and @t468 @t22 @t25 @t34 @t476))
(define @t478 () (= V2_None4198448 @t165))
(define @t479 () (or @t31 @t478))
(define @t480 () (and @t22 @t27 @t25 @t35 @t479 @t34 @t476))
(define @t481 () (= V2_get_greet+0x1d @t165))
(define @t482 () (= V2_get_greet+0xd @t173))
(define @t483 () (and @t22 @t27 @t25 @t35 @t34 @t482 @t32 @t481))
(define @t484 () (= V2_get_greet+0x16 @t173))
(define @t485 () (and @t22 @t27 @t25 @t35 @t34 @t484 @t32 @t473))
(define @t486 () (= V2_get_greet+0xd @t165))
(define @t487 () (= V2_get_greet @t173))
(define @t488 () (and @t22 @t27 @t25 @t35 @t34 @t487 @t32 @t486))
(define @t489 () (= V2_get_greet+0x16 @t165))
(define @t490 () (and @t22 @t27 @t25 @t35 @t34 @t487 @t32 @t489))
(define @t491 () (= V2_main @t173))
(define @t492 () (and @t22 @t27 @t25 @t35 @t34 @t491 @t32 @t473))
(define @t493 () (= V2_get_greet @t165))
(define @t494 () (and @t22 @t27 @t25 @t35 @t34 @t491 @t32 @t493))
(define @t495 () (= V2_printf V2_None4198448))
(define @t496 () (and @t32 @t466))
(define @t497 () (= V2_main+0x3f V2_None4198448))
(define @t498 () (= V2_None4198448 V2_None4198448))
(define @t499 () (and @t32 @t473))
(define @t500 () (and @t34 @t474))
(define @t501 () (= V2_main+0x19 V2_None4198448))
(define @t502 () (= V2_get_greet+0x1d V2_None4198448))
(define @t503 () (and @t34 @t476))
(define @t504 () (and @t32 @t481))
(define @t505 () (and @t34 @t482))
(define @t506 () (= V2_get_greet+0xd V2_None4198448))
(define @t507 () (and @t34 @t484))
(define @t508 () (= V2_get_greet+0x16 V2_None4198448))
(define @t509 () (and @t32 @t486))
(define @t510 () (and @t34 @t487))
(define @t511 () (= V2_get_greet V2_None4198448))
(define @t512 () (and @t32 @t489))
(define @t513 () (and @t34 @t491))
(define @t514 () (= V2_main V2_None4198448))
(define @t515 () (and @t32 @t493))
(define @t516 () (or @t23 (and @t35 (ite @t31 @t497 @t466))))
(define @t517 () (ite @t31 @t501 @t473))
(define @t518 () (ite @t24 @t501 @t476))
(define @t519 () (ite @t24 @t511 @t487))
(define @t520 () (ite @t24 @t514 @t491))
(define @t521 () (= V2_printf @t174))
(define @t522 () (or @t20 @t521))
(define @t523 () (= V2_main+0x3f @t166))
(define @t524 () (and @t35 @t523))
(define @t525 () (or @t23 @t524))
(define @t526 () (= V2_None4198448 @t174))
(define @t527 () (= V2_printf @t166))
(define @t528 () (or @t26 @t527))
(define @t529 () (and @t22 @t27 @t528 @t25 @t526))
(define @t530 () (= V2_main+0x19 @t166))
(define @t531 () (= V2_get_greet+0x1d @t174))
(define @t532 () (and @t22 @t27 @t25 @t531 @t35 @t530))
(define @t533 () (= V2_main+0x19 @t174))
(define @t534 () (and @t525 @t22 @t25 @t533))
(define @t535 () (= V2_None4198448 @t166))
(define @t536 () (and @t22 @t27 @t25 @t533 @t35 @t535))
(define @t537 () (= V2_get_greet+0x1d @t166))
(define @t538 () (= V2_get_greet+0xd @t174))
(define @t539 () (and @t22 @t27 @t25 @t538 @t35 @t537))
(define @t540 () (= V2_get_greet+0x16 @t174))
(define @t541 () (and @t22 @t27 @t25 @t540 @t35 @t530))
(define @t542 () (= V2_get_greet+0xd @t166))
(define @t543 () (= V2_get_greet @t174))
(define @t544 () (and @t22 @t27 @t25 @t543 @t35 @t542))
(define @t545 () (= V2_get_greet+0x16 @t166))
(define @t546 () (and @t22 @t27 @t25 @t543 @t35 @t545))
(define @t547 () (= V2_main @t174))
(define @t548 () (and @t22 @t27 @t25 @t547 @t35 @t530))
(define @t549 () (= V2_get_greet @t166))
(define @t550 () (and @t22 @t27 @t25 @t547 @t35 @t549))
(define @t551 () (= V2_printf V2_printf))
(define @t552 () (= V2_main+0x3f V2_printf))
(define @t553 () (and @t25 @t526))
(define @t554 () (= V2_None4198448 V2_printf))
(define @t555 () (and @t35 @t530))
(define @t556 () (and @t25 @t531))
(define @t557 () (= V2_main+0x19 V2_printf))
(define @t558 () (= V2_get_greet+0x1d V2_printf))
(define @t559 () (and @t25 @t533))
(define @t560 () (and @t35 @t535))
(define @t561 () (and @t35 @t537))
(define @t562 () (and @t25 @t538))
(define @t563 () (= V2_get_greet+0xd V2_printf))
(define @t564 () (and @t25 @t540))
(define @t565 () (= V2_get_greet+0x16 V2_printf))
(define @t566 () (and @t35 @t542))
(define @t567 () (and @t25 @t543))
(define @t568 () (= V2_get_greet V2_printf))
(define @t569 () (and @t35 @t545))
(define @t570 () (and @t25 @t547))
(define @t571 () (= V2_main V2_printf))
(define @t572 () (and @t35 @t549))
(define @t573 () (or @t23 (ite @t26 @t552 @t523)))
(define @t574 () (ite @t26 @t557 @t530))
(define @t575 () (ite @t20 @t557 @t533))
(define @t576 () (ite @t20 @t568 @t543))
(define @t577 () (ite @t20 @t571 @t547))
(define @t578 () (= V2_printf @t175))
(define @t579 () (= V2_main+0x3f @t167))
(define @t580 () (or @t23 @t579))
(define @t581 () (and @t580 @t22 @t578))
(define @t582 () (= V2_printf @t167))
(define @t583 () (= V2_None4198448 @t175))
(define @t584 () (and @t22 @t583 @t27 @t582))
(define @t585 () (= V2_main+0x19 @t167))
(define @t586 () (= V2_get_greet+0x1d @t175))
(define @t587 () (and @t22 @t586 @t27 @t585))
(define @t588 () (= V2_main+0x19 @t175))
(define @t589 () (and @t580 @t22 @t588))
(define @t590 () (= V2_None4198448 @t167))
(define @t591 () (and @t22 @t588 @t27 @t590))
(define @t592 () (= V2_get_greet+0x1d @t167))
(define @t593 () (= V2_get_greet+0xd @t175))
(define @t594 () (and @t22 @t593 @t27 @t592))
(define @t595 () (= V2_get_greet+0x16 @t175))
(define @t596 () (and @t22 @t595 @t27 @t585))
(define @t597 () (= V2_get_greet+0xd @t167))
(define @t598 () (= V2_get_greet @t175))
(define @t599 () (and @t22 @t598 @t27 @t597))
(define @t600 () (= V2_get_greet+0x16 @t167))
(define @t601 () (and @t22 @t598 @t27 @t600))
(define @t602 () (= V2_main @t175))
(define @t603 () (and @t22 @t602 @t27 @t585))
(define @t604 () (= V2_get_greet @t167))
(define @t605 () (and @t22 @t602 @t27 @t604))
(define @t606 () (and @t22 @t578))
(define @t607 () (= V2_main+0x3f V2_main+0x3f))
(define @t608 () (= V2_printf V2_main+0x3f))
(define @t609 () (and @t27 @t582))
(define @t610 () (and @t22 @t583))
(define @t611 () (= V2_None4198448 V2_main+0x3f))
(define @t612 () (and @t27 @t585))
(define @t613 () (and @t22 @t586))
(define @t614 () (= V2_main+0x19 V2_main+0x3f))
(define @t615 () (= V2_get_greet+0x1d V2_main+0x3f))
(define @t616 () (and @t22 @t588))
(define @t617 () (and @t27 @t590))
(define @t618 () (and @t27 @t592))
(define @t619 () (and @t22 @t593))
(define @t620 () (= V2_get_greet+0xd V2_main+0x3f))
(define @t621 () (and @t22 @t595))
(define @t622 () (= V2_get_greet+0x16 V2_main+0x3f))
(define @t623 () (and @t27 @t597))
(define @t624 () (and @t22 @t598))
(define @t625 () (= V2_get_greet V2_main+0x3f))
(define @t626 () (and @t27 @t600))
(define @t627 () (and @t22 @t602))
(define @t628 () (= V2_main V2_main+0x3f))
(define @t629 () (and @t27 @t604))
(define @t630 () (ite @t23 @t607 @t579))
(define @t631 () (ite @t23 @t614 @t585))
(define @t632 () (ite @t21 @t614 @t588))
(define @t633 () (ite @t21 @t625 @t598))
(define @t634 () (ite @t21 @t628 @t602))
(define @t635 () (= V2_main+0x3f @t168))
(define @t636 () (and (= V2_printf @t176) @t635))
(define @t637 () (and (= V2_None4198448 @t176) (= V2_printf @t168)))
(define @t638 () (= V2_main+0x19 @t168))
(define @t639 () (and (= V2_get_greet+0x1d @t176) @t638))
(define @t640 () (= V2_main+0x19 @t176))
(define @t641 () (and @t640 @t635))
(define @t642 () (and @t640 (= V2_None4198448 @t168)))
(define @t643 () (and (= V2_get_greet+0xd @t176) (= V2_get_greet+0x1d @t168)))
(define @t644 () (and (= V2_get_greet+0x16 @t176) @t638))
(define @t645 () (= V2_get_greet @t176))
(define @t646 () (and @t645 (= V2_get_greet+0xd @t168)))
(define @t647 () (and @t645 (= V2_get_greet+0x16 @t168)))
(define @t648 () (= V2_main @t176))
(define @t649 () (and @t648 @t638))
(define @t650 () (and @t648 (= V2_get_greet @t168)))
(define @t651 () (forall @t4 (or @t53 @t650 @t649 @t647 @t646 @t644 @t643 @t642 @t641 @t639 @t637 @t636)))
(define @t652 () (or @t650 @t649 @t647 @t646 @t644 @t643 @t642 @t641 @t639 @t637 @t636))
(define @t653 () (or (and @t51 @t49) (and @t51 @t28) (and @t42 @t46) (and @t42 @t44) (and @t40 @t28) (and @t38 @t29) (and @t36 @t31) (and @t36 @t23) (and @t33 @t28) (and @t24 @t26) (and @t20 @t23)))
(define @t654 () (= V2_main+0x3f @v.1.y))
(define @t655 () (= V2_main+0x19 @v.1.y))
(define @t656 () (= V2_main+0x19 @v.1.x))
(define @t657 () (= V2_get_greet @v.1.x))
(define @t658 () (= V2_main @v.1.x))
(define @t659 () (_ (lambda @t17 (or (and @t658 (= V2_get_greet @v.1.y)) (and @t658 @t655) (and @t657 (= V2_get_greet+0x16 @v.1.y)) (and @t657 (= V2_get_greet+0xd @v.1.y)) (and (= V2_get_greet+0x16 @v.1.x) @t655) (and (= V2_get_greet+0xd @v.1.x) (= V2_get_greet+0x1d @v.1.y)) (and @t656 (= V2_None4198448 @v.1.y)) (and @t656 @t654) (and (= V2_get_greet+0x1d @v.1.x) @t655) (and (= V2_None4198448 @v.1.x) (= V2_printf @v.1.y)) (and (= V2_printf @v.1.x) @t654))) @t176 @t168))
(define @t660 () (= V1_main+0x3f @v.0.y))
(define @t661 () (= V1_main+0x19 @v.0.y))
(define @t662 () (= V1_main+0x19 @v.0.x))
(define @t663 () (= V1_get_greet @v.0.x))
(define @t664 () (= V1_main @v.0.x))
(define @t665 () (_ (lambda @t10 (or (and @t664 (= V1_get_greet @v.0.y)) (and @t664 @t661) (and @t663 (= V1_get_greet+0x16 @v.0.y)) (and @t663 (= V1_get_greet+0xd @v.0.y)) (and (= V1_get_greet+0x16 @v.0.x) @t661) (and (= V1_get_greet+0xd @v.0.x) (= V1_get_greet+0x1d @v.0.y)) (and @t662 (= V1_None4198448 @v.0.y)) (and @t662 @t660) (and (= V1_get_greet+0x1d @v.0.x) @t661) (and (= V1_None4198448 @v.0.x) (= V1_printf @v.0.y)) (and (= V1_printf @v.0.x) @t660))) @v.0.va @v.0.vb))
(define @t666 () (@quantifiers_skolemize @t178 1))
(define @t667 () (@quantifiers_skolemize @t178 0))
(define @t668 () (= @t667 @t666))
(define @t669 () (= V1_get_greet @t667))
(define @t670 () (ite @t669 V2_get_greet V2_main))
(define @t671 () (= V1_get_greet+0x16 @t667))
(define @t672 () (ite @t671 V2_get_greet+0x16 @t670))
(define @t673 () (= V1_get_greet+0xd @t667))
(define @t674 () (ite @t673 V2_get_greet+0xd @t672))
(define @t675 () (= V1_main+0x19 @t667))
(define @t676 () (ite @t675 V2_main+0x19 @t674))
(define @t677 () (= V1_get_greet+0x1d @t667))
(define @t678 () (ite @t677 V2_get_greet+0x1d @t676))
(define @t679 () (= V1_None4198448 @t667))
(define @t680 () (ite @t679 V2_None4198448 @t678))
(define @t681 () (= V1_printf @t667))
(define @t682 () (ite @t681 V2_printf @t680))
(define @t683 () (= V1_main+0x3f @t667))
(define @t684 () (ite @t683 V2_main+0x3f @t682))
(define @t685 () (@purify @t684))
(define @t686 () (= V1_get_greet @t666))
(define @t687 () (ite @t686 V2_get_greet V2_main))
(define @t688 () (= V1_get_greet+0x16 @t666))
(define @t689 () (ite @t688 V2_get_greet+0x16 @t687))
(define @t690 () (= V1_get_greet+0xd @t666))
(define @t691 () (ite @t690 V2_get_greet+0xd @t689))
(define @t692 () (= V1_main+0x19 @t666))
(define @t693 () (ite @t692 V2_main+0x19 @t691))
(define @t694 () (= V1_get_greet+0x1d @t666))
(define @t695 () (ite @t694 V2_get_greet+0x1d @t693))
(define @t696 () (= V1_None4198448 @t666))
(define @t697 () (ite @t696 V2_None4198448 @t695))
(define @t698 () (= V1_printf @t666))
(define @t699 () (ite @t698 V2_printf @t697))
(define @t700 () (= V1_main+0x3f @t666))
(define @t701 () (ite @t700 V2_main+0x3f @t699))
(define @t702 () (@purify @t701))
(define @t703 () (= @t702 @t685))
(define @t704 () (not @t703))
(define @t705 () (or @t704 @t668))
(define @t706 () (not @t178))
(define @t707 () (@list @t705))
(define @t708 () (@purify @t687))
(define @t709 () (= V2_main @t708))
(define @t710 () (= V2_get_greet @t708))
(define @t711 () (not @t686))
(define @t712 () (@purify @t699))
(define @t713 () (= @t702 @t712))
(define @t714 () (= V2_main+0x3f @t702))
(define @t715 () (not @t700))
(define @t716 () (not @t668))
(define @t717 () (not @t683))
(define @t718 () (= (= false true) false))
(define @t719 () (and @t700 @t683 @t716))
(define @t720 () (@purify @t682))
(define @t721 () (= @t685 @t720))
(define @t722 () (= V2_main+0x3f @t685))
(define @t723 () (= V2_printf @t720))
(define @t724 () (not @t723))
(define @t725 () (and @t703 @t714 @t721))
(define @t726 () (@purify @t680))
(define @t727 () (= @t720 @t726))
(define @t728 () (not @t681))
(define @t729 () (= V2_None4198448 @t726))
(define @t730 () (not @t729))
(define @t731 () (and @t703 @t714 @t721 @t727))
(define @t732 () (@purify @t678))
(define @t733 () (= @t726 @t732))
(define @t734 () (not @t679))
(define @t735 () (= V2_get_greet+0x1d @t732))
(define @t736 () (not @t735))
(define @t737 () (and @t703 @t714 @t721 @t727 @t733))
(define @t738 () (@purify @t676))
(define @t739 () (= @t732 @t738))
(define @t740 () (not @t677))
(define @t741 () (= V2_main+0x19 @t738))
(define @t742 () (not @t741))
(define @t743 () (and @t703 @t714 @t721 @t727 @t733 @t739))
(define @t744 () (@purify @t674))
(define @t745 () (= @t738 @t744))
(define @t746 () (not @t675))
(define @t747 () (= V2_get_greet+0xd @t744))
(define @t748 () (not @t747))
(define @t749 () (and @t703 @t714 @t721 @t727 @t733 @t739 @t745))
(define @t750 () (@purify @t672))
(define @t751 () (= @t744 @t750))
(define @t752 () (not @t673))
(define @t753 () (= V2_get_greet+0x16 @t750))
(define @t754 () (not @t753))
(define @t755 () (and @t703 @t714 @t721 @t727 @t733 @t739 @t745 @t751))
(define @t756 () (@purify @t670))
(define @t757 () (= @t750 @t756))
(define @t758 () (not @t671))
(define @t759 () (= V2_main @t756))
(define @t760 () (not @t759))
(define @t761 () (and @t703 @t714 @t721 @t727 @t733 @t739 @t745 @t751 @t757))
(define @t762 () (= V2_get_greet @t756))
(define @t763 () (not @t762))
(define @t764 () (not @t669))
(define @t765 () (@list false true true false))
(define @t766 () (= V2_printf @t712))
(define @t767 () (not @t766))
(define @t768 () (and @t703 @t713 @t722))
(define @t769 () (@purify @t697))
(define @t770 () (= @t712 @t769))
(define @t771 () (not @t698))
(define @t772 () (= V2_None4198448 @t769))
(define @t773 () (not @t772))
(define @t774 () (and @t703 @t713 @t722 @t770))
(define @t775 () (@purify @t695))
(define @t776 () (= @t769 @t775))
(define @t777 () (not @t696))
(define @t778 () (= V2_get_greet+0x1d @t775))
(define @t779 () (not @t778))
(define @t780 () (and @t703 @t713 @t722 @t770 @t776))
(define @t781 () (@purify @t693))
(define @t782 () (= @t775 @t781))
(define @t783 () (not @t694))
(define @t784 () (= V2_main+0x19 @t781))
(define @t785 () (not @t784))
(define @t786 () (and @t703 @t713 @t722 @t770 @t776 @t782))
(define @t787 () (@purify @t691))
(define @t788 () (= @t781 @t787))
(define @t789 () (not @t692))
(define @t790 () (= V2_get_greet+0xd @t787))
(define @t791 () (not @t790))
(define @t792 () (and @t703 @t713 @t722 @t770 @t776 @t782 @t788))
(define @t793 () (@purify @t689))
(define @t794 () (= @t787 @t793))
(define @t795 () (not @t690))
(define @t796 () (= V2_get_greet+0x16 @t793))
(define @t797 () (not @t796))
(define @t798 () (and @t703 @t713 @t722 @t770 @t776 @t782 @t788 @t794))
(define @t799 () (= @t793 @t708))
(define @t800 () (not @t688))
(define @t801 () (not @t709))
(define @t802 () (and @t703 @t713 @t722 @t770 @t776 @t782 @t788 @t794 @t799))
(define @t803 () (not @t710))
(define @t804 () (@list false true true false false))
(define @t805 () (and @t698 @t681 @t716))
(define @t806 () (and @t703 @t713 @t721 @t766 @t727))
(define @t807 () (and @t703 @t713 @t721 @t766 @t727 @t733))
(define @t808 () (and @t703 @t713 @t721 @t766 @t727 @t733 @t739))
(define @t809 () (and @t703 @t713 @t721 @t766 @t727 @t733 @t739 @t745))
(define @t810 () (and @t703 @t713 @t721 @t766 @t727 @t733 @t739 @t745 @t751))
(define @t811 () (and @t703 @t713 @t721 @t766 @t727 @t733 @t739 @t745 @t751 @t757))
(define @t812 () (@list false true true false false false))
(define @t813 () (and @t703 @t713 @t721 @t770 @t723))
(define @t814 () (and @t703 @t713 @t721 @t770 @t723 @t776))
(define @t815 () (and @t703 @t713 @t721 @t770 @t723 @t776 @t782))
(define @t816 () (and @t703 @t713 @t721 @t770 @t723 @t776 @t782 @t788))
(define @t817 () (and @t703 @t713 @t721 @t770 @t723 @t776 @t782 @t788 @t794))
(define @t818 () (and @t703 @t713 @t721 @t770 @t723 @t776 @t782 @t788 @t794 @t799))
(define @t819 () (@list false true true false false false false))
(define @t820 () (and @t696 @t679 @t716))
(define @t821 () (and @t703 @t713 @t721 @t770 @t727 @t772 @t733))
(define @t822 () (and @t703 @t713 @t721 @t770 @t727 @t772 @t733 @t739))
(define @t823 () (and @t703 @t713 @t721 @t770 @t727 @t772 @t733 @t739 @t745))
(define @t824 () (and @t703 @t713 @t721 @t770 @t727 @t772 @t733 @t739 @t745 @t751))
(define @t825 () (and @t703 @t713 @t721 @t770 @t727 @t772 @t733 @t739 @t745 @t751 @t757))
(define @t826 () (@list false true true false false false false false))
(define @t827 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t729))
(define @t828 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t729 @t782))
(define @t829 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t729 @t782 @t788))
(define @t830 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t729 @t782 @t788 @t794))
(define @t831 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t729 @t782 @t788 @t794 @t799))
(define @t832 () (@list false true true false false false false false false))
(define @t833 () (and @t694 @t677 @t716))
(define @t834 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t778 @t739))
(define @t835 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t778 @t739 @t745))
(define @t836 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t778 @t739 @t745 @t751))
(define @t837 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t778 @t739 @t745 @t751 @t757))
(define @t838 () (@list false true true false false false false false false false))
(define @t839 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t782 @t735))
(define @t840 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t782 @t735 @t788))
(define @t841 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t782 @t735 @t788 @t794))
(define @t842 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t782 @t735 @t788 @t794 @t799))
(define @t843 () (@list false true true false false false false false false false false))
(define @t844 () (and @t692 @t675 @t716))
(define @t845 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t782 @t739 @t784 @t745))
(define @t846 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t782 @t739 @t784 @t745 @t751))
(define @t847 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t782 @t739 @t784 @t745 @t751 @t757))
(define @t848 () (@list false true true false false false false false false false false false))
(define @t849 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t782 @t739 @t788 @t741))
(define @t850 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t782 @t739 @t788 @t741 @t794))
(define @t851 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t782 @t739 @t788 @t741 @t794 @t799))
(define @t852 () (@list false true true false false false false false false false false false false))
(define @t853 () (and @t690 @t673 @t716))
(define @t854 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t782 @t739 @t788 @t745 @t790 @t751))
(define @t855 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t782 @t739 @t788 @t745 @t790 @t751 @t757))
(define @t856 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t782 @t739 @t788 @t745 @t794 @t747))
(define @t857 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t782 @t739 @t788 @t745 @t794 @t747 @t799))
(define @t858 () (and @t688 @t671 @t716))
(define @t859 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t782 @t739 @t788 @t745 @t794 @t751 @t796 @t757))
(define @t860 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t782 @t739 @t788 @t745 @t794 @t751 @t799 @t753))
(define @t861 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t782 @t739 @t788 @t745 @t794 @t751 @t799 @t757 @t710))
(define @t862 () (and @t686 @t669 @t716))
(define @t863 () (and @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t782 @t739 @t788 @t745 @t794 @t751 @t799 @t757 @t709))
(define @t864 () (= @t667 V1_main+0x3f))
(define @t865 () (is-V1_main+0x3f @t667))
(define @t866 () (= @t667 V1_printf))
(define @t867 () (is-V1_printf @t667))
(define @t868 () (= @t667 V1_None4198448))
(define @t869 () (is-V1_None4198448 @t667))
(define @t870 () (= @t667 V1_get_greet+0x1d))
(define @t871 () (is-V1_get_greet+0x1d @t667))
(define @t872 () (= @t667 V1_main+0x19))
(define @t873 () (is-V1_main+0x19 @t667))
(define @t874 () (= @t667 V1_get_greet+0xd))
(define @t875 () (is-V1_get_greet+0xd @t667))
(define @t876 () (= @t667 V1_get_greet+0x16))
(define @t877 () (is-V1_get_greet+0x16 @t667))
(define @t878 () (= @t667 V1_get_greet))
(define @t879 () (is-V1_get_greet @t667))
(define @t880 () (= V1_main @t667))
(define @t881 () (= @t667 V1_main))
(define @t882 () (is-V1_main @t667))
(define @t883 () (= @t666 V1_main+0x3f))
(define @t884 () (is-V1_main+0x3f @t666))
(define @t885 () (= @t666 V1_printf))
(define @t886 () (is-V1_printf @t666))
(define @t887 () (= @t666 V1_None4198448))
(define @t888 () (is-V1_None4198448 @t666))
(define @t889 () (= @t666 V1_get_greet+0x1d))
(define @t890 () (is-V1_get_greet+0x1d @t666))
(define @t891 () (= @t666 V1_main+0x19))
(define @t892 () (is-V1_main+0x19 @t666))
(define @t893 () (= @t666 V1_get_greet+0xd))
(define @t894 () (is-V1_get_greet+0xd @t666))
(define @t895 () (= @t666 V1_get_greet+0x16))
(define @t896 () (is-V1_get_greet+0x16 @t666))
(define @t897 () (= @t666 V1_get_greet))
(define @t898 () (is-V1_get_greet @t666))
(define @t899 () (= V1_main @t666))
(define @t900 () (= @t666 V1_main))
(define @t901 () (is-V1_main @t666))
(define @t902 () (and @t880 @t899 @t716))
(assume @p1 (not (and (forall @t4 (=> (g1 @v.0.va @v.0.vb) (g2 @t3 @t2))) (forall @t4 (=> (= @t3 @t2) @t1)))))
(step @p2 (= g1 @t11) :rule refl :args (@t11))
(step @p3 (= g2 @t18) :rule refl :args (@t18))
(step @p4 (= f @t19) :rule refl :args (@t19))
(step @p5 :rule cnf_or_neg :args (@t114 0))
(step @p6 :rule cnf_or_neg :args (@t114 1))
(step @p7 :rule cnf_or_neg :args (@t114 2))
(step @p8 :rule cnf_or_neg :args (@t114 3))
(step @p9 :rule cnf_or_neg :args (@t114 4))
(step @p10 :rule cnf_or_neg :args (@t114 5))
(step @p11 :rule cnf_or_neg :args (@t114 6))
(step @p12 :rule cnf_or_neg :args (@t114 7))
(step @p13 :rule cnf_or_neg :args (@t114 8))
(step @p14 :rule cnf_or_neg :args (@t114 9))
(step @p15 :rule cnf_or_neg :args (@t114 10))
(step @p16 :rule cnf_or_neg :args (@t114 11))
(assume-push @p7655 @t108)
(assume-push @p7656 @t108)
; WARNING: add trust step for TRUST_THEORY_REWRITE
; trust TRUST_THEORY_REWRITE
(step @p19 :rule trust :premises () :args ((= (= V1_get_greet+0x16 V1_main) false)))
(step @p20 :rule symm :premises (@p7655))
(step @p21 :rule refl :args (V1_get_greet+0x16))
(step @p22 :rule cong :premises (@p21 @p20) :args (=))
(step @p23 :rule trans :premises (@p22 @p19))
(step @p24 :rule false_elim :premises (@p23))
(step-pop @p7656 :rule scope :premises (@p24))
(step @p25 :rule process_scope :premises (@p7656) :args (@t87))
(step @p27 :rule modus_ponens :premises (@p7655 @p25))
(step-pop @p7657 :rule scope :premises (@p27))
(step @p28 :rule process_scope :premises (@p7657) :args (@t87))
(step @p30 :rule implies_elim :premises (@p28))
(assume-push @p7659 @t108)
(assume-push @p7660 @t108)
; trust TRUST_THEORY_REWRITE
(step @p33 :rule trust :premises () :args ((= (= V1_get_greet+0xd V1_main) false)))
(step @p34 :rule symm :premises (@p7659))
(step @p35 :rule refl :args (V1_get_greet+0xd))
(step @p36 :rule cong :premises (@p35 @p34) :args (=))
(step @p37 :rule trans :premises (@p36 @p33))
(step @p38 :rule false_elim :premises (@p37))
(step-pop @p7660 :rule scope :premises (@p38))
(step @p39 :rule process_scope :premises (@p7660) :args (@t84))
(step @p41 :rule modus_ponens :premises (@p7659 @p39))
(step-pop @p7661 :rule scope :premises (@p41))
(step @p42 :rule process_scope :premises (@p7661) :args (@t84))
(step @p44 :rule implies_elim :premises (@p42))
(assume-push @p7663 @t108)
(assume-push @p7664 @t108)
; trust TRUST_THEORY_REWRITE
(step @p47 :rule trust :premises () :args ((= (= V1_main+0x19 V1_main) false)))
(step @p48 :rule symm :premises (@p7663))
(step @p49 :rule refl :args (V1_main+0x19))
(step @p50 :rule cong :premises (@p49 @p48) :args (=))
(step @p51 :rule trans :premises (@p50 @p47))
(step @p52 :rule false_elim :premises (@p51))
(step-pop @p7664 :rule scope :premises (@p52))
(step @p53 :rule process_scope :premises (@p7664) :args (@t81))
(step @p55 :rule modus_ponens :premises (@p7663 @p53))
(step-pop @p7665 :rule scope :premises (@p55))
(step @p56 :rule process_scope :premises (@p7665) :args (@t81))
(step @p58 :rule implies_elim :premises (@p56))
(assume-push @p7667 @t108)
(assume-push @p7668 @t108)
; trust TRUST_THEORY_REWRITE
(step @p61 :rule trust :premises () :args ((= (= V1_get_greet+0x1d V1_main) false)))
(step @p62 :rule symm :premises (@p7667))
(step @p63 :rule refl :args (V1_get_greet+0x1d))
(step @p64 :rule cong :premises (@p63 @p62) :args (=))
(step @p65 :rule trans :premises (@p64 @p61))
(step @p66 :rule false_elim :premises (@p65))
(step-pop @p7668 :rule scope :premises (@p66))
(step @p67 :rule process_scope :premises (@p7668) :args (@t77))
(step @p69 :rule modus_ponens :premises (@p7667 @p67))
(step-pop @p7669 :rule scope :premises (@p69))
(step @p70 :rule process_scope :premises (@p7669) :args (@t77))
(step @p72 :rule implies_elim :premises (@p70))
(assume-push @p7671 @t108)
(assume-push @p7672 @t108)
; trust TRUST_THEORY_REWRITE
(step @p75 :rule trust :premises () :args ((= (= V1_None4198448 V1_main) false)))
(step @p76 :rule symm :premises (@p7671))
(step @p77 :rule refl :args (V1_None4198448))
(step @p78 :rule cong :premises (@p77 @p76) :args (=))
(step @p79 :rule trans :premises (@p78 @p75))
(step @p80 :rule false_elim :premises (@p79))
(step-pop @p7672 :rule scope :premises (@p80))
(step @p81 :rule process_scope :premises (@p7672) :args (@t73))
(step @p83 :rule modus_ponens :premises (@p7671 @p81))
(step-pop @p7673 :rule scope :premises (@p83))
(step @p84 :rule process_scope :premises (@p7673) :args (@t73))
(step @p86 :rule implies_elim :premises (@p84))
(assume-push @p7675 @t108)
(assume-push @p7676 @t108)
; trust TRUST_THEORY_REWRITE
(step @p89 :rule trust :premises () :args ((= (= V1_printf V1_main) false)))
(step @p90 :rule symm :premises (@p7675))
(step @p91 :rule refl :args (V1_printf))
(step @p92 :rule cong :premises (@p91 @p90) :args (=))
(step @p93 :rule trans :premises (@p92 @p89))
(step @p94 :rule false_elim :premises (@p93))
(step-pop @p7676 :rule scope :premises (@p94))
(step @p95 :rule process_scope :premises (@p7676) :args (@t63))
(step @p97 :rule modus_ponens :premises (@p7675 @p95))
(step-pop @p7677 :rule scope :premises (@p97))
(step @p98 :rule process_scope :premises (@p7677) :args (@t63))
(step @p100 :rule implies_elim :premises (@p98))
(assume-push @p7679 @t108)
(assume-push @p7680 @t108)
; trust TRUST_THEORY_REWRITE
(step @p103 :rule trust :premises () :args ((= (= V1_main+0x3f V1_main) false)))
(step @p104 :rule symm :premises (@p7679))
(step @p105 :rule refl :args (V1_main+0x3f))
(step @p106 :rule cong :premises (@p105 @p104) :args (=))
(step @p107 :rule trans :premises (@p106 @p103))
(step @p108 :rule false_elim :premises (@p107))
(step-pop @p7680 :rule scope :premises (@p108))
(step @p109 :rule process_scope :premises (@p7680) :args (@t58))
(step @p111 :rule modus_ponens :premises (@p7679 @p109))
(step-pop @p7681 :rule scope :premises (@p111))
(step @p112 :rule process_scope :premises (@p7681) :args (@t58))
(step @p114 :rule implies_elim :premises (@p112))
(assume-push @p7683 @t108)
(assume-push @p7684 @t108)
; trust TRUST_THEORY_REWRITE
(step @p117 :rule trust :premises () :args ((= (= V1_get_greet V1_main) false)))
(step @p118 :rule symm :premises (@p7683))
(step @p119 :rule refl :args (V1_get_greet))
(step @p120 :rule cong :premises (@p119 @p118) :args (=))
(step @p121 :rule trans :premises (@p120 @p117))
(step @p122 :rule false_elim :premises (@p121))
(step-pop @p7684 :rule scope :premises (@p122))
(step @p123 :rule process_scope :premises (@p7684) :args (@t94))
(step @p125 :rule modus_ponens :premises (@p7683 @p123))
(step-pop @p7685 :rule scope :premises (@p125))
(step @p126 :rule process_scope :premises (@p7685) :args (@t94))
(step @p128 :rule implies_elim :premises (@p126))
; trust TRUST_THEORY_REWRITE
(step @p129 :rule trust :premises () :args ((= (not @t94) @t86)))
(step @p130 :rule refl :args (@t107))
(step @p131 :rule nary_cong :premises (@p130 @p129) :args (or))
(step @p132 :rule cnf_or_neg :args (@t107 0))
(step @p133 :rule eq_resolve :premises (@p132 @p131))
(step @p134 :rule reordering :premises (@p133) :args ((or @t86 @t107)))
(step @p135 :rule refl :args (@t106))
(step @p136 :rule nary_cong :premises (@p135 @p129) :args (or))
(step @p137 :rule cnf_or_neg :args (@t106 0))
(step @p138 :rule eq_resolve :premises (@p137 @p136))
(step @p139 :rule reordering :premises (@p138) :args ((or @t86 @t106)))
; trust TRUST_THEORY_REWRITE
(step @p140 :rule trust :premises () :args ((= (not @t87) @t83)))
(step @p141 :rule refl :args (@t105))
(step @p142 :rule nary_cong :premises (@p141 @p140) :args (or))
(step @p143 :rule cnf_or_neg :args (@t105 0))
(step @p144 :rule eq_resolve :premises (@p143 @p142))
(step @p145 :rule reordering :premises (@p144) :args ((or @t83 @t105)))
; trust TRUST_THEORY_REWRITE
(step @p146 :rule trust :premises () :args ((= (not @t84) @t80)))
(step @p147 :rule refl :args (@t104))
(step @p148 :rule nary_cong :premises (@p147 @p146) :args (or))
(step @p149 :rule cnf_or_neg :args (@t104 0))
(step @p150 :rule eq_resolve :premises (@p149 @p148))
(step @p151 :rule reordering :premises (@p150) :args ((or @t80 @t104)))
; trust TRUST_THEORY_REWRITE
(step @p152 :rule trust :premises () :args ((= (not @t81) @t76)))
(step @p153 :rule refl :args (@t103))
(step @p154 :rule nary_cong :premises (@p153 @p152) :args (or))
(step @p155 :rule cnf_or_neg :args (@t103 0))
(step @p156 :rule eq_resolve :premises (@p155 @p154))
(step @p157 :rule reordering :premises (@p156) :args ((or @t76 @t103)))
(step @p158 :rule refl :args (@t102))
(step @p159 :rule nary_cong :premises (@p158 @p152) :args (or))
(step @p160 :rule cnf_or_neg :args (@t102 0))
(step @p161 :rule eq_resolve :premises (@p160 @p159))
(step @p162 :rule reordering :premises (@p161) :args ((or @t76 @t102)))
; trust TRUST_THEORY_REWRITE
(step @p163 :rule trust :premises () :args ((= (not @t77) @t72)))
(step @p164 :rule refl :args (@t101))
(step @p165 :rule nary_cong :premises (@p164 @p163) :args (or))
(step @p166 :rule cnf_or_neg :args (@t101 0))
(step @p167 :rule eq_resolve :premises (@p166 @p165))
(step @p168 :rule reordering :premises (@p167) :args ((or @t72 @t101)))
; trust TRUST_THEORY_REWRITE
(step @p169 :rule trust :premises () :args ((= (not @t73) @t62)))
(step @p170 :rule refl :args (@t100))
(step @p171 :rule nary_cong :premises (@p170 @p169) :args (or))
(step @p172 :rule cnf_or_neg :args (@t100 0))
(step @p173 :rule eq_resolve :premises (@p172 @p171))
(step @p174 :rule reordering :premises (@p173) :args ((or @t62 @t100)))
; trust TRUST_THEORY_REWRITE
(step @p175 :rule trust :premises () :args ((= (not @t63) @t56)))
(step @p176 :rule refl :args (@t99))
(step @p177 :rule nary_cong :premises (@p176 @p175) :args (or))
(step @p178 :rule cnf_or_neg :args (@t99 0))
(step @p179 :rule eq_resolve :premises (@p178 @p177))
(step @p180 :rule reordering :premises (@p179) :args ((or @t56 @t99)))
(assume-push @p7687 @t96)
(assume-push @p7688 @t96)
; trust TRUST_THEORY_REWRITE
(step @p183 :rule trust :premises () :args (@t115))
(step @p184 :rule symm :premises (@p7687))
(step @p49 :rule refl :args (V1_main+0x19))
(step @p185 :rule cong :premises (@p49 @p184) :args (=))
(step @p186 :rule trans :premises (@p185 @p183))
(step @p187 :rule false_elim :premises (@p186))
(step-pop @p7688 :rule scope :premises (@p187))
(step @p188 :rule process_scope :premises (@p7688) :args (@t89))
(step @p190 :rule modus_ponens :premises (@p7687 @p188))
(step-pop @p7689 :rule scope :premises (@p190))
(step @p191 :rule process_scope :premises (@p7689) :args (@t89))
(step @p193 :rule implies_elim :premises (@p191))
(assume-push @p7691 @t96)
(assume-push @p7692 @t96)
; trust TRUST_THEORY_REWRITE
(step @p196 :rule trust :premises () :args (@t116))
(step @p197 :rule symm :premises (@p7691))
(step @p21 :rule refl :args (V1_get_greet+0x16))
(step @p198 :rule cong :premises (@p21 @p197) :args (=))
(step @p199 :rule trans :premises (@p198 @p196))
(step @p200 :rule false_elim :premises (@p199))
(step-pop @p7692 :rule scope :premises (@p200))
(step @p201 :rule process_scope :premises (@p7692) :args (@t97))
(step @p203 :rule modus_ponens :premises (@p7691 @p201))
(step-pop @p7693 :rule scope :premises (@p203))
(step @p204 :rule process_scope :premises (@p7693) :args (@t97))
(step @p206 :rule implies_elim :premises (@p204))
(assume-push @p7695 @t96)
(assume-push @p7696 @t96)
; trust TRUST_THEORY_REWRITE
(step @p209 :rule trust :premises () :args (@t117))
(step @p210 :rule symm :premises (@p7695))
(step @p35 :rule refl :args (V1_get_greet+0xd))
(step @p211 :rule cong :premises (@p35 @p210) :args (=))
(step @p212 :rule trans :premises (@p211 @p209))
(step @p213 :rule false_elim :premises (@p212))
(step-pop @p7696 :rule scope :premises (@p213))
(step @p214 :rule process_scope :premises (@p7696) :args (@t92))
(step @p216 :rule modus_ponens :premises (@p7695 @p214))
(step-pop @p7697 :rule scope :premises (@p216))
(step @p217 :rule process_scope :premises (@p7697) :args (@t92))
(step @p219 :rule implies_elim :premises (@p217))
(assume-push @p7699 @t96)
(assume-push @p7700 @t96)
; trust TRUST_THEORY_REWRITE
(step @p222 :rule trust :premises () :args (@t118))
(step @p223 :rule symm :premises (@p7699))
(step @p63 :rule refl :args (V1_get_greet+0x1d))
(step @p224 :rule cong :premises (@p63 @p223) :args (=))
(step @p225 :rule trans :premises (@p224 @p222))
(step @p226 :rule false_elim :premises (@p225))
(step-pop @p7700 :rule scope :premises (@p226))
(step @p227 :rule process_scope :premises (@p7700) :args (@t69))
(step @p229 :rule modus_ponens :premises (@p7699 @p227))
(step-pop @p7701 :rule scope :premises (@p229))
(step @p230 :rule process_scope :premises (@p7701) :args (@t69))
(step @p232 :rule implies_elim :premises (@p230))
(assume-push @p7703 @t96)
(assume-push @p7704 @t96)
; trust TRUST_THEORY_REWRITE
(step @p235 :rule trust :premises () :args (@t119))
(step @p236 :rule symm :premises (@p7703))
(step @p77 :rule refl :args (V1_None4198448))
(step @p237 :rule cong :premises (@p77 @p236) :args (=))
(step @p238 :rule trans :premises (@p237 @p235))
(step @p239 :rule false_elim :premises (@p238))
(step-pop @p7704 :rule scope :premises (@p239))
(step @p240 :rule process_scope :premises (@p7704) :args (@t71))
(step @p242 :rule modus_ponens :premises (@p7703 @p240))
(step-pop @p7705 :rule scope :premises (@p242))
(step @p243 :rule process_scope :premises (@p7705) :args (@t71))
(step @p245 :rule implies_elim :premises (@p243))
(assume-push @p7707 @t96)
(assume-push @p7708 @t96)
; trust TRUST_THEORY_REWRITE
(step @p248 :rule trust :premises () :args (@t120))
(step @p249 :rule symm :premises (@p7707))
(step @p105 :rule refl :args (V1_main+0x3f))
(step @p250 :rule cong :premises (@p105 @p249) :args (=))
(step @p251 :rule trans :premises (@p250 @p248))
(step @p252 :rule false_elim :premises (@p251))
(step-pop @p7708 :rule scope :premises (@p252))
(step @p253 :rule process_scope :premises (@p7708) :args (@t65))
(step @p255 :rule modus_ponens :premises (@p7707 @p253))
(step-pop @p7709 :rule scope :premises (@p255))
(step @p256 :rule process_scope :premises (@p7709) :args (@t65))
(step @p258 :rule implies_elim :premises (@p256))
(assume-push @p7711 @t96)
(assume-push @p7712 @t96)
; trust TRUST_THEORY_REWRITE
(step @p261 :rule trust :premises () :args (@t121))
(step @p262 :rule symm :premises (@p7711))
(step @p91 :rule refl :args (V1_printf))
(step @p263 :rule cong :premises (@p91 @p262) :args (=))
(step @p264 :rule trans :premises (@p263 @p261))
(step @p265 :rule false_elim :premises (@p264))
(step-pop @p7712 :rule scope :premises (@p265))
(step @p266 :rule process_scope :premises (@p7712) :args (@t74))
(step @p268 :rule modus_ponens :premises (@p7711 @p266))
(step-pop @p7713 :rule scope :premises (@p268))
(step @p269 :rule process_scope :premises (@p7713) :args (@t74))
(step @p271 :rule implies_elim :premises (@p269))
(step @p272 :rule refl :args (@t111))
; trust TRUST_THEORY_REWRITE
(step @p273 :rule trust :premises () :args ((= (not @t97) @t91)))
; trust TRUST_THEORY_REWRITE
(step @p274 :rule trust :premises () :args ((= (not @t92) @t88)))
; trust TRUST_THEORY_REWRITE
(step @p275 :rule trust :premises () :args ((= (not @t89) @t67)))
; trust TRUST_THEORY_REWRITE
(step @p276 :rule trust :premises () :args ((= (not @t69) @t68)))
; trust TRUST_THEORY_REWRITE
(step @p277 :rule trust :premises () :args ((= (not @t71) @t70)))
; trust TRUST_THEORY_REWRITE
(step @p278 :rule trust :premises () :args ((= (not @t74) @t64)))
; trust TRUST_THEORY_REWRITE
(step @p279 :rule trust :premises () :args ((= (not @t65) @t60)))
; trust TRUST_THEORY_REWRITE
(step @p280 :rule trust :premises () :args ((= (not @t58) @t57)))
(step @p281 :rule refl :args (@t98))
(step @p282 :rule nary_cong :premises (@p281 @p280 @p279 @p175 @p278 @p169 @p277 @p163 @p276 @p152 @p275 @p146 @p274 @p140 @p129 @p273 @p272) :args (or))
(step @p283 :rule cnf_and_neg :args (@t98))
(step @p284 :rule eq_resolve :premises (@p283 @p282))
(step @p285 :rule reordering :premises (@p284) :args ((or @t111 @t67 @t86 @t91 @t88 @t83 @t80 @t68 @t76 @t70 @t60 @t72 @t62 @t64 @t56 @t57 @t98)))
(step @p286 :rule chain_resolution :premises (@p285 @p271 @p258 @p245 @p232 @p219 @p206 @p193) :args ((@list true true true true true true true) (@list @t64 @t60 @t70 @t68 @t88 @t91 @t67)))
(step @p287 :rule factoring :premises (@p286))
; trust TRUST_THEORY_REWRITE
(step @p288 :rule trust :premises () :args ((= (not @t111) @t96)))
(step @p289 :rule refl :args (@t112))
(step @p290 :rule nary_cong :premises (@p289 @p288) :args (or))
(step @p291 :rule cnf_or_neg :args (@t112 1))
(step @p292 :rule eq_resolve :premises (@p291 @p290))
(step @p293 :rule reordering :premises (@p292) :args ((or @t96 @t112)))
(step @p294 :rule cnf_and_neg :args (@t113))
(step @p295 :rule refl :args (@t110))
(step @p296 :rule nary_cong :premises (@p295 @p275) :args (or))
(step @p297 :rule cnf_or_neg :args (@t110 1))
(step @p298 :rule eq_resolve :premises (@p297 @p296))
(step @p299 :rule reordering :premises (@p298) :args ((or @t67 @t110)))
(assume-push @p7715 @t67)
(assume-push @p7716 @t67)
; trust TRUST_THEORY_REWRITE
(step @p302 :rule trust :premises () :args (@t122))
(step @p303 :rule symm :premises (@p7715))
(step @p63 :rule refl :args (V1_get_greet+0x1d))
(step @p304 :rule cong :premises (@p63 @p303) :args (=))
(step @p305 :rule trans :premises (@p304 @p302))
(step @p306 :rule false_elim :premises (@p305))
(step-pop @p7716 :rule scope :premises (@p306))
(step @p307 :rule process_scope :premises (@p7716) :args (@t69))
(step @p309 :rule modus_ponens :premises (@p7715 @p307))
(step-pop @p7717 :rule scope :premises (@p309))
(step @p310 :rule process_scope :premises (@p7717) :args (@t69))
(step @p312 :rule implies_elim :premises (@p310))
(assume-push @p7719 @t67)
(assume-push @p7720 @t67)
; trust TRUST_THEORY_REWRITE
(step @p315 :rule trust :premises () :args (@t123))
(step @p316 :rule symm :premises (@p7719))
(step @p77 :rule refl :args (V1_None4198448))
(step @p317 :rule cong :premises (@p77 @p316) :args (=))
(step @p318 :rule trans :premises (@p317 @p315))
(step @p319 :rule false_elim :premises (@p318))
(step-pop @p7720 :rule scope :premises (@p319))
(step @p320 :rule process_scope :premises (@p7720) :args (@t71))
(step @p322 :rule modus_ponens :premises (@p7719 @p320))
(step-pop @p7721 :rule scope :premises (@p322))
(step @p323 :rule process_scope :premises (@p7721) :args (@t71))
(step @p325 :rule implies_elim :premises (@p323))
(assume-push @p7723 @t67)
(assume-push @p7724 @t67)
; trust TRUST_THEORY_REWRITE
(step @p328 :rule trust :premises () :args (@t124))
(step @p329 :rule symm :premises (@p7723))
(step @p105 :rule refl :args (V1_main+0x3f))
(step @p330 :rule cong :premises (@p105 @p329) :args (=))
(step @p331 :rule trans :premises (@p330 @p328))
(step @p332 :rule false_elim :premises (@p331))
(step-pop @p7724 :rule scope :premises (@p332))
(step @p333 :rule process_scope :premises (@p7724) :args (@t65))
(step @p335 :rule modus_ponens :premises (@p7723 @p333))
(step-pop @p7725 :rule scope :premises (@p335))
(step @p336 :rule process_scope :premises (@p7725) :args (@t65))
(step @p338 :rule implies_elim :premises (@p336))
(assume-push @p7727 @t67)
(assume-push @p7728 @t67)
; trust TRUST_THEORY_REWRITE
(step @p341 :rule trust :premises () :args (@t125))
(step @p342 :rule symm :premises (@p7727))
(step @p91 :rule refl :args (V1_printf))
(step @p343 :rule cong :premises (@p91 @p342) :args (=))
(step @p344 :rule trans :premises (@p343 @p341))
(step @p345 :rule false_elim :premises (@p344))
(step-pop @p7728 :rule scope :premises (@p345))
(step @p346 :rule process_scope :premises (@p7728) :args (@t74))
(step @p348 :rule modus_ponens :premises (@p7727 @p346))
(step-pop @p7729 :rule scope :premises (@p348))
(step @p349 :rule process_scope :premises (@p7729) :args (@t74))
(step @p351 :rule implies_elim :premises (@p349))
(step @p352 :rule refl :args (@t89))
(step @p353 :rule refl :args (@t95))
(step @p354 :rule nary_cong :premises (@p353 @p280 @p279 @p175 @p278 @p169 @p277 @p163 @p276 @p352 @p152 @p146 @p140 @p129) :args (or))
(step @p355 :rule cnf_and_neg :args (@t95))
(step @p356 :rule eq_resolve :premises (@p355 @p354))
(step @p357 :rule reordering :premises (@p356) :args ((or @t89 @t86 @t83 @t80 @t68 @t76 @t70 @t60 @t72 @t62 @t64 @t56 @t57 @t95)))
(step @p358 :rule chain_resolution :premises (@p357 @p351 @p338 @p325 @p312) :args (@t126 (@list @t64 @t60 @t70 @t68)))
(step @p359 :rule factoring :premises (@p358))
(step @p360 :rule chain_resolution :premises (@p359 @p299 @p294 @p293 @p287 @p180 @p174 @p168 @p162 @p157 @p151 @p145 @p139 @p134) :args ((@list false true false true false false false false false false false false false) (@list @t67 @t110 @t112 @t96 @t99 @t100 @t101 @t102 @t103 @t104 @t105 @t106 @t107)))
(step @p361 :rule factoring :premises (@p360))
(step @p362 :rule chain_resolution :premises (@p361 @p128 @p114 @p100 @p86 @p72 @p58 @p44 @p30) :args (@t127 (@list @t86 @t57 @t56 @t62 @t72 @t76 @t80 @t83)))
(step @p363 :rule factoring :premises (@p362))
(step @p364 :rule reordering :premises (@p363) :args ((or @t109 @t113 @t98 @t95)))
; trust TRUST_THEORY_REWRITE
(step @p365 :rule trust :premises () :args ((= (not @t109) @t108)))
(step @p366 :rule nary_cong :premises (@p289 @p365) :args (or))
(step @p367 :rule cnf_or_neg :args (@t112 0))
(step @p368 :rule eq_resolve :premises (@p367 @p366))
(step @p369 :rule reordering :premises (@p368) :args ((or @t108 @t112)))
(step @p370 :rule nary_cong :premises (@p295 @p365) :args (or))
(step @p371 :rule cnf_or_neg :args (@t110 0))
(step @p372 :rule eq_resolve :premises (@p371 @p370))
(step @p373 :rule reordering :premises (@p372) :args ((or @t108 @t110)))
(assume-push @p7731 @t86)
(assume-push @p7732 @t86)
; trust TRUST_THEORY_REWRITE
(step @p209 :rule trust :premises () :args (@t117))
(step @p376 :rule symm :premises (@p7731))
(step @p35 :rule refl :args (V1_get_greet+0xd))
(step @p377 :rule cong :premises (@p35 @p376) :args (=))
(step @p378 :rule trans :premises (@p377 @p209))
(step @p379 :rule false_elim :premises (@p378))
(step-pop @p7732 :rule scope :premises (@p379))
(step @p380 :rule process_scope :premises (@p7732) :args (@t84))
(step @p382 :rule modus_ponens :premises (@p7731 @p380))
(step-pop @p7733 :rule scope :premises (@p382))
(step @p383 :rule process_scope :premises (@p7733) :args (@t84))
(step @p385 :rule implies_elim :premises (@p383))
(assume-push @p7735 @t86)
(assume-push @p7736 @t86)
; trust TRUST_THEORY_REWRITE
(step @p183 :rule trust :premises () :args (@t115))
(step @p388 :rule symm :premises (@p7735))
(step @p49 :rule refl :args (V1_main+0x19))
(step @p389 :rule cong :premises (@p49 @p388) :args (=))
(step @p390 :rule trans :premises (@p389 @p183))
(step @p391 :rule false_elim :premises (@p390))
(step-pop @p7736 :rule scope :premises (@p391))
(step @p392 :rule process_scope :premises (@p7736) :args (@t81))
(step @p394 :rule modus_ponens :premises (@p7735 @p392))
(step-pop @p7737 :rule scope :premises (@p394))
(step @p395 :rule process_scope :premises (@p7737) :args (@t81))
(step @p397 :rule implies_elim :premises (@p395))
(assume-push @p7739 @t86)
(assume-push @p7740 @t86)
; trust TRUST_THEORY_REWRITE
(step @p222 :rule trust :premises () :args (@t118))
(step @p400 :rule symm :premises (@p7739))
(step @p63 :rule refl :args (V1_get_greet+0x1d))
(step @p401 :rule cong :premises (@p63 @p400) :args (=))
(step @p402 :rule trans :premises (@p401 @p222))
(step @p403 :rule false_elim :premises (@p402))
(step-pop @p7740 :rule scope :premises (@p403))
(step @p404 :rule process_scope :premises (@p7740) :args (@t77))
(step @p406 :rule modus_ponens :premises (@p7739 @p404))
(step-pop @p7741 :rule scope :premises (@p406))
(step @p407 :rule process_scope :premises (@p7741) :args (@t77))
(step @p409 :rule implies_elim :premises (@p407))
(assume-push @p7743 @t86)
(assume-push @p7744 @t86)
; trust TRUST_THEORY_REWRITE
(step @p235 :rule trust :premises () :args (@t119))
(step @p412 :rule symm :premises (@p7743))
(step @p77 :rule refl :args (V1_None4198448))
(step @p413 :rule cong :premises (@p77 @p412) :args (=))
(step @p414 :rule trans :premises (@p413 @p235))
(step @p415 :rule false_elim :premises (@p414))
(step-pop @p7744 :rule scope :premises (@p415))
(step @p416 :rule process_scope :premises (@p7744) :args (@t73))
(step @p418 :rule modus_ponens :premises (@p7743 @p416))
(step-pop @p7745 :rule scope :premises (@p418))
(step @p419 :rule process_scope :premises (@p7745) :args (@t73))
(step @p421 :rule implies_elim :premises (@p419))
(assume-push @p7747 @t86)
(assume-push @p7748 @t86)
; trust TRUST_THEORY_REWRITE
(step @p261 :rule trust :premises () :args (@t121))
(step @p424 :rule symm :premises (@p7747))
(step @p91 :rule refl :args (V1_printf))
(step @p425 :rule cong :premises (@p91 @p424) :args (=))
(step @p426 :rule trans :premises (@p425 @p261))
(step @p427 :rule false_elim :premises (@p426))
(step-pop @p7748 :rule scope :premises (@p427))
(step @p428 :rule process_scope :premises (@p7748) :args (@t63))
(step @p430 :rule modus_ponens :premises (@p7747 @p428))
(step-pop @p7749 :rule scope :premises (@p430))
(step @p431 :rule process_scope :premises (@p7749) :args (@t63))
(step @p433 :rule implies_elim :premises (@p431))
(assume-push @p7751 @t86)
(assume-push @p7752 @t86)
; trust TRUST_THEORY_REWRITE
(step @p196 :rule trust :premises () :args (@t116))
(step @p436 :rule symm :premises (@p7751))
(step @p21 :rule refl :args (V1_get_greet+0x16))
(step @p437 :rule cong :premises (@p21 @p436) :args (=))
(step @p438 :rule trans :premises (@p437 @p196))
(step @p439 :rule false_elim :premises (@p438))
(step-pop @p7752 :rule scope :premises (@p439))
(step @p440 :rule process_scope :premises (@p7752) :args (@t87))
(step @p442 :rule modus_ponens :premises (@p7751 @p440))
(step-pop @p7753 :rule scope :premises (@p442))
(step @p443 :rule process_scope :premises (@p7753) :args (@t87))
(step @p445 :rule implies_elim :premises (@p443))
(assume-push @p7755 @t86)
(assume-push @p7756 @t86)
; trust TRUST_THEORY_REWRITE
(step @p248 :rule trust :premises () :args (@t120))
(step @p448 :rule symm :premises (@p7755))
(step @p105 :rule refl :args (V1_main+0x3f))
(step @p449 :rule cong :premises (@p105 @p448) :args (=))
(step @p450 :rule trans :premises (@p449 @p248))
(step @p451 :rule false_elim :premises (@p450))
(step-pop @p7756 :rule scope :premises (@p451))
(step @p452 :rule process_scope :premises (@p7756) :args (@t58))
(step @p454 :rule modus_ponens :premises (@p7755 @p452))
(step-pop @p7757 :rule scope :premises (@p454))
(step @p455 :rule process_scope :premises (@p7757) :args (@t58))
(step @p457 :rule implies_elim :premises (@p455))
(assume-push @p7759 @t91)
(assume-push @p7760 @t91)
; trust TRUST_THEORY_REWRITE
(step @p460 :rule trust :premises () :args (@t128))
(step @p461 :rule symm :premises (@p7759))
(step @p49 :rule refl :args (V1_main+0x19))
(step @p462 :rule cong :premises (@p49 @p461) :args (=))
(step @p463 :rule trans :premises (@p462 @p460))
(step @p464 :rule false_elim :premises (@p463))
(step-pop @p7760 :rule scope :premises (@p464))
(step @p465 :rule process_scope :premises (@p7760) :args (@t89))
(step @p467 :rule modus_ponens :premises (@p7759 @p465))
(step-pop @p7761 :rule scope :premises (@p467))
(step @p468 :rule process_scope :premises (@p7761) :args (@t89))
(step @p470 :rule implies_elim :premises (@p468))
(step @p471 :rule reordering :premises (@p470) :args ((or @t89 @t97)))
(assume-push @p7763 @t91)
(assume-push @p7764 @t91)
; trust TRUST_THEORY_REWRITE
(step @p474 :rule trust :premises () :args (@t129))
(step @p475 :rule symm :premises (@p7763))
(step @p35 :rule refl :args (V1_get_greet+0xd))
(step @p476 :rule cong :premises (@p35 @p475) :args (=))
(step @p477 :rule trans :premises (@p476 @p474))
(step @p478 :rule false_elim :premises (@p477))
(step-pop @p7764 :rule scope :premises (@p478))
(step @p479 :rule process_scope :premises (@p7764) :args (@t92))
(step @p481 :rule modus_ponens :premises (@p7763 @p479))
(step-pop @p7765 :rule scope :premises (@p481))
(step @p482 :rule process_scope :premises (@p7765) :args (@t92))
(step @p484 :rule implies_elim :premises (@p482))
(assume-push @p7767 @t91)
(assume-push @p7768 @t91)
; trust TRUST_THEORY_REWRITE
(step @p487 :rule trust :premises () :args (@t130))
(step @p488 :rule symm :premises (@p7767))
(step @p63 :rule refl :args (V1_get_greet+0x1d))
(step @p489 :rule cong :premises (@p63 @p488) :args (=))
(step @p490 :rule trans :premises (@p489 @p487))
(step @p491 :rule false_elim :premises (@p490))
(step-pop @p7768 :rule scope :premises (@p491))
(step @p492 :rule process_scope :premises (@p7768) :args (@t69))
(step @p494 :rule modus_ponens :premises (@p7767 @p492))
(step-pop @p7769 :rule scope :premises (@p494))
(step @p495 :rule process_scope :premises (@p7769) :args (@t69))
(step @p497 :rule implies_elim :premises (@p495))
(assume-push @p7771 @t91)
(assume-push @p7772 @t91)
; trust TRUST_THEORY_REWRITE
(step @p500 :rule trust :premises () :args (@t131))
(step @p501 :rule symm :premises (@p7771))
(step @p77 :rule refl :args (V1_None4198448))
(step @p502 :rule cong :premises (@p77 @p501) :args (=))
(step @p503 :rule trans :premises (@p502 @p500))
(step @p504 :rule false_elim :premises (@p503))
(step-pop @p7772 :rule scope :premises (@p504))
(step @p505 :rule process_scope :premises (@p7772) :args (@t71))
(step @p507 :rule modus_ponens :premises (@p7771 @p505))
(step-pop @p7773 :rule scope :premises (@p507))
(step @p508 :rule process_scope :premises (@p7773) :args (@t71))
(step @p510 :rule implies_elim :premises (@p508))
(assume-push @p7775 @t91)
(assume-push @p7776 @t91)
; trust TRUST_THEORY_REWRITE
(step @p513 :rule trust :premises () :args (@t132))
(step @p514 :rule symm :premises (@p7775))
(step @p105 :rule refl :args (V1_main+0x3f))
(step @p515 :rule cong :premises (@p105 @p514) :args (=))
(step @p516 :rule trans :premises (@p515 @p513))
(step @p517 :rule false_elim :premises (@p516))
(step-pop @p7776 :rule scope :premises (@p517))
(step @p518 :rule process_scope :premises (@p7776) :args (@t65))
(step @p520 :rule modus_ponens :premises (@p7775 @p518))
(step-pop @p7777 :rule scope :premises (@p520))
(step @p521 :rule process_scope :premises (@p7777) :args (@t65))
(step @p523 :rule implies_elim :premises (@p521))
(assume-push @p7779 @t91)
(assume-push @p7780 @t91)
; trust TRUST_THEORY_REWRITE
(step @p526 :rule trust :premises () :args (@t133))
(step @p527 :rule symm :premises (@p7779))
(step @p91 :rule refl :args (V1_printf))
(step @p528 :rule cong :premises (@p91 @p527) :args (=))
(step @p529 :rule trans :premises (@p528 @p526))
(step @p530 :rule false_elim :premises (@p529))
(step-pop @p7780 :rule scope :premises (@p530))
(step @p531 :rule process_scope :premises (@p7780) :args (@t74))
(step @p533 :rule modus_ponens :premises (@p7779 @p531))
(step-pop @p7781 :rule scope :premises (@p533))
(step @p534 :rule process_scope :premises (@p7781) :args (@t74))
(step @p536 :rule implies_elim :premises (@p534))
(step @p537 :rule refl :args (@t94))
(step @p538 :rule refl :args (@t97))
(step @p539 :rule refl :args (@t93))
(step @p540 :rule nary_cong :premises (@p539 @p280 @p279 @p175 @p278 @p169 @p277 @p163 @p276 @p152 @p275 @p146 @p274 @p538 @p140 @p537) :args (or))
(step @p541 :rule cnf_and_neg :args (@t93))
(step @p542 :rule eq_resolve :premises (@p541 @p540))
(step @p543 :rule reordering :premises (@p542) :args ((or @t67 @t94 @t97 @t88 @t83 @t80 @t68 @t76 @t70 @t60 @t72 @t62 @t64 @t56 @t57 @t93)))
(step @p544 :rule chain_resolution :premises (@p543 @p536 @p523 @p510 @p497 @p484 @p471 @p457 @p433 @p421 @p409 @p397 @p385 @p445) :args ((@list true true true true true true true true true true true true true) (@list @t64 @t60 @t70 @t68 @t88 @t67 @t57 @t56 @t62 @t72 @t76 @t80 @t83)))
(step @p545 :rule factoring :premises (@p544))
(step @p546 :rule nary_cong :premises (@p130 @p273) :args (or))
(step @p547 :rule cnf_or_neg :args (@t107 1))
(step @p548 :rule eq_resolve :premises (@p547 @p546))
(step @p549 :rule reordering :premises (@p548) :args ((or @t91 @t107)))
(step @p550 :rule nary_cong :premises (@p135 @p274) :args (or))
(step @p551 :rule cnf_or_neg :args (@t106 1))
(step @p552 :rule eq_resolve :premises (@p551 @p550))
(step @p553 :rule reordering :premises (@p552) :args ((or @t88 @t106)))
(assume-push @p7783 @t88)
(assume-push @p7784 @t88)
; trust TRUST_THEORY_REWRITE
(step @p556 :rule trust :premises () :args (@t134))
(step @p557 :rule symm :premises (@p7783))
(step @p49 :rule refl :args (V1_main+0x19))
(step @p558 :rule cong :premises (@p49 @p557) :args (=))
(step @p559 :rule trans :premises (@p558 @p556))
(step @p560 :rule false_elim :premises (@p559))
(step-pop @p7784 :rule scope :premises (@p560))
(step @p561 :rule process_scope :premises (@p7784) :args (@t89))
(step @p563 :rule modus_ponens :premises (@p7783 @p561))
(step-pop @p7785 :rule scope :premises (@p563))
(step @p564 :rule process_scope :premises (@p7785) :args (@t89))
(step @p566 :rule implies_elim :premises (@p564))
(step @p567 :rule reordering :premises (@p566) :args ((or @t89 @t92)))
(assume-push @p7787 @t88)
(assume-push @p7788 @t88)
; trust TRUST_THEORY_REWRITE
(step @p570 :rule trust :premises () :args (@t135))
(step @p571 :rule symm :premises (@p7787))
(step @p63 :rule refl :args (V1_get_greet+0x1d))
(step @p572 :rule cong :premises (@p63 @p571) :args (=))
(step @p573 :rule trans :premises (@p572 @p570))
(step @p574 :rule false_elim :premises (@p573))
(step-pop @p7788 :rule scope :premises (@p574))
(step @p575 :rule process_scope :premises (@p7788) :args (@t69))
(step @p577 :rule modus_ponens :premises (@p7787 @p575))
(step-pop @p7789 :rule scope :premises (@p577))
(step @p578 :rule process_scope :premises (@p7789) :args (@t69))
(step @p580 :rule implies_elim :premises (@p578))
(assume-push @p7791 @t88)
(assume-push @p7792 @t88)
; trust TRUST_THEORY_REWRITE
(step @p583 :rule trust :premises () :args (@t136))
(step @p584 :rule symm :premises (@p7791))
(step @p77 :rule refl :args (V1_None4198448))
(step @p585 :rule cong :premises (@p77 @p584) :args (=))
(step @p586 :rule trans :premises (@p585 @p583))
(step @p587 :rule false_elim :premises (@p586))
(step-pop @p7792 :rule scope :premises (@p587))
(step @p588 :rule process_scope :premises (@p7792) :args (@t71))
(step @p590 :rule modus_ponens :premises (@p7791 @p588))
(step-pop @p7793 :rule scope :premises (@p590))
(step @p591 :rule process_scope :premises (@p7793) :args (@t71))
(step @p593 :rule implies_elim :premises (@p591))
(assume-push @p7795 @t88)
(assume-push @p7796 @t88)
; trust TRUST_THEORY_REWRITE
(step @p596 :rule trust :premises () :args (@t137))
(step @p597 :rule symm :premises (@p7795))
(step @p105 :rule refl :args (V1_main+0x3f))
(step @p598 :rule cong :premises (@p105 @p597) :args (=))
(step @p599 :rule trans :premises (@p598 @p596))
(step @p600 :rule false_elim :premises (@p599))
(step-pop @p7796 :rule scope :premises (@p600))
(step @p601 :rule process_scope :premises (@p7796) :args (@t65))
(step @p603 :rule modus_ponens :premises (@p7795 @p601))
(step-pop @p7797 :rule scope :premises (@p603))
(step @p604 :rule process_scope :premises (@p7797) :args (@t65))
(step @p606 :rule implies_elim :premises (@p604))
(assume-push @p7799 @t88)
(assume-push @p7800 @t88)
; trust TRUST_THEORY_REWRITE
(step @p609 :rule trust :premises () :args (@t138))
(step @p610 :rule symm :premises (@p7799))
(step @p91 :rule refl :args (V1_printf))
(step @p611 :rule cong :premises (@p91 @p610) :args (=))
(step @p612 :rule trans :premises (@p611 @p609))
(step @p613 :rule false_elim :premises (@p612))
(step-pop @p7800 :rule scope :premises (@p613))
(step @p614 :rule process_scope :premises (@p7800) :args (@t74))
(step @p616 :rule modus_ponens :premises (@p7799 @p614))
(step-pop @p7801 :rule scope :premises (@p616))
(step @p617 :rule process_scope :premises (@p7801) :args (@t74))
(step @p619 :rule implies_elim :premises (@p617))
(step @p620 :rule refl :args (@t92))
(step @p621 :rule refl :args (@t90))
(step @p622 :rule nary_cong :premises (@p621 @p280 @p279 @p175 @p278 @p169 @p277 @p163 @p276 @p152 @p275 @p620 @p146 @p140 @p537) :args (or))
(step @p623 :rule cnf_and_neg :args (@t90))
(step @p624 :rule eq_resolve :premises (@p623 @p622))
(step @p625 :rule reordering :premises (@p624) :args ((or @t67 @t94 @t92 @t83 @t80 @t68 @t76 @t70 @t60 @t72 @t62 @t64 @t56 @t57 @t90)))
(step @p626 :rule chain_resolution :premises (@p625 @p619 @p606 @p593 @p580 @p567) :args (@t139 (@list @t64 @t60 @t70 @t68 @t67)))
(step @p627 :rule factoring :premises (@p626))
(step @p628 :rule chain_resolution :premises (@p627 @p553 @p294 @p549 @p545 @p180 @p174 @p168 @p162 @p157 @p151 @p145 @p457) :args ((@list false true false true false false false false false false false true) (@list @t88 @t106 @t107 @t91 @t99 @t100 @t101 @t102 @t103 @t104 @t105 @t57)))
(step @p629 :rule factoring :premises (@p628))
(step @p630 :rule chain_resolution :premises (@p629 @p445 @p433 @p421 @p409 @p397 @p385) :args ((@list true true true true true true) (@list @t83 @t56 @t62 @t72 @t76 @t80)))
(step @p631 :rule factoring :premises (@p630))
(step @p632 :rule reordering :premises (@p631) :args ((or @t94 @t113 @t93 @t90 @t141 @t140)))
(assume-push @p7803 @t83)
(assume-push @p7804 @t83)
; trust TRUST_THEORY_REWRITE
(step @p460 :rule trust :premises () :args (@t128))
(step @p635 :rule symm :premises (@p7803))
(step @p49 :rule refl :args (V1_main+0x19))
(step @p636 :rule cong :premises (@p49 @p635) :args (=))
(step @p637 :rule trans :premises (@p636 @p460))
(step @p638 :rule false_elim :premises (@p637))
(step-pop @p7804 :rule scope :premises (@p638))
(step @p639 :rule process_scope :premises (@p7804) :args (@t81))
(step @p641 :rule modus_ponens :premises (@p7803 @p639))
(step-pop @p7805 :rule scope :premises (@p641))
(step @p642 :rule process_scope :premises (@p7805) :args (@t81))
(step @p644 :rule implies_elim :premises (@p642))
(assume-push @p7807 @t83)
(assume-push @p7808 @t83)
; trust TRUST_THEORY_REWRITE
(step @p487 :rule trust :premises () :args (@t130))
(step @p647 :rule symm :premises (@p7807))
(step @p63 :rule refl :args (V1_get_greet+0x1d))
(step @p648 :rule cong :premises (@p63 @p647) :args (=))
(step @p649 :rule trans :premises (@p648 @p487))
(step @p650 :rule false_elim :premises (@p649))
(step-pop @p7808 :rule scope :premises (@p650))
(step @p651 :rule process_scope :premises (@p7808) :args (@t77))
(step @p653 :rule modus_ponens :premises (@p7807 @p651))
(step-pop @p7809 :rule scope :premises (@p653))
(step @p654 :rule process_scope :premises (@p7809) :args (@t77))
(step @p656 :rule implies_elim :premises (@p654))
(assume-push @p7811 @t83)
(assume-push @p7812 @t83)
; trust TRUST_THEORY_REWRITE
(step @p500 :rule trust :premises () :args (@t131))
(step @p659 :rule symm :premises (@p7811))
(step @p77 :rule refl :args (V1_None4198448))
(step @p660 :rule cong :premises (@p77 @p659) :args (=))
(step @p661 :rule trans :premises (@p660 @p500))
(step @p662 :rule false_elim :premises (@p661))
(step-pop @p7812 :rule scope :premises (@p662))
(step @p663 :rule process_scope :premises (@p7812) :args (@t73))
(step @p665 :rule modus_ponens :premises (@p7811 @p663))
(step-pop @p7813 :rule scope :premises (@p665))
(step @p666 :rule process_scope :premises (@p7813) :args (@t73))
(step @p668 :rule implies_elim :premises (@p666))
(assume-push @p7815 @t83)
(assume-push @p7816 @t83)
; trust TRUST_THEORY_REWRITE
(step @p526 :rule trust :premises () :args (@t133))
(step @p671 :rule symm :premises (@p7815))
(step @p91 :rule refl :args (V1_printf))
(step @p672 :rule cong :premises (@p91 @p671) :args (=))
(step @p673 :rule trans :premises (@p672 @p526))
(step @p674 :rule false_elim :premises (@p673))
(step-pop @p7816 :rule scope :premises (@p674))
(step @p675 :rule process_scope :premises (@p7816) :args (@t63))
(step @p677 :rule modus_ponens :premises (@p7815 @p675))
(step-pop @p7817 :rule scope :premises (@p677))
(step @p678 :rule process_scope :premises (@p7817) :args (@t63))
(step @p680 :rule implies_elim :premises (@p678))
(assume-push @p7819 @t83)
(assume-push @p7820 @t83)
; trust TRUST_THEORY_REWRITE
(step @p474 :rule trust :premises () :args (@t129))
(step @p683 :rule symm :premises (@p7819))
(step @p35 :rule refl :args (V1_get_greet+0xd))
(step @p684 :rule cong :premises (@p35 @p683) :args (=))
(step @p685 :rule trans :premises (@p684 @p474))
(step @p686 :rule false_elim :premises (@p685))
(step-pop @p7820 :rule scope :premises (@p686))
(step @p687 :rule process_scope :premises (@p7820) :args (@t84))
(step @p689 :rule modus_ponens :premises (@p7819 @p687))
(step-pop @p7821 :rule scope :premises (@p689))
(step @p690 :rule process_scope :premises (@p7821) :args (@t84))
(step @p692 :rule implies_elim :premises (@p690))
(assume-push @p7823 @t83)
(assume-push @p7824 @t83)
; trust TRUST_THEORY_REWRITE
(step @p513 :rule trust :premises () :args (@t132))
(step @p695 :rule symm :premises (@p7823))
(step @p105 :rule refl :args (V1_main+0x3f))
(step @p696 :rule cong :premises (@p105 @p695) :args (=))
(step @p697 :rule trans :premises (@p696 @p513))
(step @p698 :rule false_elim :premises (@p697))
(step-pop @p7824 :rule scope :premises (@p698))
(step @p699 :rule process_scope :premises (@p7824) :args (@t58))
(step @p701 :rule modus_ponens :premises (@p7823 @p699))
(step-pop @p7825 :rule scope :premises (@p701))
(step @p702 :rule process_scope :premises (@p7825) :args (@t58))
(step @p704 :rule implies_elim :premises (@p702))
(step @p705 :rule nary_cong :premises (@p141 @p275) :args (or))
(step @p706 :rule cnf_or_neg :args (@t105 1))
(step @p707 :rule eq_resolve :premises (@p706 @p705))
(step @p708 :rule reordering :premises (@p707) :args ((or @t67 @t105)))
(step @p709 :rule refl :args (@t87))
(step @p710 :rule refl :args (@t85))
(step @p711 :rule nary_cong :premises (@p710 @p280 @p279 @p175 @p278 @p169 @p277 @p163 @p276 @p352 @p152 @p146 @p709) :args (or))
(step @p712 :rule cnf_and_neg :args (@t85))
(step @p713 :rule eq_resolve :premises (@p712 @p711))
(step @p714 :rule reordering :premises (@p713) :args ((or @t89 @t87 @t80 @t68 @t76 @t70 @t60 @t72 @t62 @t64 @t56 @t57 @t85)))
(step @p715 :rule chain_resolution :premises (@p714 @p312 @p325 @p338 @p351) :args (@t126 @t142))
(step @p716 :rule factoring :premises (@p715))
(step @p717 :rule chain_resolution :premises (@p716 @p708 @p294 @p180 @p174 @p168 @p162 @p157 @p151 @p704) :args ((@list false true false false false false false false true) (@list @t67 @t105 @t99 @t100 @t101 @t102 @t103 @t104 @t57)))
(step @p718 :rule factoring :premises (@p717))
(step @p719 :rule chain_resolution :premises (@p718 @p692 @p680 @p668 @p656 @p644) :args (@t139 (@list @t80 @t56 @t62 @t72 @t76)))
(step @p720 :rule factoring :premises (@p719))
(step @p721 :rule reordering :premises (@p720) :args ((or @t87 @t113 @t85 @t141 @t140 @t144 @t143)))
(assume-push @p7827 @t80)
(assume-push @p7828 @t80)
; trust TRUST_THEORY_REWRITE
(step @p570 :rule trust :premises () :args (@t135))
(step @p724 :rule symm :premises (@p7827))
(step @p63 :rule refl :args (V1_get_greet+0x1d))
(step @p725 :rule cong :premises (@p63 @p724) :args (=))
(step @p726 :rule trans :premises (@p725 @p570))
(step @p727 :rule false_elim :premises (@p726))
(step-pop @p7828 :rule scope :premises (@p727))
(step @p728 :rule process_scope :premises (@p7828) :args (@t77))
(step @p730 :rule modus_ponens :premises (@p7827 @p728))
(step-pop @p7829 :rule scope :premises (@p730))
(step @p731 :rule process_scope :premises (@p7829) :args (@t77))
(step @p733 :rule implies_elim :premises (@p731))
(assume-push @p7831 @t80)
(assume-push @p7832 @t80)
; trust TRUST_THEORY_REWRITE
(step @p583 :rule trust :premises () :args (@t136))
(step @p736 :rule symm :premises (@p7831))
(step @p77 :rule refl :args (V1_None4198448))
(step @p737 :rule cong :premises (@p77 @p736) :args (=))
(step @p738 :rule trans :premises (@p737 @p583))
(step @p739 :rule false_elim :premises (@p738))
(step-pop @p7832 :rule scope :premises (@p739))
(step @p740 :rule process_scope :premises (@p7832) :args (@t73))
(step @p742 :rule modus_ponens :premises (@p7831 @p740))
(step-pop @p7833 :rule scope :premises (@p742))
(step @p743 :rule process_scope :premises (@p7833) :args (@t73))
(step @p745 :rule implies_elim :premises (@p743))
(assume-push @p7835 @t80)
(assume-push @p7836 @t80)
; trust TRUST_THEORY_REWRITE
(step @p609 :rule trust :premises () :args (@t138))
(step @p748 :rule symm :premises (@p7835))
(step @p91 :rule refl :args (V1_printf))
(step @p749 :rule cong :premises (@p91 @p748) :args (=))
(step @p750 :rule trans :premises (@p749 @p609))
(step @p751 :rule false_elim :premises (@p750))
(step-pop @p7836 :rule scope :premises (@p751))
(step @p752 :rule process_scope :premises (@p7836) :args (@t63))
(step @p754 :rule modus_ponens :premises (@p7835 @p752))
(step-pop @p7837 :rule scope :premises (@p754))
(step @p755 :rule process_scope :premises (@p7837) :args (@t63))
(step @p757 :rule implies_elim :premises (@p755))
(assume-push @p7839 @t80)
(assume-push @p7840 @t80)
; trust TRUST_THEORY_REWRITE
(step @p556 :rule trust :premises () :args (@t134))
(step @p760 :rule symm :premises (@p7839))
(step @p49 :rule refl :args (V1_main+0x19))
(step @p761 :rule cong :premises (@p49 @p760) :args (=))
(step @p762 :rule trans :premises (@p761 @p556))
(step @p763 :rule false_elim :premises (@p762))
(step-pop @p7840 :rule scope :premises (@p763))
(step @p764 :rule process_scope :premises (@p7840) :args (@t81))
(step @p766 :rule modus_ponens :premises (@p7839 @p764))
(step-pop @p7841 :rule scope :premises (@p766))
(step @p767 :rule process_scope :premises (@p7841) :args (@t81))
(step @p769 :rule implies_elim :premises (@p767))
(assume-push @p7843 @t80)
(assume-push @p7844 @t80)
; trust TRUST_THEORY_REWRITE
(step @p596 :rule trust :premises () :args (@t137))
(step @p772 :rule symm :premises (@p7843))
(step @p105 :rule refl :args (V1_main+0x3f))
(step @p773 :rule cong :premises (@p105 @p772) :args (=))
(step @p774 :rule trans :premises (@p773 @p596))
(step @p775 :rule false_elim :premises (@p774))
(step-pop @p7844 :rule scope :premises (@p775))
(step @p776 :rule process_scope :premises (@p7844) :args (@t58))
(step @p778 :rule modus_ponens :premises (@p7843 @p776))
(step-pop @p7845 :rule scope :premises (@p778))
(step @p779 :rule process_scope :premises (@p7845) :args (@t58))
(step @p781 :rule implies_elim :premises (@p779))
(step @p782 :rule nary_cong :premises (@p147 @p276) :args (or))
(step @p783 :rule cnf_or_neg :args (@t104 1))
(step @p784 :rule eq_resolve :premises (@p783 @p782))
(step @p785 :rule reordering :premises (@p784) :args ((or @t68 @t104)))
(assume-push @p7847 @t68)
(assume-push @p7848 @t68)
; trust TRUST_THEORY_REWRITE
(step @p788 :rule trust :premises () :args (@t145))
(step @p789 :rule symm :premises (@p7847))
(step @p77 :rule refl :args (V1_None4198448))
(step @p790 :rule cong :premises (@p77 @p789) :args (=))
(step @p791 :rule trans :premises (@p790 @p788))
(step @p792 :rule false_elim :premises (@p791))
(step-pop @p7848 :rule scope :premises (@p792))
(step @p793 :rule process_scope :premises (@p7848) :args (@t71))
(step @p795 :rule modus_ponens :premises (@p7847 @p793))
(step-pop @p7849 :rule scope :premises (@p795))
(step @p796 :rule process_scope :premises (@p7849) :args (@t71))
(step @p798 :rule implies_elim :premises (@p796))
(assume-push @p7851 @t68)
(assume-push @p7852 @t68)
; trust TRUST_THEORY_REWRITE
(step @p801 :rule trust :premises () :args (@t146))
(step @p802 :rule symm :premises (@p7851))
(step @p105 :rule refl :args (V1_main+0x3f))
(step @p803 :rule cong :premises (@p105 @p802) :args (=))
(step @p804 :rule trans :premises (@p803 @p801))
(step @p805 :rule false_elim :premises (@p804))
(step-pop @p7852 :rule scope :premises (@p805))
(step @p806 :rule process_scope :premises (@p7852) :args (@t65))
(step @p808 :rule modus_ponens :premises (@p7851 @p806))
(step-pop @p7853 :rule scope :premises (@p808))
(step @p809 :rule process_scope :premises (@p7853) :args (@t65))
(step @p811 :rule implies_elim :premises (@p809))
(assume-push @p7855 @t68)
(assume-push @p7856 @t68)
; trust TRUST_THEORY_REWRITE
(step @p814 :rule trust :premises () :args (@t147))
(step @p815 :rule symm :premises (@p7855))
(step @p91 :rule refl :args (V1_printf))
(step @p816 :rule cong :premises (@p91 @p815) :args (=))
(step @p817 :rule trans :premises (@p816 @p814))
(step @p818 :rule false_elim :premises (@p817))
(step-pop @p7856 :rule scope :premises (@p818))
(step @p819 :rule process_scope :premises (@p7856) :args (@t74))
(step @p821 :rule modus_ponens :premises (@p7855 @p819))
(step-pop @p7857 :rule scope :premises (@p821))
(step @p822 :rule process_scope :premises (@p7857) :args (@t74))
(step @p824 :rule implies_elim :premises (@p822))
(step @p825 :rule refl :args (@t84))
(step @p826 :rule refl :args (@t69))
(step @p827 :rule refl :args (@t82))
(step @p828 :rule nary_cong :premises (@p827 @p280 @p279 @p175 @p278 @p169 @p277 @p826 @p163 @p152 @p825) :args (or))
(step @p829 :rule cnf_and_neg :args (@t82))
(step @p830 :rule eq_resolve :premises (@p829 @p828))
(step @p831 :rule reordering :premises (@p830) :args ((or @t84 @t69 @t76 @t70 @t60 @t72 @t62 @t64 @t56 @t57 @t82)))
(step @p832 :rule chain_resolution :premises (@p831 @p824 @p811 @p798) :args ((@list true true true) (@list @t64 @t60 @t70)))
(step @p833 :rule factoring :premises (@p832))
(step @p834 :rule chain_resolution :premises (@p833 @p785 @p294 @p180 @p174 @p168 @p162 @p157 @p781) :args ((@list false true false false false false false true) (@list @t68 @t104 @t99 @t100 @t101 @t102 @t103 @t57)))
(step @p835 :rule factoring :premises (@p834))
(step @p836 :rule chain_resolution :premises (@p835 @p769 @p757 @p745 @p733) :args (@t126 (@list @t76 @t56 @t62 @t72)))
(step @p837 :rule factoring :premises (@p836))
(step @p838 :rule reordering :premises (@p837) :args ((or @t84 @t113 @t82 @t141 @t140 @t144 @t143 @t148)))
(assume-push @p7859 @t76)
(assume-push @p7860 @t76)
; trust TRUST_THEORY_REWRITE
(step @p328 :rule trust :premises () :args (@t124))
(step @p841 :rule symm :premises (@p7859))
(step @p105 :rule refl :args (V1_main+0x3f))
(step @p842 :rule cong :premises (@p105 @p841) :args (=))
(step @p843 :rule trans :premises (@p842 @p328))
(step @p844 :rule false_elim :premises (@p843))
(step-pop @p7860 :rule scope :premises (@p844))
(step @p845 :rule process_scope :premises (@p7860) :args (@t58))
(step @p847 :rule modus_ponens :premises (@p7859 @p845))
(step-pop @p7861 :rule scope :premises (@p847))
(step @p848 :rule process_scope :premises (@p7861) :args (@t58))
(step @p850 :rule implies_elim :premises (@p848))
(assume-push @p7863 @t76)
(assume-push @p7864 @t76)
; trust TRUST_THEORY_REWRITE
(step @p315 :rule trust :premises () :args (@t123))
(step @p853 :rule symm :premises (@p7863))
(step @p77 :rule refl :args (V1_None4198448))
(step @p854 :rule cong :premises (@p77 @p853) :args (=))
(step @p855 :rule trans :premises (@p854 @p315))
(step @p856 :rule false_elim :premises (@p855))
(step-pop @p7864 :rule scope :premises (@p856))
(step @p857 :rule process_scope :premises (@p7864) :args (@t73))
(step @p859 :rule modus_ponens :premises (@p7863 @p857))
(step-pop @p7865 :rule scope :premises (@p859))
(step @p860 :rule process_scope :premises (@p7865) :args (@t73))
(step @p862 :rule implies_elim :premises (@p860))
(assume-push @p7867 @t76)
(assume-push @p7868 @t76)
; trust TRUST_THEORY_REWRITE
(step @p341 :rule trust :premises () :args (@t125))
(step @p865 :rule symm :premises (@p7867))
(step @p91 :rule refl :args (V1_printf))
(step @p866 :rule cong :premises (@p91 @p865) :args (=))
(step @p867 :rule trans :premises (@p866 @p341))
(step @p868 :rule false_elim :premises (@p867))
(step-pop @p7868 :rule scope :premises (@p868))
(step @p869 :rule process_scope :premises (@p7868) :args (@t63))
(step @p871 :rule modus_ponens :premises (@p7867 @p869))
(step-pop @p7869 :rule scope :premises (@p871))
(step @p872 :rule process_scope :premises (@p7869) :args (@t63))
(step @p874 :rule implies_elim :premises (@p872))
(assume-push @p7871 @t76)
(assume-push @p7872 @t76)
; trust TRUST_THEORY_REWRITE
(step @p302 :rule trust :premises () :args (@t122))
(step @p877 :rule symm :premises (@p7871))
(step @p63 :rule refl :args (V1_get_greet+0x1d))
(step @p878 :rule cong :premises (@p63 @p877) :args (=))
(step @p879 :rule trans :premises (@p878 @p302))
(step @p880 :rule false_elim :premises (@p879))
(step-pop @p7872 :rule scope :premises (@p880))
(step @p881 :rule process_scope :premises (@p7872) :args (@t77))
(step @p883 :rule modus_ponens :premises (@p7871 @p881))
(step-pop @p7873 :rule scope :premises (@p883))
(step @p884 :rule process_scope :premises (@p7873) :args (@t77))
(step @p886 :rule implies_elim :premises (@p884))
(step @p887 :rule refl :args (@t81))
(step @p888 :rule refl :args (@t65))
(step @p889 :rule refl :args (@t78))
(step @p890 :rule nary_cong :premises (@p889 @p888 @p280 @p175 @p169 @p163 @p887) :args (or))
(step @p891 :rule cnf_and_neg :args (@t78))
(step @p892 :rule eq_resolve :premises (@p891 @p890))
(step @p893 :rule reordering :premises (@p892) :args ((or @t81 @t65 @t72 @t62 @t56 @t57 @t78)))
(step @p894 :rule nary_cong :premises (@p158 @p279) :args (or))
(step @p895 :rule cnf_or_neg :args (@t102 1))
(step @p896 :rule eq_resolve :premises (@p895 @p894))
(step @p897 :rule reordering :premises (@p896) :args ((or @t60 @t102)))
(step @p898 :rule nary_cong :premises (@p153 @p277) :args (or))
(step @p899 :rule cnf_or_neg :args (@t103 1))
(step @p900 :rule eq_resolve :premises (@p899 @p898))
(step @p901 :rule reordering :premises (@p900) :args ((or @t70 @t103)))
(step @p902 :rule refl :args (@t71))
(step @p903 :rule refl :args (@t79))
(step @p904 :rule nary_cong :premises (@p903 @p280 @p279 @p175 @p278 @p902 @p169 @p163 @p887) :args (or))
(step @p905 :rule cnf_and_neg :args (@t79))
(step @p906 :rule eq_resolve :premises (@p905 @p904))
(step @p907 :rule reordering :premises (@p906) :args ((or @t81 @t71 @t60 @t72 @t62 @t64 @t56 @t57 @t79)))
(assume-push @p7875 @t70)
(assume-push @p7876 @t70)
; trust TRUST_THEORY_REWRITE
(step @p910 :rule trust :premises () :args (@t149))
(step @p911 :rule symm :premises (@p7875))
(step @p91 :rule refl :args (V1_printf))
(step @p912 :rule cong :premises (@p91 @p911) :args (=))
(step @p913 :rule trans :premises (@p912 @p910))
(step @p914 :rule false_elim :premises (@p913))
(step-pop @p7876 :rule scope :premises (@p914))
(step @p915 :rule process_scope :premises (@p7876) :args (@t74))
(step @p917 :rule modus_ponens :premises (@p7875 @p915))
(step-pop @p7877 :rule scope :premises (@p917))
(step @p918 :rule process_scope :premises (@p7877) :args (@t74))
(step @p920 :rule implies_elim :premises (@p918))
(step @p921 :rule chain_resolution :premises (@p920 @p907) :args (@t150 (@list @t64)))
(step @p922 :rule factoring :premises (@p921))
(step @p923 :rule chain_resolution :premises (@p922 @p901 @p294 @p897 @p180 @p174) :args ((@list false true false false false) (@list @t70 @t103 @t102 @t99 @t100)))
(step @p924 :rule factoring :premises (@p923))
(step @p925 :rule chain_resolution :premises (@p924 @p893 @p168) :args ((@list true false) (@list @t60 @t101)))
(step @p926 :rule factoring :premises (@p925))
(step @p927 :rule chain_resolution :premises (@p926 @p886 @p874 @p862 @p850) :args (@t126 (@list @t72 @t56 @t62 @t57)))
(step @p928 :rule factoring :premises (@p927))
(step @p929 :rule reordering :premises (@p928) :args ((or @t81 @t113 @t79 @t78 @t141 @t140 @t144 @t143 @t148 @t151)))
(assume-push @p7879 @t72)
(assume-push @p7880 @t72)
; trust TRUST_THEORY_REWRITE
(step @p814 :rule trust :premises () :args (@t147))
(step @p932 :rule symm :premises (@p7879))
(step @p91 :rule refl :args (V1_printf))
(step @p933 :rule cong :premises (@p91 @p932) :args (=))
(step @p934 :rule trans :premises (@p933 @p814))
(step @p935 :rule false_elim :premises (@p934))
(step-pop @p7880 :rule scope :premises (@p935))
(step @p936 :rule process_scope :premises (@p7880) :args (@t63))
(step @p938 :rule modus_ponens :premises (@p7879 @p936))
(step-pop @p7881 :rule scope :premises (@p938))
(step @p939 :rule process_scope :premises (@p7881) :args (@t63))
(step @p941 :rule implies_elim :premises (@p939))
(assume-push @p7883 @t72)
(assume-push @p7884 @t72)
; trust TRUST_THEORY_REWRITE
(step @p788 :rule trust :premises () :args (@t145))
(step @p944 :rule symm :premises (@p7883))
(step @p77 :rule refl :args (V1_None4198448))
(step @p945 :rule cong :premises (@p77 @p944) :args (=))
(step @p946 :rule trans :premises (@p945 @p788))
(step @p947 :rule false_elim :premises (@p946))
(step-pop @p7884 :rule scope :premises (@p947))
(step @p948 :rule process_scope :premises (@p7884) :args (@t73))
(step @p950 :rule modus_ponens :premises (@p7883 @p948))
(step-pop @p7885 :rule scope :premises (@p950))
(step @p951 :rule process_scope :premises (@p7885) :args (@t73))
(step @p953 :rule implies_elim :premises (@p951))
(assume-push @p7887 @t72)
(assume-push @p7888 @t72)
; trust TRUST_THEORY_REWRITE
(step @p801 :rule trust :premises () :args (@t146))
(step @p956 :rule symm :premises (@p7887))
(step @p105 :rule refl :args (V1_main+0x3f))
(step @p957 :rule cong :premises (@p105 @p956) :args (=))
(step @p958 :rule trans :premises (@p957 @p801))
(step @p959 :rule false_elim :premises (@p958))
(step-pop @p7888 :rule scope :premises (@p959))
(step @p960 :rule process_scope :premises (@p7888) :args (@t58))
(step @p962 :rule modus_ponens :premises (@p7887 @p960))
(step-pop @p7889 :rule scope :premises (@p962))
(step @p963 :rule process_scope :premises (@p7889) :args (@t58))
(step @p965 :rule implies_elim :premises (@p963))
(step @p966 :rule nary_cong :premises (@p164 @p275) :args (or))
(step @p967 :rule cnf_or_neg :args (@t101 1))
(step @p968 :rule eq_resolve :premises (@p967 @p966))
(step @p969 :rule reordering :premises (@p968) :args ((or @t67 @t101)))
(step @p970 :rule refl :args (@t77))
(step @p971 :rule refl :args (@t75))
(step @p972 :rule nary_cong :premises (@p971 @p280 @p279 @p175 @p278 @p169 @p970 @p277 @p276 @p352) :args (or))
(step @p973 :rule cnf_and_neg :args (@t75))
(step @p974 :rule eq_resolve :premises (@p973 @p972))
(step @p975 :rule reordering :premises (@p974) :args ((or @t89 @t68 @t70 @t60 @t77 @t62 @t64 @t56 @t57 @t75)))
(step @p976 :rule chain_resolution :premises (@p975 @p312 @p325 @p338 @p351) :args (@t126 @t142))
(step @p977 :rule factoring :premises (@p976))
(step @p978 :rule chain_resolution :premises (@p977 @p969 @p294 @p180 @p174 @p965) :args ((@list false true false false true) (@list @t67 @t101 @t99 @t100 @t57)))
(step @p979 :rule factoring :premises (@p978))
(step @p980 :rule chain_resolution :premises (@p979 @p953 @p941) :args ((@list true true) (@list @t62 @t56)))
(step @p981 :rule factoring :premises (@p980))
(step @p982 :rule reordering :premises (@p981) :args ((or @t77 @t113 @t75 @t141 @t140 @t144 @t143 @t148 @t151 @t153 @t152)))
(assume-push @p7891 @t62)
(assume-push @p7892 @t62)
; trust TRUST_THEORY_REWRITE
(step @p910 :rule trust :premises () :args (@t149))
(step @p985 :rule symm :premises (@p7891))
(step @p91 :rule refl :args (V1_printf))
(step @p986 :rule cong :premises (@p91 @p985) :args (=))
(step @p987 :rule trans :premises (@p986 @p910))
(step @p988 :rule false_elim :premises (@p987))
(step-pop @p7892 :rule scope :premises (@p988))
(step @p989 :rule process_scope :premises (@p7892) :args (@t63))
(step @p991 :rule modus_ponens :premises (@p7891 @p989))
(step-pop @p7893 :rule scope :premises (@p991))
(step @p992 :rule process_scope :premises (@p7893) :args (@t63))
(step @p994 :rule implies_elim :premises (@p992))
(assume-push @p7895 @t62)
(assume-push @p7896 @t62)
; trust TRUST_THEORY_REWRITE
(step @p997 :rule trust :premises () :args ((= (= V1_main+0x3f V1_None4198448) false)))
(step @p998 :rule symm :premises (@p7895))
(step @p105 :rule refl :args (V1_main+0x3f))
(step @p999 :rule cong :premises (@p105 @p998) :args (=))
(step @p1000 :rule trans :premises (@p999 @p997))
(step @p1001 :rule false_elim :premises (@p1000))
(step-pop @p7896 :rule scope :premises (@p1001))
(step @p1002 :rule process_scope :premises (@p7896) :args (@t58))
(step @p1004 :rule modus_ponens :premises (@p7895 @p1002))
(step-pop @p7897 :rule scope :premises (@p1004))
(step @p1005 :rule process_scope :premises (@p7897) :args (@t58))
(step @p1007 :rule implies_elim :premises (@p1005))
(step @p1008 :rule nary_cong :premises (@p170 @p278) :args (or))
(step @p1009 :rule cnf_or_neg :args (@t100 1))
(step @p1010 :rule eq_resolve :premises (@p1009 @p1008))
(step @p1011 :rule reordering :premises (@p1010) :args ((or @t64 @t100)))
(step @p1012 :rule refl :args (@t73))
(step @p1013 :rule refl :args (@t74))
(step @p1014 :rule refl :args (@t66))
(step @p1015 :rule nary_cong :premises (@p1014 @p280 @p279 @p1013 @p175 @p1012) :args (or))
(step @p1016 :rule cnf_and_neg :args (@t66))
(step @p1017 :rule eq_resolve :premises (@p1016 @p1015))
(step @p1018 :rule reordering :premises (@p1017) :args ((or @t60 @t73 @t74 @t56 @t57 @t66)))
(assume-push @p7899 @t64)
(assume-push @p7900 @t64)
; trust TRUST_THEORY_REWRITE
(step @p1021 :rule trust :premises () :args (@t154))
(step @p1022 :rule symm :premises (@p7899))
(step @p105 :rule refl :args (V1_main+0x3f))
(step @p1023 :rule cong :premises (@p105 @p1022) :args (=))
(step @p1024 :rule trans :premises (@p1023 @p1021))
(step @p1025 :rule false_elim :premises (@p1024))
(step-pop @p7900 :rule scope :premises (@p1025))
(step @p1026 :rule process_scope :premises (@p7900) :args (@t65))
(step @p1028 :rule modus_ponens :premises (@p7899 @p1026))
(step-pop @p7901 :rule scope :premises (@p1028))
(step @p1029 :rule process_scope :premises (@p7901) :args (@t65))
(step @p1031 :rule implies_elim :premises (@p1029))
(step @p1032 :rule reordering :premises (@p1031) :args ((or @t65 @t74)))
(step @p1033 :rule chain_resolution :premises (@p1032 @p1018) :args (@t150 (@list @t60)))
(step @p1034 :rule factoring :premises (@p1033))
(step @p1035 :rule chain_resolution :premises (@p1034 @p1011 @p294 @p180 @p1007) :args ((@list false true false true) (@list @t64 @t100 @t99 @t57)))
(step @p1036 :rule factoring :premises (@p1035))
(step @p1037 :rule chain_resolution :premises (@p1036 @p994) :args (@t155 @t156))
(step @p1038 :rule factoring :premises (@p1037))
(step @p1039 :rule reordering :premises (@p1038) :args ((or @t73 @t113 @t66 @t141 @t140 @t144 @t143 @t148 @t151 @t153 @t152 (not @t101))))
(step @p1040 :rule nary_cong :premises (@p176 @p279) :args (or))
(step @p1041 :rule cnf_or_neg :args (@t99 1))
(step @p1042 :rule eq_resolve :premises (@p1041 @p1040))
(step @p1043 :rule reordering :premises (@p1042) :args ((or @t60 @t99)))
(step @p1044 :rule refl :args (@t63))
(step @p1045 :rule refl :args (@t61))
(step @p1046 :rule nary_cong :premises (@p1045 @p888 @p280 @p1044) :args (or))
(step @p1047 :rule cnf_and_neg :args (@t61))
(step @p1048 :rule eq_resolve :premises (@p1047 @p1046))
(step @p1049 :rule reordering :premises (@p1048) :args ((or @t65 @t63 @t57 @t61)))
(assume-push @p7903 @t56)
(assume-push @p7904 @t56)
; trust TRUST_THEORY_REWRITE
(step @p1021 :rule trust :premises () :args (@t154))
(step @p1052 :rule symm :premises (@p7903))
(step @p105 :rule refl :args (V1_main+0x3f))
(step @p1053 :rule cong :premises (@p105 @p1052) :args (=))
(step @p1054 :rule trans :premises (@p1053 @p1021))
(step @p1055 :rule false_elim :premises (@p1054))
(step-pop @p7904 :rule scope :premises (@p1055))
(step @p1056 :rule process_scope :premises (@p7904) :args (@t58))
(step @p1058 :rule modus_ponens :premises (@p7903 @p1056))
(step-pop @p7905 :rule scope :premises (@p1058))
(step @p1059 :rule process_scope :premises (@p7905) :args (@t58))
(step @p1061 :rule implies_elim :premises (@p1059))
(step @p1062 :rule chain_resolution :premises (@p1061 @p1049 @p1043) :args (@t157 (@list @t57 @t60)))
(step @p1063 :rule factoring :premises (@p1062))
(step @p1064 :rule chain_resolution :premises (@p1063 @p180) :args (@t150 @t156))
(step @p1065 :rule factoring :premises (@p1064))
(step @p1066 :rule chain_resolution :premises (@p1065 @p294 @p174 @p1039) :args ((@list true false true) (@list @t99 @t100 @t62)))
(step @p1067 :rule factoring :premises (@p1066))
(step @p1068 :rule chain_resolution :premises (@p1067 @p168 @p982) :args (@t158 (@list @t101 @t72)))
(step @p1069 :rule factoring :premises (@p1068))
(step @p1070 :rule chain_resolution :premises (@p1069 @p162 @p157) :args (@t157 (@list @t102 @t103)))
(step @p1071 :rule factoring :premises (@p1070))
(step @p1072 :rule chain_resolution :premises (@p1071 @p929) :args (@t155 (@list @t76)))
(step @p1073 :rule factoring :premises (@p1072))
(step @p1074 :rule chain_resolution :premises (@p1073 @p151 @p838) :args (@t158 (@list @t104 @t80)))
(step @p1075 :rule factoring :premises (@p1074))
(step @p1076 :rule chain_resolution :premises (@p1075 @p145 @p721) :args (@t158 (@list @t105 @t83)))
(step @p1077 :rule factoring :premises (@p1076))
(step @p1078 :rule chain_resolution :premises (@p1077 @p139 @p134) :args (@t157 (@list @t106 @t107)))
(step @p1079 :rule factoring :premises (@p1078))
(step @p1080 :rule chain_resolution :premises (@p1079 @p632) :args (@t155 (@list @t86)))
(step @p1081 :rule factoring :premises (@p1080))
(step @p1082 :rule chain_resolution :premises (@p1081 @p373 @p369) :args (@t157 (@list @t110 @t112)))
(step @p1083 :rule factoring :premises (@p1082))
(step @p1084 :rule chain_resolution :premises (@p1083 @p364 @p16 @p15 @p14 @p13 @p12 @p11 @p10 @p9 @p8 @p7 @p6) :args ((@list true true true true true true true true true true true true) (@list @t108 @t61 @t66 @t75 @t78 @t79 @t82 @t85 @t90 @t93 @t95 @t98)))
(step @p1085 :rule factoring :premises (@p1084))
(step @p1086 :rule chain_resolution :premises (@p1085 @p5) :args (@t155 (@list @t113)))
(step @p1087 :rule factoring :premises (@p1086))
(step @p1088 :rule refl :args (@t159))
; trust TRUST_THEORY_REWRITE
(step @p1089 :rule trust :premises () :args ((= (not @t160) @t54)))
(step @p1090 :rule nary_cong :premises (@p1089 @p1088) :args (or))
(assume-push @p7907 @t160)
(step @p1092 :rule skolemize :premises (@p7907))
(step-pop @p7907 :rule scope :premises (@p1092))
(step @p1093 :rule process_scope :premises (@p7907) :args (@t159))
(step @p1095 :rule implies_elim :premises (@p1093))
(step @p1096 :rule eq_resolve :premises (@p1095 @p1090))
(step @p1097 :rule chain_resolution :premises (@p1096 @p1087) :args (@t150 (@list @t114)))
; trust TRUST_THEORY_REWRITE
(step @p1098 :rule trust :premises () :args ((= (forall @t4 (=> @t177 @t1)) @t178)))
(step @p1099 :rule refl :args (@t1))
(step @p1100 :rule refl :args (V2_main))
(step @p1101 :rule refl :args (V2_get_greet))
; trust TRUST_THEORY_REWRITE
(step @p1102 :rule trust :premises () :args ((= @t179 @t49)))
(step @p1103 :rule cong :premises (@p1102 @p1101 @p1100) :args (ite))
(step @p1104 :rule refl :args (V2_get_greet+0x16))
; trust TRUST_THEORY_REWRITE
(step @p1105 :rule trust :premises () :args ((= @t180 @t46)))
(step @p1106 :rule cong :premises (@p1105 @p1104 @p1103) :args (ite))
(step @p1107 :rule refl :args (V2_get_greet+0xd))
; trust TRUST_THEORY_REWRITE
(step @p1108 :rule trust :premises () :args ((= @t181 @t44)))
(step @p1109 :rule cong :premises (@p1108 @p1107 @p1106) :args (ite))
(step @p1110 :rule refl :args (V2_main+0x19))
; trust TRUST_THEORY_REWRITE
(step @p1111 :rule trust :premises () :args ((= @t182 @t28)))
(step @p1112 :rule cong :premises (@p1111 @p1110 @p1109) :args (ite))
(step @p1113 :rule refl :args (V2_get_greet+0x1d))
; trust TRUST_THEORY_REWRITE
(step @p1114 :rule trust :premises () :args ((= @t183 @t29)))
(step @p1115 :rule cong :premises (@p1114 @p1113 @p1112) :args (ite))
(step @p1116 :rule refl :args (V2_None4198448))
; trust TRUST_THEORY_REWRITE
(step @p1117 :rule trust :premises () :args ((= @t184 @t31)))
(step @p1118 :rule cong :premises (@p1117 @p1116 @p1115) :args (ite))
(step @p1119 :rule refl :args (V2_printf))
; trust TRUST_THEORY_REWRITE
(step @p1120 :rule trust :premises () :args ((= @t185 @t26)))
(step @p1121 :rule cong :premises (@p1120 @p1119 @p1118) :args (ite))
(step @p1122 :rule refl :args (V2_main+0x3f))
; trust TRUST_THEORY_REWRITE
(step @p1123 :rule trust :premises () :args ((= @t186 @t23)))
(step @p1124 :rule cong :premises (@p1123 @p1122 @p1121) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p1125 :rule trust :premises () :args ((= @t188 (ite @t186 V2_main+0x3f (ite @t185 V2_printf (ite @t184 V2_None4198448 (ite @t183 V2_get_greet+0x1d (ite @t182 V2_main+0x19 (ite @t181 V2_get_greet+0xd (ite @t180 V2_get_greet+0x16 (ite @t179 V2_get_greet V2_main)))))))))))
(step @p1126 :rule trans :premises (@p1125 @p1124))
; trust TRUST_THEORY_REWRITE
(step @p1127 :rule trust :premises () :args ((= (_ @t19 @v.0.vb) @t188)))
(step @p1128 :rule trans :premises (@p1127 @p1126))
; trust TRUST_THEORY_REWRITE
(step @p1129 :rule trust :premises () :args ((= @t189 @t42)))
(step @p1130 :rule cong :premises (@p1129 @p1101 @p1100) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p1131 :rule trust :premises () :args ((= @t190 @t40)))
(step @p1132 :rule cong :premises (@p1131 @p1104 @p1130) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p1133 :rule trust :premises () :args ((= @t191 @t38)))
(step @p1134 :rule cong :premises (@p1133 @p1107 @p1132) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p1135 :rule trust :premises () :args ((= @t192 @t36)))
(step @p1136 :rule cong :premises (@p1135 @p1110 @p1134) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p1137 :rule trust :premises () :args ((= @t193 @t33)))
(step @p1138 :rule cong :premises (@p1137 @p1113 @p1136) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p1139 :rule trust :premises () :args ((= @t194 @t24)))
(step @p1140 :rule cong :premises (@p1139 @p1116 @p1138) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p1141 :rule trust :premises () :args ((= @t195 @t20)))
(step @p1142 :rule cong :premises (@p1141 @p1119 @p1140) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p1143 :rule trust :premises () :args ((= @t196 @t21)))
(step @p1144 :rule cong :premises (@p1143 @p1122 @p1142) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p1145 :rule trust :premises () :args ((= @t197 (ite @t196 V2_main+0x3f (ite @t195 V2_printf (ite @t194 V2_None4198448 (ite @t193 V2_get_greet+0x1d (ite @t192 V2_main+0x19 (ite @t191 V2_get_greet+0xd (ite @t190 V2_get_greet+0x16 (ite @t189 V2_get_greet V2_main)))))))))))
(step @p1146 :rule trans :premises (@p1145 @p1144))
; trust TRUST_THEORY_REWRITE
(step @p1147 :rule trust :premises () :args ((= (_ @t19 @v.0.va) @t197)))
(step @p1148 :rule trans :premises (@p1147 @p1146))
(step @p1149 :rule cong :premises (@p1148 @p1128) :args (=))
(step @p1150 :rule cong :premises (@p1149 @p1099) :args (=>))
(step @p1151 :rule cong :premises (@p1150) :args ((forall ((va V1) (vb V1)))))
(step @p1152 :rule trans :premises (@p1151 @p1098))
; trust TRUST_THEORY_REWRITE
(step @p1153 :rule trust :premises () :args ((= (or @t20 false) @t20)))
; trust TRUST_THEORY_REWRITE
(step @p1154 :rule trust :premises () :args ((= (and @t34 @t37 @t39 @t41 @t43 false) false)))
; trust TRUST_THEORY_REWRITE
(step @p1155 :rule trust :premises () :args ((= (ite @t42 false false) false)))
; trust TRUST_THEORY_REWRITE
(step @p1156 :rule trust :premises () :args ((= @t198 false)))
; trust TRUST_THEORY_REWRITE
(step @p1157 :rule trust :premises () :args ((= @t199 false)))
(step @p1158 :rule refl :args (@t42))
(step @p1159 :rule cong :premises (@p1158 @p1157 @p1156) :args (ite))
(step @p1160 :rule trans :premises (@p1159 @p1155))
(step @p1161 :rule refl :args (@t43))
(step @p1162 :rule refl :args (@t41))
(step @p1163 :rule refl :args (@t39))
(step @p1164 :rule refl :args (@t37))
(step @p1165 :rule refl :args (@t34))
(step @p1166 :rule nary_cong :premises (@p1165 @p1164 @p1163 @p1162 @p1161 @p1160) :args (and))
(step @p1167 :rule trans :premises (@p1166 @p1154))
(step @p1168 :rule refl :args (@t20))
(step @p1169 :rule nary_cong :premises (@p1168 @p1167) :args (or))
(step @p1170 :rule trans :premises (@p1169 @p1153))
(step @p1171 :rule refl :args (@t22))
; trust TRUST_THEORY_REWRITE
(step @p1172 :rule trust :premises () :args ((= (or @t23 false) @t23)))
; trust TRUST_THEORY_REWRITE
(step @p1173 :rule trust :premises () :args ((= (and @t35 @t32 @t30 @t45 @t47 @t50 false) false)))
; trust TRUST_THEORY_REWRITE
(step @p1174 :rule trust :premises () :args ((= (ite @t49 false false) false)))
; trust TRUST_THEORY_REWRITE
(step @p1175 :rule trust :premises () :args ((= @t200 false)))
; trust TRUST_THEORY_REWRITE
(step @p1176 :rule trust :premises () :args ((= @t201 false)))
(step @p1177 :rule refl :args (@t49))
(step @p1178 :rule cong :premises (@p1177 @p1176 @p1175) :args (ite))
(step @p1179 :rule trans :premises (@p1178 @p1174))
(step @p1180 :rule refl :args (@t50))
(step @p1181 :rule refl :args (@t47))
(step @p1182 :rule refl :args (@t45))
(step @p1183 :rule refl :args (@t30))
(step @p1184 :rule refl :args (@t32))
(step @p1185 :rule refl :args (@t35))
(step @p1186 :rule nary_cong :premises (@p1185 @p1184 @p1183 @p1182 @p1181 @p1180 @p1179) :args (and))
(step @p1187 :rule trans :premises (@p1186 @p1173))
(step @p1188 :rule refl :args (@t23))
(step @p1189 :rule nary_cong :premises (@p1188 @p1187) :args (or))
(step @p1190 :rule trans :premises (@p1189 @p1172))
(step @p1191 :rule nary_cong :premises (@p1190 @p1171 @p1170) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1192 :rule trust :premises () :args ((= (or @t24 false) @t24)))
; trust TRUST_THEORY_REWRITE
(step @p1193 :rule trust :premises () :args ((= (and @t37 @t39 @t41 @t43 false) false)))
; trust TRUST_THEORY_REWRITE
(step @p1194 :rule trust :premises () :args ((= @t202 false)))
; trust TRUST_THEORY_REWRITE
(step @p1195 :rule trust :premises () :args ((= @t203 false)))
(step @p1196 :rule cong :premises (@p1158 @p1195 @p1194) :args (ite))
(step @p1197 :rule trans :premises (@p1196 @p1155))
(step @p1198 :rule nary_cong :premises (@p1164 @p1163 @p1162 @p1161 @p1197) :args (and))
(step @p1199 :rule trans :premises (@p1198 @p1193))
(step @p1200 :rule refl :args (@t24))
(step @p1201 :rule nary_cong :premises (@p1200 @p1199) :args (or))
(step @p1202 :rule trans :premises (@p1201 @p1192))
(step @p1203 :rule refl :args (@t25))
; trust TRUST_THEORY_REWRITE
(step @p1204 :rule trust :premises () :args ((= (or @t26 false) @t26)))
; trust TRUST_THEORY_REWRITE
(step @p1205 :rule trust :premises () :args ((= (and @t32 @t30 @t45 @t47 @t50 false) false)))
(step @p1206 :rule cong :premises (@p1177 @p1157 @p1156) :args (ite))
(step @p1207 :rule trans :premises (@p1206 @p1174))
(step @p1208 :rule nary_cong :premises (@p1184 @p1183 @p1182 @p1181 @p1180 @p1207) :args (and))
(step @p1209 :rule trans :premises (@p1208 @p1205))
(step @p1210 :rule refl :args (@t26))
(step @p1211 :rule nary_cong :premises (@p1210 @p1209) :args (or))
(step @p1212 :rule trans :premises (@p1211 @p1204))
(step @p1213 :rule refl :args (@t27))
(step @p1214 :rule nary_cong :premises (@p1171 @p1213 @p1212 @p1203 @p1202) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1215 :rule trust :premises () :args ((= (or @t28 false) @t28)))
; trust TRUST_THEORY_REWRITE
(step @p1216 :rule trust :premises () :args ((= (and @t47 @t50 false) false)))
; trust TRUST_THEORY_REWRITE
(step @p1217 :rule trust :premises () :args ((= @t204 false)))
; trust TRUST_THEORY_REWRITE
(step @p1218 :rule trust :premises () :args ((= @t205 false)))
(step @p1219 :rule cong :premises (@p1177 @p1218 @p1217) :args (ite))
(step @p1220 :rule trans :premises (@p1219 @p1174))
(step @p1221 :rule nary_cong :premises (@p1181 @p1180 @p1220) :args (and))
(step @p1222 :rule trans :premises (@p1221 @p1216))
(step @p1223 :rule refl :args (@t28))
(step @p1224 :rule nary_cong :premises (@p1223 @p1222) :args (or))
(step @p1225 :rule trans :premises (@p1224 @p1215))
; trust TRUST_THEORY_REWRITE
(step @p1226 :rule trust :premises () :args ((= (or @t33 false) @t33)))
; trust TRUST_THEORY_REWRITE
(step @p1227 :rule trust :premises () :args ((= (and @t39 @t41 @t43 false) false)))
; trust TRUST_THEORY_REWRITE
(step @p1228 :rule trust :premises () :args ((= @t206 false)))
; trust TRUST_THEORY_REWRITE
(step @p1229 :rule trust :premises () :args ((= @t207 false)))
(step @p1230 :rule cong :premises (@p1158 @p1229 @p1228) :args (ite))
(step @p1231 :rule trans :premises (@p1230 @p1155))
(step @p1232 :rule nary_cong :premises (@p1163 @p1162 @p1161 @p1231) :args (and))
(step @p1233 :rule trans :premises (@p1232 @p1227))
(step @p1234 :rule refl :args (@t33))
(step @p1235 :rule nary_cong :premises (@p1234 @p1233) :args (or))
(step @p1236 :rule trans :premises (@p1235 @p1226))
(step @p1237 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1236 @p1184 @p1183 @p1225) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1238 :rule trust :premises () :args ((= (or @t36 false) @t36)))
; trust TRUST_THEORY_REWRITE
(step @p1239 :rule trust :premises () :args ((= (and @t41 @t43 false) false)))
(step @p1240 :rule cong :premises (@p1158 @p1218 @p1217) :args (ite))
(step @p1241 :rule trans :premises (@p1240 @p1155))
(step @p1242 :rule nary_cong :premises (@p1162 @p1161 @p1241) :args (and))
(step @p1243 :rule trans :premises (@p1242 @p1239))
(step @p1244 :rule refl :args (@t36))
(step @p1245 :rule nary_cong :premises (@p1244 @p1243) :args (or))
(step @p1246 :rule trans :premises (@p1245 @p1238))
(step @p1247 :rule nary_cong :premises (@p1190 @p1171 @p1203 @p1165 @p1164 @p1246) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1248 :rule trust :premises () :args ((= (or @t31 false) @t31)))
; trust TRUST_THEORY_REWRITE
(step @p1249 :rule trust :premises () :args ((= (and @t30 @t45 @t47 @t50 false) false)))
(step @p1250 :rule cong :premises (@p1177 @p1195 @p1194) :args (ite))
(step @p1251 :rule trans :premises (@p1250 @p1174))
(step @p1252 :rule nary_cong :premises (@p1183 @p1182 @p1181 @p1180 @p1251) :args (and))
(step @p1253 :rule trans :premises (@p1252 @p1249))
(step @p1254 :rule refl :args (@t31))
(step @p1255 :rule nary_cong :premises (@p1254 @p1253) :args (or))
(step @p1256 :rule trans :premises (@p1255 @p1248))
(step @p1257 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1256 @p1165 @p1164 @p1246) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1258 :rule trust :premises () :args ((= (or @t38 false) @t38)))
; trust TRUST_THEORY_REWRITE
(step @p1259 :rule trust :premises () :args ((= (and @t43 false) false)))
; trust TRUST_THEORY_REWRITE
(step @p1260 :rule trust :premises () :args ((= @t208 false)))
; trust TRUST_THEORY_REWRITE
(step @p1261 :rule trust :premises () :args ((= @t209 false)))
(step @p1262 :rule cong :premises (@p1158 @p1261 @p1260) :args (ite))
(step @p1263 :rule trans :premises (@p1262 @p1155))
(step @p1264 :rule nary_cong :premises (@p1161 @p1263) :args (and))
(step @p1265 :rule trans :premises (@p1264 @p1259))
(step @p1266 :rule refl :args (@t38))
(step @p1267 :rule nary_cong :premises (@p1266 @p1265) :args (or))
(step @p1268 :rule trans :premises (@p1267 @p1258))
; trust TRUST_THEORY_REWRITE
(step @p1269 :rule trust :premises () :args ((= (or @t29 false) @t29)))
; trust TRUST_THEORY_REWRITE
(step @p1270 :rule trust :premises () :args ((= (and @t45 @t47 @t50 false) false)))
(step @p1271 :rule cong :premises (@p1177 @p1229 @p1228) :args (ite))
(step @p1272 :rule trans :premises (@p1271 @p1174))
(step @p1273 :rule nary_cong :premises (@p1182 @p1181 @p1180 @p1272) :args (and))
(step @p1274 :rule trans :premises (@p1273 @p1270))
(step @p1275 :rule refl :args (@t29))
(step @p1276 :rule nary_cong :premises (@p1275 @p1274) :args (or))
(step @p1277 :rule trans :premises (@p1276 @p1269))
(step @p1278 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1277 @p1164 @p1163 @p1268) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1279 :rule trust :premises () :args ((= (or @t40 false) @t40)))
; trust TRUST_THEORY_REWRITE
(step @p1280 :rule trust :premises () :args ((= @t210 false)))
; trust TRUST_THEORY_REWRITE
(step @p1281 :rule trust :premises () :args ((= @t211 false)))
(step @p1282 :rule cong :premises (@p1158 @p1281 @p1280) :args (ite))
(step @p1283 :rule trans :premises (@p1282 @p1155))
(step @p1284 :rule refl :args (@t40))
(step @p1285 :rule nary_cong :premises (@p1284 @p1283) :args (or))
(step @p1286 :rule trans :premises (@p1285 @p1279))
(step @p1287 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1183 @p1225 @p1163 @p1162 @p1286) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1288 :rule trust :premises () :args ((= (ite @t42 true false) @t42)))
; trust TRUST_THEORY_REWRITE
(step @p1289 :rule trust :premises () :args ((= @t212 false)))
; trust TRUST_THEORY_REWRITE
(step @p1290 :rule trust :premises () :args ((= @t213 true)))
(step @p1291 :rule cong :premises (@p1158 @p1290 @p1289) :args (ite))
(step @p1292 :rule trans :premises (@p1291 @p1288))
; trust TRUST_THEORY_REWRITE
(step @p1293 :rule trust :premises () :args ((= (or @t44 false) @t44)))
; trust TRUST_THEORY_REWRITE
(step @p1294 :rule trust :premises () :args ((= (and @t50 false) false)))
(step @p1295 :rule cong :premises (@p1177 @p1261 @p1260) :args (ite))
(step @p1296 :rule trans :premises (@p1295 @p1174))
(step @p1297 :rule nary_cong :premises (@p1180 @p1296) :args (and))
(step @p1298 :rule trans :premises (@p1297 @p1294))
(step @p1299 :rule refl :args (@t44))
(step @p1300 :rule nary_cong :premises (@p1299 @p1298) :args (or))
(step @p1301 :rule trans :premises (@p1300 @p1293))
(step @p1302 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1183 @p1163 @p1182 @p1301 @p1162 @p1161 @p1292) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1303 :rule trust :premises () :args ((= (or @t46 false) @t46)))
(step @p1304 :rule cong :premises (@p1177 @p1281 @p1280) :args (ite))
(step @p1305 :rule trans :premises (@p1304 @p1174))
(step @p1306 :rule refl :args (@t46))
(step @p1307 :rule nary_cong :premises (@p1306 @p1305) :args (or))
(step @p1308 :rule trans :premises (@p1307 @p1303))
(step @p1309 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1183 @p1163 @p1182 @p1162 @p1181 @p1308 @p1161 @p1292) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1310 :rule trust :premises () :args ((= (ite @t42 false true) @t48)))
; trust TRUST_THEORY_REWRITE
(step @p1311 :rule trust :premises () :args ((= @t214 true)))
; trust TRUST_THEORY_REWRITE
(step @p1312 :rule trust :premises () :args ((= @t215 false)))
(step @p1313 :rule cong :premises (@p1158 @p1312 @p1311) :args (ite))
(step @p1314 :rule trans :premises (@p1313 @p1310))
(step @p1315 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1183 @p1225 @p1163 @p1162 @p1161 @p1314) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1316 :rule trust :premises () :args ((= (ite @t49 true false) @t49)))
(step @p1317 :rule cong :premises (@p1177 @p1290 @p1289) :args (ite))
(step @p1318 :rule trans :premises (@p1317 @p1316))
(step @p1319 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1183 @p1163 @p1182 @p1162 @p1181 @p1161 @p1314 @p1180 @p1318) :args (and))
(step @p1320 :rule refl :args (@t53))
(step @p1321 :rule nary_cong :premises (@p1320 @p1319 @p1315 @p1309 @p1302 @p1287 @p1278 @p1257 @p1247 @p1237 @p1214 @p1191) :args (or))
(step @p1322 :rule cong :premises (@p1321) :args ((forall ((va V1) (vb V1)))))
; trust TRUST_THEORY_REWRITE
(step @p1323 :rule trust :premises () :args ((= (forall @t4 (or @t53 @t257 @t255 @t253 @t250 (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t232 @t39 @t41 @t245) (and @t22 @t27 @t25 @t35 @t34 @t32 (or @t29 @t243) @t37 @t39 (or @t38 @t241)) (and @t22 @t27 @t25 @t35 (or @t31 @t239) @t34 @t37 @t237) (and @t225 @t22 @t25 @t34 @t37 @t237) (and @t22 @t27 @t25 @t35 @t34 (or @t33 @t234) @t32 @t30 @t232) (and @t22 @t27 (or @t26 @t229) @t25 (or @t24 @t227)) (and @t225 @t22 (or @t20 @t222)))) (forall @t4 (or @t53 (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t45 @t41 @t47 @t43 @t220 @t50 (ite @t49 @t213 @t212)) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t217 @t39 @t41 @t43 @t220) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t45 @t41 @t47 (or @t46 (ite @t49 @t211 @t210)) @t43 @t219) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t45 (or @t44 (and @t50 (ite @t49 @t209 @t208))) @t41 @t43 @t219) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t217 @t39 @t41 (or @t40 (ite @t42 @t211 @t210))) (and @t22 @t27 @t25 @t35 @t34 @t32 (or @t29 (and @t45 @t47 @t50 (ite @t49 @t207 @t206))) @t37 @t39 (or @t38 (and @t43 (ite @t42 @t209 @t208)))) (and @t22 @t27 @t25 @t35 (or @t31 (and @t30 @t45 @t47 @t50 (ite @t49 @t203 @t202))) @t34 @t37 @t218) (and @t216 @t22 @t25 @t34 @t37 @t218) (and @t22 @t27 @t25 @t35 @t34 (or @t33 (and @t39 @t41 @t43 (ite @t42 @t207 @t206))) @t32 @t30 @t217) (and @t22 @t27 (or @t26 (and @t32 @t30 @t45 @t47 @t50 (ite @t49 @t199 @t198))) @t25 (or @t24 (and @t37 @t39 @t41 @t43 (ite @t42 @t203 @t202)))) (and @t216 @t22 (or @t20 (and @t34 @t37 @t39 @t41 @t43 (ite @t42 @t199 @t198)))))))))
(step @p1324 :rule trans :premises (@p1323 @p1322))
; trust TRUST_THEORY_REWRITE
(step @p1325 :rule trust :premises () :args ((= (and @t34 @t37 @t39 @t41 @t258) @t222)))
; trust TRUST_THEORY_REWRITE
(step @p1326 :rule trust :premises () :args ((= (ite @t40 false @t221) @t258)))
(step @p1327 :rule refl :args (@t221))
; trust TRUST_THEORY_REWRITE
(step @p1328 :rule trust :premises () :args ((= @t259 false)))
(step @p1329 :rule cong :premises (@p1284 @p1328 @p1327) :args (ite))
(step @p1330 :rule trans :premises (@p1329 @p1326))
(step @p1331 :rule nary_cong :premises (@p1165 @p1164 @p1163 @p1162 @p1330) :args (and))
(step @p1332 :rule trans :premises (@p1331 @p1325))
(step @p1333 :rule nary_cong :premises (@p1168 @p1332) :args (or))
; trust TRUST_THEORY_REWRITE
(step @p1334 :rule trust :premises () :args ((= (and @t35 @t32 @t30 @t45 @t47 @t260) @t224)))
; trust TRUST_THEORY_REWRITE
(step @p1335 :rule trust :premises () :args ((= (ite @t46 false @t223) @t260)))
(step @p1336 :rule refl :args (@t223))
; trust TRUST_THEORY_REWRITE
(step @p1337 :rule trust :premises () :args ((= @t261 false)))
(step @p1338 :rule cong :premises (@p1306 @p1337 @p1336) :args (ite))
(step @p1339 :rule trans :premises (@p1338 @p1335))
(step @p1340 :rule nary_cong :premises (@p1185 @p1184 @p1183 @p1182 @p1181 @p1339) :args (and))
(step @p1341 :rule trans :premises (@p1340 @p1334))
(step @p1342 :rule nary_cong :premises (@p1188 @p1341) :args (or))
(step @p1343 :rule nary_cong :premises (@p1342 @p1171 @p1333) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1344 :rule trust :premises () :args ((= (and @t37 @t39 @t41 @t262) @t227)))
; trust TRUST_THEORY_REWRITE
(step @p1345 :rule trust :premises () :args ((= (ite @t40 false @t226) @t262)))
(step @p1346 :rule refl :args (@t226))
; trust TRUST_THEORY_REWRITE
(step @p1347 :rule trust :premises () :args ((= @t263 false)))
(step @p1348 :rule cong :premises (@p1284 @p1347 @p1346) :args (ite))
(step @p1349 :rule trans :premises (@p1348 @p1345))
(step @p1350 :rule nary_cong :premises (@p1164 @p1163 @p1162 @p1349) :args (and))
(step @p1351 :rule trans :premises (@p1350 @p1344))
(step @p1352 :rule nary_cong :premises (@p1200 @p1351) :args (or))
; trust TRUST_THEORY_REWRITE
(step @p1353 :rule trust :premises () :args ((= (and @t32 @t30 @t45 @t47 @t264) @t229)))
; trust TRUST_THEORY_REWRITE
(step @p1354 :rule trust :premises () :args ((= (ite @t46 false @t228) @t264)))
(step @p1355 :rule refl :args (@t228))
(step @p1356 :rule cong :premises (@p1306 @p1328 @p1355) :args (ite))
(step @p1357 :rule trans :premises (@p1356 @p1354))
(step @p1358 :rule nary_cong :premises (@p1184 @p1183 @p1182 @p1181 @p1357) :args (and))
(step @p1359 :rule trans :premises (@p1358 @p1353))
(step @p1360 :rule nary_cong :premises (@p1210 @p1359) :args (or))
(step @p1361 :rule nary_cong :premises (@p1171 @p1213 @p1360 @p1203 @p1352) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1362 :rule trust :premises () :args ((= (and @t47 @t265) @t231)))
; trust TRUST_THEORY_REWRITE
(step @p1363 :rule trust :premises () :args ((= (ite @t46 false @t230) @t265)))
(step @p1364 :rule refl :args (@t230))
; trust TRUST_THEORY_REWRITE
(step @p1365 :rule trust :premises () :args ((= @t266 false)))
(step @p1366 :rule cong :premises (@p1306 @p1365 @p1364) :args (ite))
(step @p1367 :rule trans :premises (@p1366 @p1363))
(step @p1368 :rule nary_cong :premises (@p1181 @p1367) :args (and))
(step @p1369 :rule trans :premises (@p1368 @p1362))
(step @p1370 :rule nary_cong :premises (@p1223 @p1369) :args (or))
; trust TRUST_THEORY_REWRITE
(step @p1371 :rule trust :premises () :args ((= (and @t39 @t41 @t267) @t234)))
; trust TRUST_THEORY_REWRITE
(step @p1372 :rule trust :premises () :args ((= (ite @t40 false @t233) @t267)))
(step @p1373 :rule refl :args (@t233))
; trust TRUST_THEORY_REWRITE
(step @p1374 :rule trust :premises () :args ((= @t268 false)))
(step @p1375 :rule cong :premises (@p1284 @p1374 @p1373) :args (ite))
(step @p1376 :rule trans :premises (@p1375 @p1372))
(step @p1377 :rule nary_cong :premises (@p1163 @p1162 @p1376) :args (and))
(step @p1378 :rule trans :premises (@p1377 @p1371))
(step @p1379 :rule nary_cong :premises (@p1234 @p1378) :args (or))
(step @p1380 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1379 @p1184 @p1183 @p1370) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1381 :rule trust :premises () :args ((= (and @t41 @t269) @t236)))
; trust TRUST_THEORY_REWRITE
(step @p1382 :rule trust :premises () :args ((= (ite @t40 false @t235) @t269)))
(step @p1383 :rule refl :args (@t235))
(step @p1384 :rule cong :premises (@p1284 @p1365 @p1383) :args (ite))
(step @p1385 :rule trans :premises (@p1384 @p1382))
(step @p1386 :rule nary_cong :premises (@p1162 @p1385) :args (and))
(step @p1387 :rule trans :premises (@p1386 @p1381))
(step @p1388 :rule nary_cong :premises (@p1244 @p1387) :args (or))
(step @p1389 :rule nary_cong :premises (@p1342 @p1171 @p1203 @p1165 @p1164 @p1388) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1390 :rule trust :premises () :args ((= (and @t30 @t45 @t47 @t270) @t239)))
; trust TRUST_THEORY_REWRITE
(step @p1391 :rule trust :premises () :args ((= (ite @t46 false @t238) @t270)))
(step @p1392 :rule refl :args (@t238))
(step @p1393 :rule cong :premises (@p1306 @p1347 @p1392) :args (ite))
(step @p1394 :rule trans :premises (@p1393 @p1391))
(step @p1395 :rule nary_cong :premises (@p1183 @p1182 @p1181 @p1394) :args (and))
(step @p1396 :rule trans :premises (@p1395 @p1390))
(step @p1397 :rule nary_cong :premises (@p1254 @p1396) :args (or))
(step @p1398 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1397 @p1165 @p1164 @p1388) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1399 :rule trust :premises () :args ((= (ite @t40 false @t240) @t241)))
(step @p1400 :rule refl :args (@t240))
; trust TRUST_THEORY_REWRITE
(step @p1401 :rule trust :premises () :args ((= @t271 false)))
(step @p1402 :rule cong :premises (@p1284 @p1401 @p1400) :args (ite))
(step @p1403 :rule trans :premises (@p1402 @p1399))
(step @p1404 :rule nary_cong :premises (@p1266 @p1403) :args (or))
; trust TRUST_THEORY_REWRITE
(step @p1405 :rule trust :premises () :args ((= (and @t45 @t47 @t272) @t243)))
; trust TRUST_THEORY_REWRITE
(step @p1406 :rule trust :premises () :args ((= (ite @t46 false @t242) @t272)))
(step @p1407 :rule refl :args (@t242))
(step @p1408 :rule cong :premises (@p1306 @p1374 @p1407) :args (ite))
(step @p1409 :rule trans :premises (@p1408 @p1406))
(step @p1410 :rule nary_cong :premises (@p1182 @p1181 @p1409) :args (and))
(step @p1411 :rule trans :premises (@p1410 @p1405))
(step @p1412 :rule nary_cong :premises (@p1275 @p1411) :args (or))
(step @p1413 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1412 @p1164 @p1163 @p1404) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1414 :rule trust :premises () :args ((= (ite @t40 true @t244) @t245)))
(step @p1415 :rule refl :args (@t244))
; trust TRUST_THEORY_REWRITE
(step @p1416 :rule trust :premises () :args ((= @t273 true)))
(step @p1417 :rule cong :premises (@p1284 @p1416 @p1415) :args (ite))
(step @p1418 :rule trans :premises (@p1417 @p1414))
(step @p1419 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1183 @p1370 @p1163 @p1162 @p1418) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1420 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t45 @t249 @t41 @t274) @t250)))
; trust TRUST_THEORY_REWRITE
(step @p1421 :rule trust :premises () :args ((= (ite @t40 false @t246) @t274)))
(step @p1422 :rule refl :args (@t246))
; trust TRUST_THEORY_REWRITE
(step @p1423 :rule trust :premises () :args ((= @t275 false)))
(step @p1424 :rule cong :premises (@p1284 @p1423 @p1422) :args (ite))
(step @p1425 :rule trans :premises (@p1424 @p1421))
; trust TRUST_THEORY_REWRITE
(step @p1426 :rule trust :premises () :args ((= (ite @t46 false @t247) @t248)))
(step @p1427 :rule refl :args (@t247))
(step @p1428 :rule cong :premises (@p1306 @p1401 @p1427) :args (ite))
(step @p1429 :rule trans :premises (@p1428 @p1426))
(step @p1430 :rule nary_cong :premises (@p1299 @p1429) :args (or))
(step @p1431 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1183 @p1163 @p1182 @p1430 @p1162 @p1425) :args (and))
(step @p1432 :rule trans :premises (@p1431 @p1420))
; trust TRUST_THEORY_REWRITE
(step @p1433 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t45 @t41 @t274 @t47 @t252) @t253)))
; trust TRUST_THEORY_REWRITE
(step @p1434 :rule trust :premises () :args ((= (ite @t46 true @t251) @t252)))
(step @p1435 :rule refl :args (@t251))
(step @p1436 :rule cong :premises (@p1306 @p1416 @p1435) :args (ite))
(step @p1437 :rule trans :premises (@p1436 @p1434))
(step @p1438 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1183 @p1163 @p1182 @p1162 @p1425 @p1181 @p1437) :args (and))
(step @p1439 :rule trans :premises (@p1438 @p1433))
; trust TRUST_THEORY_REWRITE
(step @p1440 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t232 @t39 @t41 @t276) @t255)))
; trust TRUST_THEORY_REWRITE
(step @p1441 :rule trust :premises () :args ((= (ite @t40 false @t254) @t276)))
(step @p1442 :rule refl :args (@t254))
; trust TRUST_THEORY_REWRITE
(step @p1443 :rule trust :premises () :args ((= @t277 false)))
(step @p1444 :rule cong :premises (@p1284 @p1443 @p1442) :args (ite))
(step @p1445 :rule trans :premises (@p1444 @p1441))
(step @p1446 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1183 @p1370 @p1163 @p1162 @p1445) :args (and))
(step @p1447 :rule trans :premises (@p1446 @p1440))
; trust TRUST_THEORY_REWRITE
(step @p1448 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t45 @t41 @t276 @t47 @t278) @t257)))
; trust TRUST_THEORY_REWRITE
(step @p1449 :rule trust :premises () :args ((= (ite @t46 false @t256) @t278)))
(step @p1450 :rule refl :args (@t256))
(step @p1451 :rule cong :premises (@p1306 @p1423 @p1450) :args (ite))
(step @p1452 :rule trans :premises (@p1451 @p1449))
(step @p1453 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1183 @p1163 @p1182 @p1162 @p1445 @p1181 @p1452) :args (and))
(step @p1454 :rule trans :premises (@p1453 @p1448))
(step @p1455 :rule nary_cong :premises (@p1320 @p1454 @p1447 @p1439 @p1432 @p1419 @p1413 @p1398 @p1389 @p1380 @p1361 @p1343) :args (or))
(step @p1456 :rule cong :premises (@p1455) :args ((forall ((va V1) (vb V1)))))
(step @p1457 :rule trans :premises (@p1456 @p1324))
; trust TRUST_THEORY_REWRITE
(step @p1458 :rule trust :premises () :args ((= (forall @t4 (or @t53 @t318 @t316 @t314 @t312 @t308 (and @t22 @t27 @t25 @t35 @t34 @t32 (or @t29 @t306) @t37 @t39 @t304) (and @t22 @t27 @t25 @t35 (or @t31 @t302) @t34 @t37 @t300) (and @t288 @t22 @t25 @t34 @t37 @t300) (and @t22 @t27 @t25 @t35 @t34 (or @t33 @t297) @t32 @t30 @t295) (and @t22 @t27 (or @t26 @t292) @t25 (or @t24 @t290)) (and @t288 @t22 (or @t20 @t285)))) (forall @t4 (or @t53 (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t45 @t41 @t283 @t47 (ite @t46 @t275 @t256)) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t280 @t39 @t41 @t283) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t45 @t41 @t282 @t47 (ite @t46 @t273 @t251)) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t45 (or @t44 (ite @t46 @t271 @t247)) @t41 @t282) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t280 @t39 @t41 (ite @t40 @t273 @t244)) (and @t22 @t27 @t25 @t35 @t34 @t32 (or @t29 (and @t45 @t47 (ite @t46 @t268 @t242))) @t37 @t39 (or @t38 (ite @t40 @t271 @t240))) (and @t22 @t27 @t25 @t35 (or @t31 (and @t30 @t45 @t47 (ite @t46 @t263 @t238))) @t34 @t37 @t281) (and @t279 @t22 @t25 @t34 @t37 @t281) (and @t22 @t27 @t25 @t35 @t34 (or @t33 (and @t39 @t41 (ite @t40 @t268 @t233))) @t32 @t30 @t280) (and @t22 @t27 (or @t26 (and @t32 @t30 @t45 @t47 (ite @t46 @t259 @t228))) @t25 (or @t24 (and @t37 @t39 @t41 (ite @t40 @t263 @t226)))) (and @t279 @t22 (or @t20 (and @t34 @t37 @t39 @t41 (ite @t40 @t259 @t221)))))))))
(step @p1459 :rule trans :premises (@p1458 @p1457))
; trust TRUST_THEORY_REWRITE
(step @p1460 :rule trust :premises () :args ((= (and @t34 @t37 @t39 @t319) @t285)))
; trust TRUST_THEORY_REWRITE
(step @p1461 :rule trust :premises () :args ((= (ite @t38 false @t284) @t319)))
(step @p1462 :rule refl :args (@t284))
; trust TRUST_THEORY_REWRITE
(step @p1463 :rule trust :premises () :args ((= @t320 false)))
(step @p1464 :rule cong :premises (@p1266 @p1463 @p1462) :args (ite))
(step @p1465 :rule trans :premises (@p1464 @p1461))
(step @p1466 :rule nary_cong :premises (@p1165 @p1164 @p1163 @p1465) :args (and))
(step @p1467 :rule trans :premises (@p1466 @p1460))
(step @p1468 :rule nary_cong :premises (@p1168 @p1467) :args (or))
; trust TRUST_THEORY_REWRITE
(step @p1469 :rule trust :premises () :args ((= (and @t35 @t32 @t30 @t45 @t321) @t287)))
; trust TRUST_THEORY_REWRITE
(step @p1470 :rule trust :premises () :args ((= (ite @t44 false @t286) @t321)))
(step @p1471 :rule refl :args (@t286))
; trust TRUST_THEORY_REWRITE
(step @p1472 :rule trust :premises () :args ((= @t322 false)))
(step @p1473 :rule cong :premises (@p1299 @p1472 @p1471) :args (ite))
(step @p1474 :rule trans :premises (@p1473 @p1470))
(step @p1475 :rule nary_cong :premises (@p1185 @p1184 @p1183 @p1182 @p1474) :args (and))
(step @p1476 :rule trans :premises (@p1475 @p1469))
(step @p1477 :rule nary_cong :premises (@p1188 @p1476) :args (or))
(step @p1478 :rule nary_cong :premises (@p1477 @p1171 @p1468) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1479 :rule trust :premises () :args ((= (and @t37 @t39 @t323) @t290)))
; trust TRUST_THEORY_REWRITE
(step @p1480 :rule trust :premises () :args ((= (ite @t38 false @t289) @t323)))
(step @p1481 :rule refl :args (@t289))
; trust TRUST_THEORY_REWRITE
(step @p1482 :rule trust :premises () :args ((= @t324 false)))
(step @p1483 :rule cong :premises (@p1266 @p1482 @p1481) :args (ite))
(step @p1484 :rule trans :premises (@p1483 @p1480))
(step @p1485 :rule nary_cong :premises (@p1164 @p1163 @p1484) :args (and))
(step @p1486 :rule trans :premises (@p1485 @p1479))
(step @p1487 :rule nary_cong :premises (@p1200 @p1486) :args (or))
; trust TRUST_THEORY_REWRITE
(step @p1488 :rule trust :premises () :args ((= (and @t32 @t30 @t45 @t325) @t292)))
; trust TRUST_THEORY_REWRITE
(step @p1489 :rule trust :premises () :args ((= (ite @t44 false @t291) @t325)))
(step @p1490 :rule refl :args (@t291))
(step @p1491 :rule cong :premises (@p1299 @p1463 @p1490) :args (ite))
(step @p1492 :rule trans :premises (@p1491 @p1489))
(step @p1493 :rule nary_cong :premises (@p1184 @p1183 @p1182 @p1492) :args (and))
(step @p1494 :rule trans :premises (@p1493 @p1488))
(step @p1495 :rule nary_cong :premises (@p1210 @p1494) :args (or))
(step @p1496 :rule nary_cong :premises (@p1171 @p1213 @p1495 @p1203 @p1487) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1497 :rule trust :premises () :args ((= (ite @t44 false @t293) @t294)))
(step @p1498 :rule refl :args (@t293))
; trust TRUST_THEORY_REWRITE
(step @p1499 :rule trust :premises () :args ((= @t326 false)))
(step @p1500 :rule cong :premises (@p1299 @p1499 @p1498) :args (ite))
(step @p1501 :rule trans :premises (@p1500 @p1497))
(step @p1502 :rule nary_cong :premises (@p1223 @p1501) :args (or))
; trust TRUST_THEORY_REWRITE
(step @p1503 :rule trust :premises () :args ((= (and @t39 @t327) @t297)))
; trust TRUST_THEORY_REWRITE
(step @p1504 :rule trust :premises () :args ((= (ite @t38 false @t296) @t327)))
(step @p1505 :rule refl :args (@t296))
; trust TRUST_THEORY_REWRITE
(step @p1506 :rule trust :premises () :args ((= @t328 false)))
(step @p1507 :rule cong :premises (@p1266 @p1506 @p1505) :args (ite))
(step @p1508 :rule trans :premises (@p1507 @p1504))
(step @p1509 :rule nary_cong :premises (@p1163 @p1508) :args (and))
(step @p1510 :rule trans :premises (@p1509 @p1503))
(step @p1511 :rule nary_cong :premises (@p1234 @p1510) :args (or))
(step @p1512 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1511 @p1184 @p1183 @p1502) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1513 :rule trust :premises () :args ((= (ite @t38 false @t298) @t299)))
(step @p1514 :rule refl :args (@t298))
(step @p1515 :rule cong :premises (@p1266 @p1499 @p1514) :args (ite))
(step @p1516 :rule trans :premises (@p1515 @p1513))
(step @p1517 :rule nary_cong :premises (@p1244 @p1516) :args (or))
(step @p1518 :rule nary_cong :premises (@p1477 @p1171 @p1203 @p1165 @p1164 @p1517) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1519 :rule trust :premises () :args ((= (and @t30 @t45 @t329) @t302)))
; trust TRUST_THEORY_REWRITE
(step @p1520 :rule trust :premises () :args ((= (ite @t44 false @t301) @t329)))
(step @p1521 :rule refl :args (@t301))
(step @p1522 :rule cong :premises (@p1299 @p1482 @p1521) :args (ite))
(step @p1523 :rule trans :premises (@p1522 @p1520))
(step @p1524 :rule nary_cong :premises (@p1183 @p1182 @p1523) :args (and))
(step @p1525 :rule trans :premises (@p1524 @p1519))
(step @p1526 :rule nary_cong :premises (@p1254 @p1525) :args (or))
(step @p1527 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1526 @p1165 @p1164 @p1517) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1528 :rule trust :premises () :args ((= (ite @t38 true @t303) @t304)))
(step @p1529 :rule refl :args (@t303))
; trust TRUST_THEORY_REWRITE
(step @p1530 :rule trust :premises () :args ((= @t330 true)))
(step @p1531 :rule cong :premises (@p1266 @p1530 @p1529) :args (ite))
(step @p1532 :rule trans :premises (@p1531 @p1528))
; trust TRUST_THEORY_REWRITE
(step @p1533 :rule trust :premises () :args ((= (and @t45 @t331) @t306)))
; trust TRUST_THEORY_REWRITE
(step @p1534 :rule trust :premises () :args ((= (ite @t44 false @t305) @t331)))
(step @p1535 :rule refl :args (@t305))
(step @p1536 :rule cong :premises (@p1299 @p1506 @p1535) :args (ite))
(step @p1537 :rule trans :premises (@p1536 @p1534))
(step @p1538 :rule nary_cong :premises (@p1182 @p1537) :args (and))
(step @p1539 :rule trans :premises (@p1538 @p1533))
(step @p1540 :rule nary_cong :premises (@p1275 @p1539) :args (or))
(step @p1541 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1540 @p1164 @p1163 @p1532) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1542 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t295 @t39 @t332) @t308)))
; trust TRUST_THEORY_REWRITE
(step @p1543 :rule trust :premises () :args ((= (ite @t38 false @t307) @t332)))
(step @p1544 :rule refl :args (@t307))
; trust TRUST_THEORY_REWRITE
(step @p1545 :rule trust :premises () :args ((= @t333 false)))
(step @p1546 :rule cong :premises (@p1266 @p1545 @p1544) :args (ite))
(step @p1547 :rule trans :premises (@p1546 @p1543))
(step @p1548 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1183 @p1502 @p1163 @p1547) :args (and))
(step @p1549 :rule trans :premises (@p1548 @p1542))
; trust TRUST_THEORY_REWRITE
(step @p1550 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t334 @t45 @t311) @t312)))
; trust TRUST_THEORY_REWRITE
(step @p1551 :rule trust :premises () :args ((= (ite @t44 true @t310) @t311)))
(step @p1552 :rule refl :args (@t310))
(step @p1553 :rule cong :premises (@p1299 @p1530 @p1552) :args (ite))
(step @p1554 :rule trans :premises (@p1553 @p1551))
; trust TRUST_THEORY_REWRITE
(step @p1555 :rule trust :premises () :args ((= (ite @t38 false @t309) @t334)))
(step @p1556 :rule refl :args (@t309))
; trust TRUST_THEORY_REWRITE
(step @p1557 :rule trust :premises () :args ((= @t335 false)))
(step @p1558 :rule cong :premises (@p1266 @p1557 @p1556) :args (ite))
(step @p1559 :rule trans :premises (@p1558 @p1555))
(step @p1560 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1183 @p1163 @p1559 @p1182 @p1554) :args (and))
(step @p1561 :rule trans :premises (@p1560 @p1550))
; trust TRUST_THEORY_REWRITE
(step @p1562 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t334 @t45 @t336) @t314)))
; trust TRUST_THEORY_REWRITE
(step @p1563 :rule trust :premises () :args ((= (ite @t44 false @t313) @t336)))
(step @p1564 :rule refl :args (@t313))
(step @p1565 :rule cong :premises (@p1299 @p1545 @p1564) :args (ite))
(step @p1566 :rule trans :premises (@p1565 @p1563))
(step @p1567 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1183 @p1163 @p1559 @p1182 @p1566) :args (and))
(step @p1568 :rule trans :premises (@p1567 @p1562))
; trust TRUST_THEORY_REWRITE
(step @p1569 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t295 @t39 @t337) @t316)))
; trust TRUST_THEORY_REWRITE
(step @p1570 :rule trust :premises () :args ((= (ite @t38 false @t315) @t337)))
(step @p1571 :rule refl :args (@t315))
; trust TRUST_THEORY_REWRITE
(step @p1572 :rule trust :premises () :args ((= @t338 false)))
(step @p1573 :rule cong :premises (@p1266 @p1572 @p1571) :args (ite))
(step @p1574 :rule trans :premises (@p1573 @p1570))
(step @p1575 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1183 @p1502 @p1163 @p1574) :args (and))
(step @p1576 :rule trans :premises (@p1575 @p1569))
; trust TRUST_THEORY_REWRITE
(step @p1577 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t337 @t45 @t339) @t318)))
; trust TRUST_THEORY_REWRITE
(step @p1578 :rule trust :premises () :args ((= (ite @t44 false @t317) @t339)))
(step @p1579 :rule refl :args (@t317))
(step @p1580 :rule cong :premises (@p1299 @p1557 @p1579) :args (ite))
(step @p1581 :rule trans :premises (@p1580 @p1578))
(step @p1582 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1183 @p1163 @p1574 @p1182 @p1581) :args (and))
(step @p1583 :rule trans :premises (@p1582 @p1577))
(step @p1584 :rule nary_cong :premises (@p1320 @p1583 @p1576 @p1568 @p1561 @p1549 @p1541 @p1527 @p1518 @p1512 @p1496 @p1478) :args (or))
(step @p1585 :rule cong :premises (@p1584) :args ((forall ((va V1) (vb V1)))))
(step @p1586 :rule trans :premises (@p1585 @p1459))
; trust TRUST_THEORY_REWRITE
(step @p1587 :rule trust :premises () :args ((= (forall @t4 (or @t53 @t377 @t375 @t373 @t371 @t368 @t366 (and @t22 @t27 @t25 @t35 (or @t31 @t361) @t34 @t37 @t359) (and @t349 @t22 @t25 @t34 @t37 @t359) (and @t22 @t27 @t25 @t35 @t34 (or @t33 @t357) @t32 @t30 @t355) (and @t22 @t27 (or @t26 @t353) @t25 (or @t24 @t351)) (and @t349 @t22 (or @t20 @t346)))) (forall @t4 (or @t53 (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t344 @t45 (ite @t44 @t335 @t317)) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t341 @t39 @t344) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t343 @t45 (ite @t44 @t333 @t313)) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t39 @t343 @t45 (ite @t44 @t330 @t310)) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t30 @t341 @t39 (ite @t38 @t333 @t307)) (and @t22 @t27 @t25 @t35 @t34 @t32 (or @t29 (and @t45 (ite @t44 @t328 @t305))) @t37 @t39 (ite @t38 @t330 @t303)) (and @t22 @t27 @t25 @t35 (or @t31 (and @t30 @t45 (ite @t44 @t324 @t301))) @t34 @t37 @t342) (and @t340 @t22 @t25 @t34 @t37 @t342) (and @t22 @t27 @t25 @t35 @t34 (or @t33 (and @t39 (ite @t38 @t328 @t296))) @t32 @t30 @t341) (and @t22 @t27 (or @t26 (and @t32 @t30 @t45 (ite @t44 @t320 @t291))) @t25 (or @t24 (and @t37 @t39 (ite @t38 @t324 @t289)))) (and @t340 @t22 (or @t20 (and @t34 @t37 @t39 (ite @t38 @t320 @t284)))))))))
(step @p1588 :rule trans :premises (@p1587 @p1586))
; trust TRUST_THEORY_REWRITE
(step @p1589 :rule trust :premises () :args ((= (and @t34 @t37 @t378) @t346)))
; trust TRUST_THEORY_REWRITE
(step @p1590 :rule trust :premises () :args ((= (ite @t36 false @t345) @t378)))
(step @p1591 :rule refl :args (@t345))
; trust TRUST_THEORY_REWRITE
(step @p1592 :rule trust :premises () :args ((= @t379 false)))
(step @p1593 :rule cong :premises (@p1244 @p1592 @p1591) :args (ite))
(step @p1594 :rule trans :premises (@p1593 @p1590))
(step @p1595 :rule nary_cong :premises (@p1165 @p1164 @p1594) :args (and))
(step @p1596 :rule trans :premises (@p1595 @p1589))
(step @p1597 :rule nary_cong :premises (@p1168 @p1596) :args (or))
; trust TRUST_THEORY_REWRITE
(step @p1598 :rule trust :premises () :args ((= (and @t35 @t32 @t30 @t380) @t348)))
; trust TRUST_THEORY_REWRITE
(step @p1599 :rule trust :premises () :args ((= (ite @t28 false @t347) @t380)))
(step @p1600 :rule refl :args (@t347))
; trust TRUST_THEORY_REWRITE
(step @p1601 :rule trust :premises () :args ((= @t381 false)))
(step @p1602 :rule cong :premises (@p1223 @p1601 @p1600) :args (ite))
(step @p1603 :rule trans :premises (@p1602 @p1599))
(step @p1604 :rule nary_cong :premises (@p1185 @p1184 @p1183 @p1603) :args (and))
(step @p1605 :rule trans :premises (@p1604 @p1598))
(step @p1606 :rule nary_cong :premises (@p1188 @p1605) :args (or))
(step @p1607 :rule nary_cong :premises (@p1606 @p1171 @p1597) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1608 :rule trust :premises () :args ((= (and @t37 @t382) @t351)))
; trust TRUST_THEORY_REWRITE
(step @p1609 :rule trust :premises () :args ((= (ite @t36 false @t350) @t382)))
(step @p1610 :rule refl :args (@t350))
; trust TRUST_THEORY_REWRITE
(step @p1611 :rule trust :premises () :args ((= @t383 false)))
(step @p1612 :rule cong :premises (@p1244 @p1611 @p1610) :args (ite))
(step @p1613 :rule trans :premises (@p1612 @p1609))
(step @p1614 :rule nary_cong :premises (@p1164 @p1613) :args (and))
(step @p1615 :rule trans :premises (@p1614 @p1608))
(step @p1616 :rule nary_cong :premises (@p1200 @p1615) :args (or))
; trust TRUST_THEORY_REWRITE
(step @p1617 :rule trust :premises () :args ((= (and @t32 @t30 @t384) @t353)))
; trust TRUST_THEORY_REWRITE
(step @p1618 :rule trust :premises () :args ((= (ite @t28 false @t352) @t384)))
(step @p1619 :rule refl :args (@t352))
(step @p1620 :rule cong :premises (@p1223 @p1592 @p1619) :args (ite))
(step @p1621 :rule trans :premises (@p1620 @p1618))
(step @p1622 :rule nary_cong :premises (@p1184 @p1183 @p1621) :args (and))
(step @p1623 :rule trans :premises (@p1622 @p1617))
(step @p1624 :rule nary_cong :premises (@p1210 @p1623) :args (or))
(step @p1625 :rule nary_cong :premises (@p1171 @p1213 @p1624 @p1203 @p1616) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1626 :rule trust :premises () :args ((= (ite @t28 true @t354) @t355)))
(step @p1627 :rule refl :args (@t354))
; trust TRUST_THEORY_REWRITE
(step @p1628 :rule trust :premises () :args ((= @t385 true)))
(step @p1629 :rule cong :premises (@p1223 @p1628 @p1627) :args (ite))
(step @p1630 :rule trans :premises (@p1629 @p1626))
; trust TRUST_THEORY_REWRITE
(step @p1631 :rule trust :premises () :args ((= (ite @t36 false @t356) @t357)))
(step @p1632 :rule refl :args (@t356))
; trust TRUST_THEORY_REWRITE
(step @p1633 :rule trust :premises () :args ((= @t386 false)))
(step @p1634 :rule cong :premises (@p1244 @p1633 @p1632) :args (ite))
(step @p1635 :rule trans :premises (@p1634 @p1631))
(step @p1636 :rule nary_cong :premises (@p1234 @p1635) :args (or))
(step @p1637 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1636 @p1184 @p1183 @p1630) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1638 :rule trust :premises () :args ((= (ite @t36 true @t358) @t359)))
(step @p1639 :rule refl :args (@t358))
(step @p1640 :rule cong :premises (@p1244 @p1628 @p1639) :args (ite))
(step @p1641 :rule trans :premises (@p1640 @p1638))
(step @p1642 :rule nary_cong :premises (@p1606 @p1171 @p1203 @p1165 @p1164 @p1641) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1643 :rule trust :premises () :args ((= (and @t30 @t387) @t361)))
; trust TRUST_THEORY_REWRITE
(step @p1644 :rule trust :premises () :args ((= (ite @t28 false @t360) @t387)))
(step @p1645 :rule refl :args (@t360))
(step @p1646 :rule cong :premises (@p1223 @p1611 @p1645) :args (ite))
(step @p1647 :rule trans :premises (@p1646 @p1644))
(step @p1648 :rule nary_cong :premises (@p1183 @p1647) :args (and))
(step @p1649 :rule trans :premises (@p1648 @p1643))
(step @p1650 :rule nary_cong :premises (@p1254 @p1649) :args (or))
(step @p1651 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1650 @p1165 @p1164 @p1641) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1652 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t32 @t365 @t37 @t388) @t366)))
; trust TRUST_THEORY_REWRITE
(step @p1653 :rule trust :premises () :args ((= (ite @t36 false @t362) @t388)))
(step @p1654 :rule refl :args (@t362))
; trust TRUST_THEORY_REWRITE
(step @p1655 :rule trust :premises () :args ((= @t389 false)))
(step @p1656 :rule cong :premises (@p1244 @p1655 @p1654) :args (ite))
(step @p1657 :rule trans :premises (@p1656 @p1653))
; trust TRUST_THEORY_REWRITE
(step @p1658 :rule trust :premises () :args ((= (ite @t28 false @t363) @t364)))
(step @p1659 :rule refl :args (@t363))
(step @p1660 :rule cong :premises (@p1223 @p1633 @p1659) :args (ite))
(step @p1661 :rule trans :premises (@p1660 @p1658))
(step @p1662 :rule nary_cong :premises (@p1275 @p1661) :args (or))
(step @p1663 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1662 @p1164 @p1657) :args (and))
(step @p1664 :rule trans :premises (@p1663 @p1652))
; trust TRUST_THEORY_REWRITE
(step @p1665 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t390 @t30 @t355) @t368)))
; trust TRUST_THEORY_REWRITE
(step @p1666 :rule trust :premises () :args ((= (ite @t36 false @t367) @t390)))
(step @p1667 :rule refl :args (@t367))
; trust TRUST_THEORY_REWRITE
(step @p1668 :rule trust :premises () :args ((= @t391 false)))
(step @p1669 :rule cong :premises (@p1244 @p1668 @p1667) :args (ite))
(step @p1670 :rule trans :premises (@p1669 @p1666))
(step @p1671 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1670 @p1183 @p1630) :args (and))
(step @p1672 :rule trans :premises (@p1671 @p1665))
; trust TRUST_THEORY_REWRITE
(step @p1673 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t393 @t30 @t392) @t371)))
; trust TRUST_THEORY_REWRITE
(step @p1674 :rule trust :premises () :args ((= (ite @t28 false @t369) @t392)))
(step @p1675 :rule refl :args (@t369))
(step @p1676 :rule cong :premises (@p1223 @p1655 @p1675) :args (ite))
(step @p1677 :rule trans :premises (@p1676 @p1674))
; trust TRUST_THEORY_REWRITE
(step @p1678 :rule trust :premises () :args ((= (ite @t36 false @t370) @t393)))
(step @p1679 :rule refl :args (@t370))
; trust TRUST_THEORY_REWRITE
(step @p1680 :rule trust :premises () :args ((= @t394 false)))
(step @p1681 :rule cong :premises (@p1244 @p1680 @p1679) :args (ite))
(step @p1682 :rule trans :premises (@p1681 @p1678))
(step @p1683 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1682 @p1183 @p1677) :args (and))
(step @p1684 :rule trans :premises (@p1683 @p1673))
; trust TRUST_THEORY_REWRITE
(step @p1685 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t393 @t30 @t395) @t373)))
; trust TRUST_THEORY_REWRITE
(step @p1686 :rule trust :premises () :args ((= (ite @t28 false @t372) @t395)))
(step @p1687 :rule refl :args (@t372))
(step @p1688 :rule cong :premises (@p1223 @p1668 @p1687) :args (ite))
(step @p1689 :rule trans :premises (@p1688 @p1686))
(step @p1690 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1682 @p1183 @p1689) :args (and))
(step @p1691 :rule trans :premises (@p1690 @p1685))
; trust TRUST_THEORY_REWRITE
(step @p1692 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t396 @t30 @t355) @t375)))
; trust TRUST_THEORY_REWRITE
(step @p1693 :rule trust :premises () :args ((= (ite @t36 false @t374) @t396)))
(step @p1694 :rule refl :args (@t374))
; trust TRUST_THEORY_REWRITE
(step @p1695 :rule trust :premises () :args ((= @t397 false)))
(step @p1696 :rule cong :premises (@p1244 @p1695 @p1694) :args (ite))
(step @p1697 :rule trans :premises (@p1696 @p1693))
(step @p1698 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1697 @p1183 @p1630) :args (and))
(step @p1699 :rule trans :premises (@p1698 @p1692))
; trust TRUST_THEORY_REWRITE
(step @p1700 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t396 @t30 @t398) @t377)))
; trust TRUST_THEORY_REWRITE
(step @p1701 :rule trust :premises () :args ((= (ite @t28 false @t376) @t398)))
(step @p1702 :rule refl :args (@t376))
(step @p1703 :rule cong :premises (@p1223 @p1680 @p1702) :args (ite))
(step @p1704 :rule trans :premises (@p1703 @p1701))
(step @p1705 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1184 @p1164 @p1697 @p1183 @p1704) :args (and))
(step @p1706 :rule trans :premises (@p1705 @p1700))
(step @p1707 :rule nary_cong :premises (@p1320 @p1706 @p1699 @p1691 @p1684 @p1672 @p1664 @p1651 @p1642 @p1637 @p1625 @p1607) :args (or))
(step @p1708 :rule cong :premises (@p1707) :args ((forall ((va V1) (vb V1)))))
(step @p1709 :rule trans :premises (@p1708 @p1588))
; trust TRUST_THEORY_REWRITE
(step @p1710 :rule trust :premises () :args ((= (forall @t4 (or @t53 @t437 @t435 @t433 @t431 @t428 @t426 @t422 @t418 @t416 (and @t22 @t27 (or @t26 @t412) @t25 (or @t24 @t410)) (and @t408 @t22 (or @t20 @t405)))) (forall @t4 (or @t53 (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t403 @t30 (ite @t28 @t394 @t376)) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t403 @t30 @t400) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t402 @t30 (ite @t28 @t391 @t372)) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 @t402 @t30 (ite @t28 @t389 @t369)) (and @t22 @t27 @t25 @t35 @t34 @t32 @t37 (ite @t36 @t391 @t367) @t30 @t400) (and @t22 @t27 @t25 @t35 @t34 @t32 (or @t29 (ite @t28 @t386 @t363)) @t37 (ite @t36 @t389 @t362)) (and @t22 @t27 @t25 @t35 (or @t31 (and @t30 (ite @t28 @t383 @t360))) @t34 @t37 @t401) (and @t399 @t22 @t25 @t34 @t37 @t401) (and @t22 @t27 @t25 @t35 @t34 (or @t33 (ite @t36 @t386 @t356)) @t32 @t30 @t400) (and @t22 @t27 (or @t26 (and @t32 @t30 (ite @t28 @t379 @t352))) @t25 (or @t24 (and @t37 (ite @t36 @t383 @t350)))) (and @t399 @t22 (or @t20 (and @t34 @t37 (ite @t36 @t379 @t345)))))))))
(step @p1711 :rule trans :premises (@p1710 @p1709))
; trust TRUST_THEORY_REWRITE
(step @p1712 :rule trust :premises () :args ((= (and @t34 @t438) @t405)))
; trust TRUST_THEORY_REWRITE
(step @p1713 :rule trust :premises () :args ((= (ite @t33 false @t404) @t438)))
(step @p1714 :rule refl :args (@t404))
; trust TRUST_THEORY_REWRITE
(step @p1715 :rule trust :premises () :args ((= @t439 false)))
(step @p1716 :rule cong :premises (@p1234 @p1715 @p1714) :args (ite))
(step @p1717 :rule trans :premises (@p1716 @p1713))
(step @p1718 :rule nary_cong :premises (@p1165 @p1717) :args (and))
(step @p1719 :rule trans :premises (@p1718 @p1712))
(step @p1720 :rule nary_cong :premises (@p1168 @p1719) :args (or))
; trust TRUST_THEORY_REWRITE
(step @p1721 :rule trust :premises () :args ((= (and @t35 @t32 @t440) @t407)))
; trust TRUST_THEORY_REWRITE
(step @p1722 :rule trust :premises () :args ((= (ite @t29 false @t406) @t440)))
(step @p1723 :rule refl :args (@t406))
; trust TRUST_THEORY_REWRITE
(step @p1724 :rule trust :premises () :args ((= @t441 false)))
(step @p1725 :rule cong :premises (@p1275 @p1724 @p1723) :args (ite))
(step @p1726 :rule trans :premises (@p1725 @p1722))
(step @p1727 :rule nary_cong :premises (@p1185 @p1184 @p1726) :args (and))
(step @p1728 :rule trans :premises (@p1727 @p1721))
(step @p1729 :rule nary_cong :premises (@p1188 @p1728) :args (or))
(step @p1730 :rule nary_cong :premises (@p1729 @p1171 @p1720) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1731 :rule trust :premises () :args ((= (ite @t33 false @t409) @t410)))
(step @p1732 :rule refl :args (@t409))
; trust TRUST_THEORY_REWRITE
(step @p1733 :rule trust :premises () :args ((= @t442 false)))
(step @p1734 :rule cong :premises (@p1234 @p1733 @p1732) :args (ite))
(step @p1735 :rule trans :premises (@p1734 @p1731))
(step @p1736 :rule nary_cong :premises (@p1200 @p1735) :args (or))
; trust TRUST_THEORY_REWRITE
(step @p1737 :rule trust :premises () :args ((= (and @t32 @t443) @t412)))
; trust TRUST_THEORY_REWRITE
(step @p1738 :rule trust :premises () :args ((= (ite @t29 false @t411) @t443)))
(step @p1739 :rule refl :args (@t411))
(step @p1740 :rule cong :premises (@p1275 @p1715 @p1739) :args (ite))
(step @p1741 :rule trans :premises (@p1740 @p1738))
(step @p1742 :rule nary_cong :premises (@p1184 @p1741) :args (and))
(step @p1743 :rule trans :premises (@p1742 @p1737))
(step @p1744 :rule nary_cong :premises (@p1210 @p1743) :args (or))
(step @p1745 :rule nary_cong :premises (@p1171 @p1213 @p1744 @p1203 @p1736) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1746 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t415 @t32 @t444) @t416)))
; trust TRUST_THEORY_REWRITE
(step @p1747 :rule trust :premises () :args ((= (ite @t29 false @t413) @t444)))
(step @p1748 :rule refl :args (@t413))
; trust TRUST_THEORY_REWRITE
(step @p1749 :rule trust :premises () :args ((= @t445 false)))
(step @p1750 :rule cong :premises (@p1275 @p1749 @p1748) :args (ite))
(step @p1751 :rule trans :premises (@p1750 @p1747))
; trust TRUST_THEORY_REWRITE
(step @p1752 :rule trust :premises () :args ((= (ite @t33 true @t414) @t415)))
(step @p1753 :rule refl :args (@t414))
; trust TRUST_THEORY_REWRITE
(step @p1754 :rule trust :premises () :args ((= @t446 true)))
(step @p1755 :rule cong :premises (@p1234 @p1754 @p1753) :args (ite))
(step @p1756 :rule trans :premises (@p1755 @p1752))
(step @p1757 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1756 @p1184 @p1751) :args (and))
(step @p1758 :rule trans :premises (@p1757 @p1746))
; trust TRUST_THEORY_REWRITE
(step @p1759 :rule trust :premises () :args ((= (and @t408 @t22 @t25 @t34 @t447) @t418)))
; trust TRUST_THEORY_REWRITE
(step @p1760 :rule trust :premises () :args ((= (ite @t33 false @t417) @t447)))
(step @p1761 :rule refl :args (@t417))
(step @p1762 :rule cong :premises (@p1234 @p1749 @p1761) :args (ite))
(step @p1763 :rule trans :premises (@p1762 @p1760))
(step @p1764 :rule nary_cong :premises (@p1729 @p1171 @p1203 @p1165 @p1763) :args (and))
(step @p1765 :rule trans :premises (@p1764 @p1759))
; trust TRUST_THEORY_REWRITE
(step @p1766 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t421 @t34 @t447) @t422)))
; trust TRUST_THEORY_REWRITE
(step @p1767 :rule trust :premises () :args ((= (ite @t29 false @t419) @t420)))
(step @p1768 :rule refl :args (@t419))
(step @p1769 :rule cong :premises (@p1275 @p1733 @p1768) :args (ite))
(step @p1770 :rule trans :premises (@p1769 @p1767))
(step @p1771 :rule nary_cong :premises (@p1254 @p1770) :args (or))
(step @p1772 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1771 @p1165 @p1763) :args (and))
(step @p1773 :rule trans :premises (@p1772 @p1766))
; trust TRUST_THEORY_REWRITE
(step @p1774 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t448 @t32 @t425) @t426)))
; trust TRUST_THEORY_REWRITE
(step @p1775 :rule trust :premises () :args ((= (ite @t29 true @t424) @t425)))
(step @p1776 :rule refl :args (@t424))
(step @p1777 :rule cong :premises (@p1275 @p1754 @p1776) :args (ite))
(step @p1778 :rule trans :premises (@p1777 @p1775))
; trust TRUST_THEORY_REWRITE
(step @p1779 :rule trust :premises () :args ((= (ite @t33 false @t423) @t448)))
(step @p1780 :rule refl :args (@t423))
; trust TRUST_THEORY_REWRITE
(step @p1781 :rule trust :premises () :args ((= @t449 false)))
(step @p1782 :rule cong :premises (@p1234 @p1781 @p1780) :args (ite))
(step @p1783 :rule trans :premises (@p1782 @p1779))
(step @p1784 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1783 @p1184 @p1778) :args (and))
(step @p1785 :rule trans :premises (@p1784 @p1774))
; trust TRUST_THEORY_REWRITE
(step @p1786 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t450 @t32 @t444) @t428)))
; trust TRUST_THEORY_REWRITE
(step @p1787 :rule trust :premises () :args ((= (ite @t33 false @t427) @t450)))
(step @p1788 :rule refl :args (@t427))
; trust TRUST_THEORY_REWRITE
(step @p1789 :rule trust :premises () :args ((= @t451 false)))
(step @p1790 :rule cong :premises (@p1234 @p1789 @p1788) :args (ite))
(step @p1791 :rule trans :premises (@p1790 @p1787))
(step @p1792 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1791 @p1184 @p1751) :args (and))
(step @p1793 :rule trans :premises (@p1792 @p1786))
; trust TRUST_THEORY_REWRITE
(step @p1794 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t453 @t32 @t452) @t431)))
; trust TRUST_THEORY_REWRITE
(step @p1795 :rule trust :premises () :args ((= (ite @t29 false @t429) @t452)))
(step @p1796 :rule refl :args (@t429))
(step @p1797 :rule cong :premises (@p1275 @p1781 @p1796) :args (ite))
(step @p1798 :rule trans :premises (@p1797 @p1795))
; trust TRUST_THEORY_REWRITE
(step @p1799 :rule trust :premises () :args ((= (ite @t33 false @t430) @t453)))
(step @p1800 :rule refl :args (@t430))
; trust TRUST_THEORY_REWRITE
(step @p1801 :rule trust :premises () :args ((= @t454 false)))
(step @p1802 :rule cong :premises (@p1234 @p1801 @p1800) :args (ite))
(step @p1803 :rule trans :premises (@p1802 @p1799))
(step @p1804 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1803 @p1184 @p1798) :args (and))
(step @p1805 :rule trans :premises (@p1804 @p1794))
; trust TRUST_THEORY_REWRITE
(step @p1806 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t453 @t32 @t455) @t433)))
; trust TRUST_THEORY_REWRITE
(step @p1807 :rule trust :premises () :args ((= (ite @t29 false @t432) @t455)))
(step @p1808 :rule refl :args (@t432))
(step @p1809 :rule cong :premises (@p1275 @p1789 @p1808) :args (ite))
(step @p1810 :rule trans :premises (@p1809 @p1807))
(step @p1811 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1803 @p1184 @p1810) :args (and))
(step @p1812 :rule trans :premises (@p1811 @p1806))
; trust TRUST_THEORY_REWRITE
(step @p1813 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t456 @t32 @t444) @t435)))
; trust TRUST_THEORY_REWRITE
(step @p1814 :rule trust :premises () :args ((= (ite @t33 false @t434) @t456)))
(step @p1815 :rule refl :args (@t434))
; trust TRUST_THEORY_REWRITE
(step @p1816 :rule trust :premises () :args ((= @t457 false)))
(step @p1817 :rule cong :premises (@p1234 @p1816 @p1815) :args (ite))
(step @p1818 :rule trans :premises (@p1817 @p1814))
(step @p1819 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1818 @p1184 @p1751) :args (and))
(step @p1820 :rule trans :premises (@p1819 @p1813))
; trust TRUST_THEORY_REWRITE
(step @p1821 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t35 @t34 @t456 @t32 @t458) @t437)))
; trust TRUST_THEORY_REWRITE
(step @p1822 :rule trust :premises () :args ((= (ite @t29 false @t436) @t458)))
(step @p1823 :rule refl :args (@t436))
(step @p1824 :rule cong :premises (@p1275 @p1801 @p1823) :args (ite))
(step @p1825 :rule trans :premises (@p1824 @p1822))
(step @p1826 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1185 @p1165 @p1818 @p1184 @p1825) :args (and))
(step @p1827 :rule trans :premises (@p1826 @p1821))
(step @p1828 :rule nary_cong :premises (@p1320 @p1827 @p1820 @p1812 @p1805 @p1793 @p1785 @p1773 @p1765 @p1758 @p1745 @p1730) :args (or))
(step @p1829 :rule cong :premises (@p1828) :args ((forall ((va V1) (vb V1)))))
(step @p1830 :rule trans :premises (@p1829 @p1711))
; trust TRUST_THEORY_REWRITE
(step @p1831 :rule trust :premises () :args ((= (forall @t4 (or @t53 @t494 @t492 @t490 @t488 @t485 @t483 @t480 @t477 @t475 (and @t22 @t27 (or @t26 @t472) @t25 @t470) (and @t468 @t22 (or @t20 @t465)))) (forall @t4 (or @t53 (and @t22 @t27 @t25 @t35 @t34 @t463 @t32 (ite @t29 @t454 @t436)) (and @t22 @t27 @t25 @t35 @t34 @t463 @t32 @t460) (and @t22 @t27 @t25 @t35 @t34 @t462 @t32 (ite @t29 @t451 @t432)) (and @t22 @t27 @t25 @t35 @t34 @t462 @t32 (ite @t29 @t449 @t429)) (and @t22 @t27 @t25 @t35 @t34 (ite @t33 @t451 @t427) @t32 @t460) (and @t22 @t27 @t25 @t35 @t34 (ite @t33 @t449 @t423) @t32 (ite @t29 @t446 @t424)) (and @t22 @t27 @t25 @t35 (or @t31 (ite @t29 @t442 @t419)) @t34 @t461) (and @t459 @t22 @t25 @t34 @t461) (and @t22 @t27 @t25 @t35 @t34 (ite @t33 @t446 @t414) @t32 @t460) (and @t22 @t27 (or @t26 (and @t32 (ite @t29 @t439 @t411))) @t25 (or @t24 (ite @t33 @t442 @t409))) (and @t459 @t22 (or @t20 (and @t34 (ite @t33 @t439 @t404)))))))))
(step @p1832 :rule trans :premises (@p1831 @p1830))
; trust TRUST_THEORY_REWRITE
(step @p1833 :rule trust :premises () :args ((= (ite @t24 false @t464) @t465)))
(step @p1834 :rule refl :args (@t464))
; trust TRUST_THEORY_REWRITE
(step @p1835 :rule trust :premises () :args ((= @t495 false)))
(step @p1836 :rule cong :premises (@p1200 @p1835 @p1834) :args (ite))
(step @p1837 :rule trans :premises (@p1836 @p1833))
(step @p1838 :rule nary_cong :premises (@p1168 @p1837) :args (or))
; trust TRUST_THEORY_REWRITE
(step @p1839 :rule trust :premises () :args ((= (and @t35 @t496) @t467)))
; trust TRUST_THEORY_REWRITE
(step @p1840 :rule trust :premises () :args ((= (ite @t31 false @t466) @t496)))
(step @p1841 :rule refl :args (@t466))
; trust TRUST_THEORY_REWRITE
(step @p1842 :rule trust :premises () :args ((= @t497 false)))
(step @p1843 :rule cong :premises (@p1254 @p1842 @p1841) :args (ite))
(step @p1844 :rule trans :premises (@p1843 @p1840))
(step @p1845 :rule nary_cong :premises (@p1185 @p1844) :args (and))
(step @p1846 :rule trans :premises (@p1845 @p1839))
(step @p1847 :rule nary_cong :premises (@p1188 @p1846) :args (or))
(step @p1848 :rule nary_cong :premises (@p1847 @p1171 @p1838) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1849 :rule trust :premises () :args ((= (ite @t24 true @t469) @t470)))
(step @p1850 :rule refl :args (@t469))
; trust TRUST_THEORY_REWRITE
(step @p1851 :rule trust :premises () :args ((= @t498 true)))
(step @p1852 :rule cong :premises (@p1200 @p1851 @p1850) :args (ite))
(step @p1853 :rule trans :premises (@p1852 @p1849))
; trust TRUST_THEORY_REWRITE
(step @p1854 :rule trust :premises () :args ((= (ite @t31 false @t471) @t472)))
(step @p1855 :rule refl :args (@t471))
(step @p1856 :rule cong :premises (@p1254 @p1835 @p1855) :args (ite))
(step @p1857 :rule trans :premises (@p1856 @p1854))
(step @p1858 :rule nary_cong :premises (@p1210 @p1857) :args (or))
(step @p1859 :rule nary_cong :premises (@p1171 @p1213 @p1858 @p1203 @p1853) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1860 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t500 @t35 @t499) @t475)))
; trust TRUST_THEORY_REWRITE
(step @p1861 :rule trust :premises () :args ((= (ite @t31 false @t473) @t499)))
(step @p1862 :rule refl :args (@t473))
; trust TRUST_THEORY_REWRITE
(step @p1863 :rule trust :premises () :args ((= @t501 false)))
(step @p1864 :rule cong :premises (@p1254 @p1863 @p1862) :args (ite))
(step @p1865 :rule trans :premises (@p1864 @p1861))
; trust TRUST_THEORY_REWRITE
(step @p1866 :rule trust :premises () :args ((= (ite @t24 false @t474) @t500)))
(step @p1867 :rule refl :args (@t474))
; trust TRUST_THEORY_REWRITE
(step @p1868 :rule trust :premises () :args ((= @t502 false)))
(step @p1869 :rule cong :premises (@p1200 @p1868 @p1867) :args (ite))
(step @p1870 :rule trans :premises (@p1869 @p1866))
(step @p1871 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1870 @p1185 @p1865) :args (and))
(step @p1872 :rule trans :premises (@p1871 @p1860))
; trust TRUST_THEORY_REWRITE
(step @p1873 :rule trust :premises () :args ((= (and @t468 @t22 @t25 @t503) @t477)))
; trust TRUST_THEORY_REWRITE
(step @p1874 :rule trust :premises () :args ((= (ite @t24 false @t476) @t503)))
(step @p1875 :rule refl :args (@t476))
(step @p1876 :rule cong :premises (@p1200 @p1863 @p1875) :args (ite))
(step @p1877 :rule trans :premises (@p1876 @p1874))
(step @p1878 :rule nary_cong :premises (@p1847 @p1171 @p1203 @p1877) :args (and))
(step @p1879 :rule trans :premises (@p1878 @p1873))
; trust TRUST_THEORY_REWRITE
(step @p1880 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t503 @t35 @t479) @t480)))
; trust TRUST_THEORY_REWRITE
(step @p1881 :rule trust :premises () :args ((= (ite @t31 true @t478) @t479)))
(step @p1882 :rule refl :args (@t478))
(step @p1883 :rule cong :premises (@p1254 @p1851 @p1882) :args (ite))
(step @p1884 :rule trans :premises (@p1883 @p1881))
(step @p1885 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1877 @p1185 @p1884) :args (and))
(step @p1886 :rule trans :premises (@p1885 @p1880))
; trust TRUST_THEORY_REWRITE
(step @p1887 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t505 @t35 @t504) @t483)))
; trust TRUST_THEORY_REWRITE
(step @p1888 :rule trust :premises () :args ((= (ite @t31 false @t481) @t504)))
(step @p1889 :rule refl :args (@t481))
(step @p1890 :rule cong :premises (@p1254 @p1868 @p1889) :args (ite))
(step @p1891 :rule trans :premises (@p1890 @p1888))
; trust TRUST_THEORY_REWRITE
(step @p1892 :rule trust :premises () :args ((= (ite @t24 false @t482) @t505)))
(step @p1893 :rule refl :args (@t482))
; trust TRUST_THEORY_REWRITE
(step @p1894 :rule trust :premises () :args ((= @t506 false)))
(step @p1895 :rule cong :premises (@p1200 @p1894 @p1893) :args (ite))
(step @p1896 :rule trans :premises (@p1895 @p1892))
(step @p1897 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1896 @p1185 @p1891) :args (and))
(step @p1898 :rule trans :premises (@p1897 @p1887))
; trust TRUST_THEORY_REWRITE
(step @p1899 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t507 @t35 @t499) @t485)))
; trust TRUST_THEORY_REWRITE
(step @p1900 :rule trust :premises () :args ((= (ite @t24 false @t484) @t507)))
(step @p1901 :rule refl :args (@t484))
; trust TRUST_THEORY_REWRITE
(step @p1902 :rule trust :premises () :args ((= @t508 false)))
(step @p1903 :rule cong :premises (@p1200 @p1902 @p1901) :args (ite))
(step @p1904 :rule trans :premises (@p1903 @p1900))
(step @p1905 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1904 @p1185 @p1865) :args (and))
(step @p1906 :rule trans :premises (@p1905 @p1899))
; trust TRUST_THEORY_REWRITE
(step @p1907 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t510 @t35 @t509) @t488)))
; trust TRUST_THEORY_REWRITE
(step @p1908 :rule trust :premises () :args ((= (ite @t31 false @t486) @t509)))
(step @p1909 :rule refl :args (@t486))
(step @p1910 :rule cong :premises (@p1254 @p1894 @p1909) :args (ite))
(step @p1911 :rule trans :premises (@p1910 @p1908))
; trust TRUST_THEORY_REWRITE
(step @p1912 :rule trust :premises () :args ((= (ite @t24 false @t487) @t510)))
(step @p1913 :rule refl :args (@t487))
; trust TRUST_THEORY_REWRITE
(step @p1914 :rule trust :premises () :args ((= @t511 false)))
(step @p1915 :rule cong :premises (@p1200 @p1914 @p1913) :args (ite))
(step @p1916 :rule trans :premises (@p1915 @p1912))
(step @p1917 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1916 @p1185 @p1911) :args (and))
(step @p1918 :rule trans :premises (@p1917 @p1907))
; trust TRUST_THEORY_REWRITE
(step @p1919 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t510 @t35 @t512) @t490)))
; trust TRUST_THEORY_REWRITE
(step @p1920 :rule trust :premises () :args ((= (ite @t31 false @t489) @t512)))
(step @p1921 :rule refl :args (@t489))
(step @p1922 :rule cong :premises (@p1254 @p1902 @p1921) :args (ite))
(step @p1923 :rule trans :premises (@p1922 @p1920))
(step @p1924 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1916 @p1185 @p1923) :args (and))
(step @p1925 :rule trans :premises (@p1924 @p1919))
; trust TRUST_THEORY_REWRITE
(step @p1926 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t513 @t35 @t499) @t492)))
; trust TRUST_THEORY_REWRITE
(step @p1927 :rule trust :premises () :args ((= (ite @t24 false @t491) @t513)))
(step @p1928 :rule refl :args (@t491))
; trust TRUST_THEORY_REWRITE
(step @p1929 :rule trust :premises () :args ((= @t514 false)))
(step @p1930 :rule cong :premises (@p1200 @p1929 @p1928) :args (ite))
(step @p1931 :rule trans :premises (@p1930 @p1927))
(step @p1932 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1931 @p1185 @p1865) :args (and))
(step @p1933 :rule trans :premises (@p1932 @p1926))
; trust TRUST_THEORY_REWRITE
(step @p1934 :rule trust :premises () :args ((= (and @t22 @t27 @t25 @t513 @t35 @t515) @t494)))
; trust TRUST_THEORY_REWRITE
(step @p1935 :rule trust :premises () :args ((= (ite @t31 false @t493) @t515)))
(step @p1936 :rule refl :args (@t493))
(step @p1937 :rule cong :premises (@p1254 @p1914 @p1936) :args (ite))
(step @p1938 :rule trans :premises (@p1937 @p1935))
(step @p1939 :rule nary_cong :premises (@p1171 @p1213 @p1203 @p1931 @p1185 @p1938) :args (and))
(step @p1940 :rule trans :premises (@p1939 @p1934))
(step @p1941 :rule nary_cong :premises (@p1320 @p1940 @p1933 @p1925 @p1918 @p1906 @p1898 @p1886 @p1879 @p1872 @p1859 @p1848) :args (or))
(step @p1942 :rule cong :premises (@p1941) :args ((forall ((va V1) (vb V1)))))
(step @p1943 :rule trans :premises (@p1942 @p1832))
; trust TRUST_THEORY_REWRITE
(step @p1944 :rule trust :premises () :args ((= (forall @t4 (or @t53 @t550 @t548 @t546 @t544 @t541 @t539 @t536 @t534 @t532 @t529 (and @t525 @t22 @t522))) (forall @t4 (or @t53 (and @t22 @t27 @t25 @t520 @t35 (ite @t31 @t511 @t493)) (and @t22 @t27 @t25 @t520 @t35 @t517) (and @t22 @t27 @t25 @t519 @t35 (ite @t31 @t508 @t489)) (and @t22 @t27 @t25 @t519 @t35 (ite @t31 @t506 @t486)) (and @t22 @t27 @t25 (ite @t24 @t508 @t484) @t35 @t517) (and @t22 @t27 @t25 (ite @t24 @t506 @t482) @t35 (ite @t31 @t502 @t481)) (and @t22 @t27 @t25 @t518 @t35 (ite @t31 @t498 @t478)) (and @t516 @t22 @t25 @t518) (and @t22 @t27 @t25 (ite @t24 @t502 @t474) @t35 @t517) (and @t22 @t27 (or @t26 (ite @t31 @t495 @t471)) @t25 (ite @t24 @t498 @t469)) (and @t516 @t22 (or @t20 (ite @t24 @t495 @t464))))))))
(step @p1945 :rule trans :premises (@p1944 @p1943))
; trust TRUST_THEORY_REWRITE
(step @p1946 :rule trust :premises () :args ((= (ite @t20 true @t521) @t522)))
(step @p1947 :rule refl :args (@t521))
; trust TRUST_THEORY_REWRITE
(step @p1948 :rule trust :premises () :args ((= @t551 true)))
(step @p1949 :rule cong :premises (@p1168 @p1948 @p1947) :args (ite))
(step @p1950 :rule trans :premises (@p1949 @p1946))
; trust TRUST_THEORY_REWRITE
(step @p1951 :rule trust :premises () :args ((= (ite @t26 false @t523) @t524)))
(step @p1952 :rule refl :args (@t523))
; trust TRUST_THEORY_REWRITE
(step @p1953 :rule trust :premises () :args ((= @t552 false)))
(step @p1954 :rule cong :premises (@p1210 @p1953 @p1952) :args (ite))
(step @p1955 :rule trans :premises (@p1954 @p1951))
(step @p1956 :rule nary_cong :premises (@p1188 @p1955) :args (or))
(step @p1957 :rule nary_cong :premises (@p1956 @p1171 @p1950) :args (and))
; trust TRUST_THEORY_REWRITE
(step @p1958 :rule trust :premises () :args ((= (and @t22 @t553 @t27 @t528) @t529)))
; trust TRUST_THEORY_REWRITE
(step @p1959 :rule trust :premises () :args ((= (ite @t26 true @t527) @t528)))
(step @p1960 :rule refl :args (@t527))
(step @p1961 :rule cong :premises (@p1210 @p1948 @p1960) :args (ite))
(step @p1962 :rule trans :premises (@p1961 @p1959))
; trust TRUST_THEORY_REWRITE
(step @p1963 :rule trust :premises () :args ((= (ite @t20 false @t526) @t553)))
(step @p1964 :rule refl :args (@t526))
; trust TRUST_THEORY_REWRITE
(step @p1965 :rule trust :premises () :args ((= @t554 false)))
(step @p1966 :rule cong :premises (@p1168 @p1965 @p1964) :args (ite))
(step @p1967 :rule trans :premises (@p1966 @p1963))
(step @p1968 :rule nary_cong :premises (@p1171 @p1967 @p1213 @p1962) :args (and))
(step @p1969 :rule trans :premises (@p1968 @p1958))
; trust TRUST_THEORY_REWRITE
(step @p1970 :rule trust :premises () :args ((= (and @t22 @t556 @t27 @t555) @t532)))
; trust TRUST_THEORY_REWRITE
(step @p1971 :rule trust :premises () :args ((= (ite @t26 false @t530) @t555)))
(step @p1972 :rule refl :args (@t530))
; trust TRUST_THEORY_REWRITE
(step @p1973 :rule trust :premises () :args ((= @t557 false)))
(step @p1974 :rule cong :premises (@p1210 @p1973 @p1972) :args (ite))
(step @p1975 :rule trans :premises (@p1974 @p1971))
; trust TRUST_THEORY_REWRITE
(step @p1976 :rule trust :premises () :args ((= (ite @t20 false @t531) @t556)))
(step @p1977 :rule refl :args (@t531))
; trust TRUST_THEORY_REWRITE
(step @p1978 :rule trust :premises () :args ((= @t558 false)))
(step @p1979 :rule cong :premises (@p1168 @p1978 @p1977) :args (ite))
(step @p1980 :rule trans :premises (@p1979 @p1976))
(step @p1981 :rule nary_cong :premises (@p1171 @p1980 @p1213 @p1975) :args (and))
(step @p1982 :rule trans :premises (@p1981 @p1970))
; trust TRUST_THEORY_REWRITE
(step @p1983 :rule trust :premises () :args ((= (and @t525 @t22 @t559) @t534)))
; trust TRUST_THEORY_REWRITE
(step @p1984 :rule trust :premises () :args ((= (ite @t20 false @t533) @t559)))
(step @p1985 :rule refl :args (@t533))
(step @p1986 :rule cong :premises (@p1168 @p1973 @p1985) :args (ite))
(step @p1987 :rule trans :premises (@p1986 @p1984))
(step @p1988 :rule nary_cong :premises (@p1956 @p1171 @p1987) :args (and))
(step @p1989 :rule trans :premises (@p1988 @p1983))
; trust TRUST_THEORY_REWRITE
(step @p1990 :rule trust :premises () :args ((= (and @t22 @t559 @t27 @t560) @t536)))
; trust TRUST_THEORY_REWRITE
(step @p1991 :rule trust :premises () :args ((= (ite @t26 false @t535) @t560)))
(step @p1992 :rule refl :args (@t535))
(step @p1993 :rule cong :premises (@p1210 @p1965 @p1992) :args (ite))
(step @p1994 :rule trans :premises (@p1993 @p1991))
(step @p1995 :rule nary_cong :premises (@p1171 @p1987 @p1213 @p1994) :args (and))
(step @p1996 :rule trans :premises (@p1995 @p1990))
; trust TRUST_THEORY_REWRITE
(step @p1997 :rule trust :premises () :args ((= (and @t22 @t562 @t27 @t561) @t539)))
; trust TRUST_THEORY_REWRITE
(step @p1998 :rule trust :premises () :args ((= (ite @t26 false @t537) @t561)))
(step @p1999 :rule refl :args (@t537))
(step @p2000 :rule cong :premises (@p1210 @p1978 @p1999) :args (ite))
(step @p2001 :rule trans :premises (@p2000 @p1998))
; trust TRUST_THEORY_REWRITE
(step @p2002 :rule trust :premises () :args ((= (ite @t20 false @t538) @t562)))
(step @p2003 :rule refl :args (@t538))
; trust TRUST_THEORY_REWRITE
(step @p2004 :rule trust :premises () :args ((= @t563 false)))
(step @p2005 :rule cong :premises (@p1168 @p2004 @p2003) :args (ite))
(step @p2006 :rule trans :premises (@p2005 @p2002))
(step @p2007 :rule nary_cong :premises (@p1171 @p2006 @p1213 @p2001) :args (and))
(step @p2008 :rule trans :premises (@p2007 @p1997))
; trust TRUST_THEORY_REWRITE
(step @p2009 :rule trust :premises () :args ((= (and @t22 @t564 @t27 @t555) @t541)))
; trust TRUST_THEORY_REWRITE
(step @p2010 :rule trust :premises () :args ((= (ite @t20 false @t540) @t564)))
(step @p2011 :rule refl :args (@t540))
; trust TRUST_THEORY_REWRITE
(step @p2012 :rule trust :premises () :args ((= @t565 false)))
(step @p2013 :rule cong :premises (@p1168 @p2012 @p2011) :args (ite))
(step @p2014 :rule trans :premises (@p2013 @p2010))
(step @p2015 :rule nary_cong :premises (@p1171 @p2014 @p1213 @p1975) :args (and))
(step @p2016 :rule trans :premises (@p2015 @p2009))
; trust TRUST_THEORY_REWRITE
(step @p2017 :rule trust :premises () :args ((= (and @t22 @t567 @t27 @t566) @t544)))
; trust TRUST_THEORY_REWRITE
(step @p2018 :rule trust :premises () :args ((= (ite @t26 false @t542) @t566)))
(step @p2019 :rule refl :args (@t542))
(step @p2020 :rule cong :premises (@p1210 @p2004 @p2019) :args (ite))
(step @p2021 :rule trans :premises (@p2020 @p2018))
; trust TRUST_THEORY_REWRITE
(step @p2022 :rule trust :premises () :args ((= (ite @t20 false @t543) @t567)))
(step @p2023 :rule refl :args (@t543))
; trust TRUST_THEORY_REWRITE
(step @p2024 :rule trust :premises () :args ((= @t568 false)))
(step @p2025 :rule cong :premises (@p1168 @p2024 @p2023) :args (ite))
(step @p2026 :rule trans :premises (@p2025 @p2022))
(step @p2027 :rule nary_cong :premises (@p1171 @p2026 @p1213 @p2021) :args (and))
(step @p2028 :rule trans :premises (@p2027 @p2017))
; trust TRUST_THEORY_REWRITE
(step @p2029 :rule trust :premises () :args ((= (and @t22 @t567 @t27 @t569) @t546)))
; trust TRUST_THEORY_REWRITE
(step @p2030 :rule trust :premises () :args ((= (ite @t26 false @t545) @t569)))
(step @p2031 :rule refl :args (@t545))
(step @p2032 :rule cong :premises (@p1210 @p2012 @p2031) :args (ite))
(step @p2033 :rule trans :premises (@p2032 @p2030))
(step @p2034 :rule nary_cong :premises (@p1171 @p2026 @p1213 @p2033) :args (and))
(step @p2035 :rule trans :premises (@p2034 @p2029))
; trust TRUST_THEORY_REWRITE
(step @p2036 :rule trust :premises () :args ((= (and @t22 @t570 @t27 @t555) @t548)))
; trust TRUST_THEORY_REWRITE
(step @p2037 :rule trust :premises () :args ((= (ite @t20 false @t547) @t570)))
(step @p2038 :rule refl :args (@t547))
; trust TRUST_THEORY_REWRITE
(step @p2039 :rule trust :premises () :args ((= @t571 false)))
(step @p2040 :rule cong :premises (@p1168 @p2039 @p2038) :args (ite))
(step @p2041 :rule trans :premises (@p2040 @p2037))
(step @p2042 :rule nary_cong :premises (@p1171 @p2041 @p1213 @p1975) :args (and))
(step @p2043 :rule trans :premises (@p2042 @p2036))
; trust TRUST_THEORY_REWRITE
(step @p2044 :rule trust :premises () :args ((= (and @t22 @t570 @t27 @t572) @t550)))
; trust TRUST_THEORY_REWRITE
(step @p2045 :rule trust :premises () :args ((= (ite @t26 false @t549) @t572)))
(step @p2046 :rule refl :args (@t549))
(step @p2047 :rule cong :premises (@p1210 @p2024 @p2046) :args (ite))
(step @p2048 :rule trans :premises (@p2047 @p2045))
(step @p2049 :rule nary_cong :premises (@p1171 @p2041 @p1213 @p2048) :args (and))
(step @p2050 :rule trans :premises (@p2049 @p2044))
(step @p2051 :rule nary_cong :premises (@p1320 @p2050 @p2043 @p2035 @p2028 @p2016 @p2008 @p1996 @p1989 @p1982 @p1969 @p1957) :args (or))
(step @p2052 :rule cong :premises (@p2051) :args ((forall ((va V1) (vb V1)))))
(step @p2053 :rule trans :premises (@p2052 @p1945))
; trust TRUST_THEORY_REWRITE
(step @p2054 :rule trust :premises () :args ((= (forall @t4 (or @t53 @t605 @t603 @t601 @t599 @t596 @t594 @t591 @t589 @t587 @t584 @t581)) (forall @t4 (or @t53 (and @t22 @t577 @t27 (ite @t26 @t568 @t549)) (and @t22 @t577 @t27 @t574) (and @t22 @t576 @t27 (ite @t26 @t565 @t545)) (and @t22 @t576 @t27 (ite @t26 @t563 @t542)) (and @t22 (ite @t20 @t565 @t540) @t27 @t574) (and @t22 (ite @t20 @t563 @t538) @t27 (ite @t26 @t558 @t537)) (and @t22 @t575 @t27 (ite @t26 @t554 @t535)) (and @t573 @t22 @t575) (and @t22 (ite @t20 @t558 @t531) @t27 @t574) (and @t22 (ite @t20 @t554 @t526) @t27 (ite @t26 @t551 @t527)) (and @t573 @t22 (ite @t20 @t551 @t521)))))))
(step @p2055 :rule trans :premises (@p2054 @p2053))
; trust TRUST_THEORY_REWRITE
(step @p2056 :rule trust :premises () :args ((= (and @t606 @t580) @t581)))
; trust TRUST_THEORY_REWRITE
(step @p2057 :rule trust :premises () :args ((= (ite @t23 true @t579) @t580)))
(step @p2058 :rule refl :args (@t579))
; trust TRUST_THEORY_REWRITE
(step @p2059 :rule trust :premises () :args ((= @t607 true)))
(step @p2060 :rule cong :premises (@p1188 @p2059 @p2058) :args (ite))
(step @p2061 :rule trans :premises (@p2060 @p2057))
; trust TRUST_THEORY_REWRITE
(step @p2062 :rule trust :premises () :args ((= (ite @t21 false @t578) @t606)))
(step @p2063 :rule refl :args (@t578))
; trust TRUST_THEORY_REWRITE
(step @p2064 :rule trust :premises () :args ((= @t608 false)))
(step @p2065 :rule refl :args (@t21))
(step @p2066 :rule cong :premises (@p2065 @p2064 @p2063) :args (ite))
(step @p2067 :rule trans :premises (@p2066 @p2062))
(step @p2068 :rule nary_cong :premises (@p2067 @p2061) :args (and))
(step @p2069 :rule trans :premises (@p2068 @p2056))
; trust TRUST_THEORY_REWRITE
(step @p2070 :rule trust :premises () :args ((= (and @t610 @t609) @t584)))
; trust TRUST_THEORY_REWRITE
(step @p2071 :rule trust :premises () :args ((= (ite @t23 false @t582) @t609)))
(step @p2072 :rule refl :args (@t582))
(step @p2073 :rule cong :premises (@p1188 @p2064 @p2072) :args (ite))
(step @p2074 :rule trans :premises (@p2073 @p2071))
; trust TRUST_THEORY_REWRITE
(step @p2075 :rule trust :premises () :args ((= (ite @t21 false @t583) @t610)))
(step @p2076 :rule refl :args (@t583))
; trust TRUST_THEORY_REWRITE
(step @p2077 :rule trust :premises () :args ((= @t611 false)))
(step @p2078 :rule cong :premises (@p2065 @p2077 @p2076) :args (ite))
(step @p2079 :rule trans :premises (@p2078 @p2075))
(step @p2080 :rule nary_cong :premises (@p2079 @p2074) :args (and))
(step @p2081 :rule trans :premises (@p2080 @p2070))
; trust TRUST_THEORY_REWRITE
(step @p2082 :rule trust :premises () :args ((= (and @t613 @t612) @t587)))
; trust TRUST_THEORY_REWRITE
(step @p2083 :rule trust :premises () :args ((= (ite @t23 false @t585) @t612)))
(step @p2084 :rule refl :args (@t585))
; trust TRUST_THEORY_REWRITE
(step @p2085 :rule trust :premises () :args ((= @t614 false)))
(step @p2086 :rule cong :premises (@p1188 @p2085 @p2084) :args (ite))
(step @p2087 :rule trans :premises (@p2086 @p2083))
; trust TRUST_THEORY_REWRITE
(step @p2088 :rule trust :premises () :args ((= (ite @t21 false @t586) @t613)))
(step @p2089 :rule refl :args (@t586))
; trust TRUST_THEORY_REWRITE
(step @p2090 :rule trust :premises () :args ((= @t615 false)))
(step @p2091 :rule cong :premises (@p2065 @p2090 @p2089) :args (ite))
(step @p2092 :rule trans :premises (@p2091 @p2088))
(step @p2093 :rule nary_cong :premises (@p2092 @p2087) :args (and))
(step @p2094 :rule trans :premises (@p2093 @p2082))
; trust TRUST_THEORY_REWRITE
(step @p2095 :rule trust :premises () :args ((= (and @t616 @t580) @t589)))
; trust TRUST_THEORY_REWRITE
(step @p2096 :rule trust :premises () :args ((= (ite @t21 false @t588) @t616)))
(step @p2097 :rule refl :args (@t588))
(step @p2098 :rule cong :premises (@p2065 @p2085 @p2097) :args (ite))
(step @p2099 :rule trans :premises (@p2098 @p2096))
(step @p2100 :rule nary_cong :premises (@p2099 @p2061) :args (and))
(step @p2101 :rule trans :premises (@p2100 @p2095))
; trust TRUST_THEORY_REWRITE
(step @p2102 :rule trust :premises () :args ((= (and @t616 @t617) @t591)))
; trust TRUST_THEORY_REWRITE
(step @p2103 :rule trust :premises () :args ((= (ite @t23 false @t590) @t617)))
(step @p2104 :rule refl :args (@t590))
(step @p2105 :rule cong :premises (@p1188 @p2077 @p2104) :args (ite))
(step @p2106 :rule trans :premises (@p2105 @p2103))
(step @p2107 :rule nary_cong :premises (@p2099 @p2106) :args (and))
(step @p2108 :rule trans :premises (@p2107 @p2102))
; trust TRUST_THEORY_REWRITE
(step @p2109 :rule trust :premises () :args ((= (and @t619 @t618) @t594)))
; trust TRUST_THEORY_REWRITE
(step @p2110 :rule trust :premises () :args ((= (ite @t23 false @t592) @t618)))
(step @p2111 :rule refl :args (@t592))
(step @p2112 :rule cong :premises (@p1188 @p2090 @p2111) :args (ite))
(step @p2113 :rule trans :premises (@p2112 @p2110))
; trust TRUST_THEORY_REWRITE
(step @p2114 :rule trust :premises () :args ((= (ite @t21 false @t593) @t619)))
(step @p2115 :rule refl :args (@t593))
; trust TRUST_THEORY_REWRITE
(step @p2116 :rule trust :premises () :args ((= @t620 false)))
(step @p2117 :rule cong :premises (@p2065 @p2116 @p2115) :args (ite))
(step @p2118 :rule trans :premises (@p2117 @p2114))
(step @p2119 :rule nary_cong :premises (@p2118 @p2113) :args (and))
(step @p2120 :rule trans :premises (@p2119 @p2109))
; trust TRUST_THEORY_REWRITE
(step @p2121 :rule trust :premises () :args ((= (and @t621 @t612) @t596)))
; trust TRUST_THEORY_REWRITE
(step @p2122 :rule trust :premises () :args ((= (ite @t21 false @t595) @t621)))
(step @p2123 :rule refl :args (@t595))
; trust TRUST_THEORY_REWRITE
(step @p2124 :rule trust :premises () :args ((= @t622 false)))
(step @p2125 :rule cong :premises (@p2065 @p2124 @p2123) :args (ite))
(step @p2126 :rule trans :premises (@p2125 @p2122))
(step @p2127 :rule nary_cong :premises (@p2126 @p2087) :args (and))
(step @p2128 :rule trans :premises (@p2127 @p2121))
; trust TRUST_THEORY_REWRITE
(step @p2129 :rule trust :premises () :args ((= (and @t624 @t623) @t599)))
; trust TRUST_THEORY_REWRITE
(step @p2130 :rule trust :premises () :args ((= (ite @t23 false @t597) @t623)))
(step @p2131 :rule refl :args (@t597))
(step @p2132 :rule cong :premises (@p1188 @p2116 @p2131) :args (ite))
(step @p2133 :rule trans :premises (@p2132 @p2130))
; trust TRUST_THEORY_REWRITE
(step @p2134 :rule trust :premises () :args ((= (ite @t21 false @t598) @t624)))
(step @p2135 :rule refl :args (@t598))
; trust TRUST_THEORY_REWRITE
(step @p2136 :rule trust :premises () :args ((= @t625 false)))
(step @p2137 :rule cong :premises (@p2065 @p2136 @p2135) :args (ite))
(step @p2138 :rule trans :premises (@p2137 @p2134))
(step @p2139 :rule nary_cong :premises (@p2138 @p2133) :args (and))
(step @p2140 :rule trans :premises (@p2139 @p2129))
; trust TRUST_THEORY_REWRITE
(step @p2141 :rule trust :premises () :args ((= (and @t624 @t626) @t601)))
; trust TRUST_THEORY_REWRITE
(step @p2142 :rule trust :premises () :args ((= (ite @t23 false @t600) @t626)))
(step @p2143 :rule refl :args (@t600))
(step @p2144 :rule cong :premises (@p1188 @p2124 @p2143) :args (ite))
(step @p2145 :rule trans :premises (@p2144 @p2142))
(step @p2146 :rule nary_cong :premises (@p2138 @p2145) :args (and))
(step @p2147 :rule trans :premises (@p2146 @p2141))
; trust TRUST_THEORY_REWRITE
(step @p2148 :rule trust :premises () :args ((= (and @t627 @t612) @t603)))
; trust TRUST_THEORY_REWRITE
(step @p2149 :rule trust :premises () :args ((= (ite @t21 false @t602) @t627)))
(step @p2150 :rule refl :args (@t602))
; trust TRUST_THEORY_REWRITE
(step @p2151 :rule trust :premises () :args ((= @t628 false)))
(step @p2152 :rule cong :premises (@p2065 @p2151 @p2150) :args (ite))
(step @p2153 :rule trans :premises (@p2152 @p2149))
(step @p2154 :rule nary_cong :premises (@p2153 @p2087) :args (and))
(step @p2155 :rule trans :premises (@p2154 @p2148))
; trust TRUST_THEORY_REWRITE
(step @p2156 :rule trust :premises () :args ((= (and @t627 @t629) @t605)))
; trust TRUST_THEORY_REWRITE
(step @p2157 :rule trust :premises () :args ((= (ite @t23 false @t604) @t629)))
(step @p2158 :rule refl :args (@t604))
(step @p2159 :rule cong :premises (@p1188 @p2136 @p2158) :args (ite))
(step @p2160 :rule trans :premises (@p2159 @p2157))
(step @p2161 :rule nary_cong :premises (@p2153 @p2160) :args (and))
(step @p2162 :rule trans :premises (@p2161 @p2156))
(step @p2163 :rule nary_cong :premises (@p1320 @p2162 @p2155 @p2147 @p2140 @p2128 @p2120 @p2108 @p2101 @p2094 @p2081 @p2069) :args (or))
(step @p2164 :rule cong :premises (@p2163) :args ((forall ((va V1) (vb V1)))))
(step @p2165 :rule trans :premises (@p2164 @p2055))
; trust TRUST_THEORY_REWRITE
(step @p2166 :rule trust :premises () :args ((= @t651 (forall @t4 (or @t53 (and @t634 (ite @t23 @t625 @t604)) (and @t634 @t631) (and @t633 (ite @t23 @t622 @t600)) (and @t633 (ite @t23 @t620 @t597)) (and (ite @t21 @t622 @t595) @t631) (and (ite @t21 @t620 @t593) (ite @t23 @t615 @t592)) (and @t632 (ite @t23 @t611 @t590)) (and @t632 @t630) (and (ite @t21 @t615 @t586) @t631) (and (ite @t21 @t611 @t583) (ite @t23 @t608 @t582)) (and (ite @t21 @t608 @t578) @t630))))))
(step @p2167 :rule trans :premises (@p2166 @p2165))
; trust TRUST_THEORY_REWRITE
(step @p2168 :rule trust :premises () :args ((= (forall @t4 (=> @t653 @t652)) @t651)))
(step @p2169 :rule trans :premises (@p2168 @p2167))
; trust TRUST_THEORY_REWRITE
(step @p2170 :rule trust :premises () :args ((= @t659 @t652)))
; trust TRUST_THEORY_REWRITE
(step @p2171 :rule trust :premises () :args ((= (_ @t18 @t176 @t168) @t659)))
(step @p2172 :rule trans :premises (@p2171 @p2170))
(step @p2173 :rule cong :premises (@p1148 @p1128) :args (@t18))
(step @p2174 :rule trans :premises (@p2173 @p2172))
; trust TRUST_THEORY_REWRITE
(step @p2175 :rule trust :premises () :args ((= @t665 @t653)))
; trust TRUST_THEORY_REWRITE
(step @p2176 :rule trust :premises () :args ((= (_ @t11 @v.0.va @v.0.vb) @t665)))
(step @p2177 :rule trans :premises (@p2176 @p2175))
(step @p2178 :rule cong :premises (@p2177 @p2174) :args (=>))
(step @p2179 :rule cong :premises (@p2178) :args ((forall ((va V1) (vb V1)))))
(step @p2180 :rule trans :premises (@p2179 @p2169))
(step @p2181 :rule nary_cong :premises (@p2180 @p1152) :args (and))
(step @p2182 :rule cong :premises (@p2181) :args (not))
(step @p2183 :rule refl :args (@v.0.vb))
(step @p2184 :rule ho_cong :premises (@p4 @p2183))
(step @p2185 :rule refl :args (@v.0.va))
(step @p2186 :rule ho_cong :premises (@p4 @p2185))
(step @p2187 :rule cong :premises (@p2186 @p2184) :args (=))
(step @p2188 :rule cong :premises (@p2187 @p1099) :args (=>))
(step @p2189 :rule cong :premises (@p2188) :args ((forall ((va V1) (vb V1)))))
(step @p2190 :rule ho_cong :premises (@p3 @p2186 @p2184))
(step @p2191 :rule ho_cong :premises (@p2 @p2185 @p2183))
(step @p2192 :rule cong :premises (@p2191 @p2190) :args (=>))
(step @p2193 :rule cong :premises (@p2192) :args ((forall ((va V1) (vb V1)))))
(step @p2194 :rule nary_cong :premises (@p2193 @p2189) :args (and))
(step @p2195 :rule cong :premises (@p2194) :args (not))
(step @p2196 :rule trans :premises (@p2195 @p2182))
(step @p2197 :rule eq_resolve :premises (@p1 @p2196))
(step @p2198 :rule not_and :premises (@p2197))
(step @p2199 :rule chain_resolution :premises (@p2198 @p1097) :args (@t150 (@list @t54)))
(step @p2200 :rule refl :args ((not @t705)))
; trust TRUST_THEORY_REWRITE
(step @p2201 :rule trust :premises () :args ((= (not @t706) @t178)))
(step @p2202 :rule nary_cong :premises (@p2201 @p2200) :args (or))
(step @p2203 :rule refl :args (@t668))
; trust TRUST_THEORY_REWRITE
(step @p2204 :rule trust :premises () :args ((= (= @t685 @t702) @t703)))
; trust TRUST_THEORY_REWRITE
(step @p2205 :rule trust :premises () :args ((= (= @t701 @t701) true)))
(step @p2206 :rule skolem_intro :args (@t702))
(step @p2207 :rule refl :args (@t701))
(step @p2208 :rule cong :premises (@p2207 @p2206) :args (=))
(step @p2209 :rule refl :args ((= @t701 @t702)))
(step @p2210 :rule trans :premises (@p2209 @p2208 @p2205))
(step @p2211 :rule true_elim :premises (@p2210))
; trust TRUST_THEORY_REWRITE
(step @p2212 :rule trust :premises () :args ((= (= @t684 @t684) true)))
(step @p2213 :rule skolem_intro :args (@t685))
(step @p2214 :rule refl :args (@t684))
(step @p2215 :rule cong :premises (@p2214 @p2213) :args (=))
(step @p2216 :rule refl :args ((= @t684 @t685)))
(step @p2217 :rule trans :premises (@p2216 @p2215 @p2212))
(step @p2218 :rule true_elim :premises (@p2217))
(step @p2219 :rule cong :premises (@p2218 @p2211) :args (=))
(step @p2220 :rule trans :premises (@p2219 @p2204))
(step @p2221 :rule cong :premises (@p2220) :args (not))
(step @p2222 :rule nary_cong :premises (@p2221 @p2203) :args (or))
(step @p2223 :rule cong :premises (@p2222) :args (not))
(step @p2224 :rule refl :args (@t706))
(step @p2225 :rule cong :premises (@p2224 @p2223) :args (=>))
(assume-push @p7909 @t706)
(step @p2227 :rule skolemize :premises (@p7909))
(step-pop @p7909 :rule scope :premises (@p2227))
(step @p2228 :rule process_scope :premises (@p7909) :args ((not (or (not (= @t684 @t701)) @t668))))
(step @p2230 :rule eq_resolve :premises (@p2228 @p2225))
(step @p2231 :rule implies_elim :premises (@p2230))
(step @p2232 :rule eq_resolve :premises (@p2231 @p2202))
(step @p2233 :rule chain_resolution :premises (@p2232 @p2199) :args (@t155 (@list @t178)))
(step @p2234 :rule cnf_or_neg :args (@t705 1))
(step @p2235 :rule chain_resolution :premises (@p2234 @p2233) :args (@t155 @t707))
; trust TRUST_THEORY_REWRITE
(step @p2236 :rule trust :premises () :args ((= (= @t708 V2_main) @t709)))
; trust TRUST_THEORY_REWRITE
(step @p2237 :rule trust :premises () :args ((= (= @t708 V2_get_greet) @t710)))
(step @p2238 :rule refl :args (@t686))
(step @p2239 :rule cong :premises (@p2238 @p2237 @p2236) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p2240 :rule trust :premises () :args ((= (= @t687 @t687) true)))
(step @p2241 :rule skolem_intro :args (@t708))
(step @p2242 :rule refl :args (@t687))
(step @p2243 :rule cong :premises (@p2242 @p2241) :args (=))
(step @p2244 :rule refl :args ((= @t687 @t708)))
(step @p2245 :rule trans :premises (@p2244 @p2243 @p2240))
(step @p2246 :rule true_elim :premises (@p2245))
(step @p2247 :rule cong :premises (@p2246 @p1100) :args (=))
(step @p2248 :rule cong :premises (@p2246 @p1101) :args (=))
(step @p2249 :rule cong :premises (@p2238 @p2248 @p2247) :args (ite))
(step @p2250 :rule ite_eq :args (@t687))
(step @p2251 :rule eq_resolve :premises (@p2250 @p2249))
(step @p2252 :rule eq_resolve :premises (@p2251 @p2239))
(step @p2253 :rule ite_elim1 :premises (@p2252))
(step @p2254 :rule reordering :premises (@p2253) :args ((or @t710 @t711)))
; trust TRUST_THEORY_REWRITE
(step @p2255 :rule trust :premises () :args ((= (not @t704) @t703)))
(step @p2256 :rule refl :args (@t705))
(step @p2257 :rule nary_cong :premises (@p2256 @p2255) :args (or))
(step @p2258 :rule cnf_or_neg :args (@t705 0))
(step @p2259 :rule eq_resolve :premises (@p2258 @p2257))
(step @p2260 :rule reordering :premises (@p2259) :args ((or @t703 @t705)))
(step @p2261 :rule chain_resolution :premises (@p2260 @p2233) :args (@t155 @t707))
; trust TRUST_THEORY_REWRITE
(step @p2262 :rule trust :premises () :args ((= (= @t712 @t702) @t713)))
(step @p2263 :rule refl :args (@t702))
; trust TRUST_THEORY_REWRITE
(step @p2264 :rule trust :premises () :args ((= (= @t699 @t699) true)))
(step @p2265 :rule skolem_intro :args (@t712))
(step @p2266 :rule refl :args (@t699))
(step @p2267 :rule cong :premises (@p2266 @p2265) :args (=))
(step @p2268 :rule refl :args ((= @t699 @t712)))
(step @p2269 :rule trans :premises (@p2268 @p2267 @p2264))
(step @p2270 :rule true_elim :premises (@p2269))
(step @p2271 :rule cong :premises (@p2270 @p2263) :args (=))
(step @p2272 :rule trans :premises (@p2271 @p2262))
(step @p2273 :rule refl :args (@t714))
(step @p2274 :rule refl :args (@t700))
(step @p2275 :rule cong :premises (@p2274 @p2273 @p2272) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p2276 :rule trust :premises () :args ((= (= @t702 @t699) (= @t699 @t702))))
; trust TRUST_THEORY_REWRITE
(step @p2277 :rule trust :premises () :args ((= (= @t702 V2_main+0x3f) @t714)))
(step @p2278 :rule cong :premises (@p2274 @p2277 @p2276) :args (ite))
(step @p2279 :rule trans :premises (@p2278 @p2275))
(step @p2280 :rule cong :premises (@p2211 @p2266) :args (=))
(step @p2281 :rule cong :premises (@p2211 @p1122) :args (=))
(step @p2282 :rule cong :premises (@p2274 @p2281 @p2280) :args (ite))
(step @p2283 :rule ite_eq :args (@t701))
(step @p2284 :rule eq_resolve :premises (@p2283 @p2282))
(step @p2285 :rule eq_resolve :premises (@p2284 @p2279))
(step @p2286 :rule ite_elim1 :premises (@p2285))
(step @p2287 :rule reordering :premises (@p2286) :args ((or @t714 @t715)))
; trust TRUST_THEORY_REWRITE
(step @p2288 :rule trust :premises () :args ((= (not @t716) @t668)))
(step @p2289 :rule refl :args (@t715))
(step @p2290 :rule refl :args (@t717))
(step @p2291 :rule nary_cong :premises (@p2290 @p2289 @p2288) :args (or))
(assume-push @p7911 @t700)
(assume-push @p7912 @t683)
(assume-push @p7913 @t716)
; trust TRUST_THEORY_REWRITE
(step @p2295 :rule trust :premises () :args (@t718))
(step @p2296 :rule symm :premises (@p7911))
(step @p2297 :rule symm :premises (@p2296))
(step @p2298 :rule symm :premises (@p7912))
(step @p2299 :rule trans :premises (@p2298 @p2297))
(step @p2300 :rule true_intro :premises (@p2299))
(step @p2301 :rule false_intro :premises (@p7913))
(step @p2302 :rule symm :premises (@p2301))
(step @p2303 :rule trans :premises (@p2302 @p2300))
(step @p2304 false :rule eq_resolve :premises (@p2303 @p2295))
(step-pop @p7913 :rule scope :premises (@p2304))
(step-pop @p7914 :rule scope :premises (@p7913))
(step-pop @p7915 :rule scope :premises (@p7914))
(step @p2305 :rule process_scope :premises (@p7915) :args (false))
(assume-push @p7917 @t683)
(assume-push @p7918 @t700)
(assume-push @p7919 @t716)
(step @p2312 :rule and_intro :premises (@p7918 @p7917 @p7919))
(step-pop @p7919 :rule scope :premises (@p2312))
(step-pop @p7920 :rule scope :premises (@p7919))
(step-pop @p7921 :rule scope :premises (@p7920))
(step @p2313 :rule process_scope :premises (@p7921) :args (@t719))
(step @p2317 :rule implies_elim :premises (@p2313))
(step @p2318 :rule resolution :premises (@p2317 @p2305) :args (true @t719))
(step @p2319 :rule not_and :premises (@p2318))
(step @p2320 :rule eq_resolve :premises (@p2319 @p2291))
(step @p2321 :rule reordering :premises (@p2320) :args ((or @t668 @t715 @t717)))
; trust TRUST_THEORY_REWRITE
(step @p2322 :rule trust :premises () :args ((= (= @t720 @t685) @t721)))
(step @p2323 :rule refl :args (@t685))
; trust TRUST_THEORY_REWRITE
(step @p2324 :rule trust :premises () :args ((= (= @t682 @t682) true)))
(step @p2325 :rule skolem_intro :args (@t720))
(step @p2326 :rule refl :args (@t682))
(step @p2327 :rule cong :premises (@p2326 @p2325) :args (=))
(step @p2328 :rule refl :args ((= @t682 @t720)))
(step @p2329 :rule trans :premises (@p2328 @p2327 @p2324))
(step @p2330 :rule true_elim :premises (@p2329))
(step @p2331 :rule cong :premises (@p2330 @p2323) :args (=))
(step @p2332 :rule trans :premises (@p2331 @p2322))
(step @p2333 :rule refl :args (@t722))
(step @p2334 :rule refl :args (@t683))
(step @p2335 :rule cong :premises (@p2334 @p2333 @p2332) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p2336 :rule trust :premises () :args ((= (= @t685 @t682) (= @t682 @t685))))
; trust TRUST_THEORY_REWRITE
(step @p2337 :rule trust :premises () :args ((= (= @t685 V2_main+0x3f) @t722)))
(step @p2338 :rule cong :premises (@p2334 @p2337 @p2336) :args (ite))
(step @p2339 :rule trans :premises (@p2338 @p2335))
(step @p2340 :rule cong :premises (@p2218 @p2326) :args (=))
(step @p2341 :rule cong :premises (@p2218 @p1122) :args (=))
(step @p2342 :rule cong :premises (@p2334 @p2341 @p2340) :args (ite))
(step @p2343 :rule ite_eq :args (@t684))
(step @p2344 :rule eq_resolve :premises (@p2343 @p2342))
(step @p2345 :rule eq_resolve :premises (@p2344 @p2339))
(step @p2346 :rule ite_elim2 :premises (@p2345))
(assume-push @p7923 @t703)
(assume-push @p7924 @t714)
(assume-push @p7925 @t721)
(assume-push @p7926 @t714)
(assume-push @p7927 @t703)
(assume-push @p7928 @t721)
(step @p2353 :rule symm :premises (@p7924))
(step @p2354 :rule symm :premises (@p7923))
(step @p2355 :rule symm :premises (@p7925))
(step @p2356 :rule trans :premises (@p2355 @p2354 @p2353))
(step @p2357 :rule cong :premises (@p1119 @p2356) :args (=))
(step @p2358 :rule trans :premises (@p2357 @p2064))
(step @p2359 :rule false_elim :premises (@p2358))
(step-pop @p7928 :rule scope :premises (@p2359))
(step-pop @p7929 :rule scope :premises (@p7928))
(step-pop @p7930 :rule scope :premises (@p7929))
(step @p2360 :rule process_scope :premises (@p7930) :args (@t724))
(step @p2364 :rule and_intro :premises (@p7924 @p7923 @p7925))
(step @p2365 :rule modus_ponens :premises (@p2364 @p2360))
(step-pop @p7931 :rule scope :premises (@p2365))
(step-pop @p7932 :rule scope :premises (@p7931))
(step-pop @p7933 :rule scope :premises (@p7932))
(step @p2366 :rule process_scope :premises (@p7933) :args (@t724))
(step @p2370 :rule implies_elim :premises (@p2366))
(step @p2371 :rule cnf_and_neg :args (@t725))
(step @p2372 :rule resolution :premises (@p2371 @p2370) :args (true @t725))
; trust TRUST_THEORY_REWRITE
(step @p2373 :rule trust :premises () :args ((= (= @t726 @t720) @t727)))
(step @p2374 :rule refl :args (@t720))
; trust TRUST_THEORY_REWRITE
(step @p2375 :rule trust :premises () :args ((= (= @t680 @t680) true)))
(step @p2376 :rule skolem_intro :args (@t726))
(step @p2377 :rule refl :args (@t680))
(step @p2378 :rule cong :premises (@p2377 @p2376) :args (=))
(step @p2379 :rule refl :args ((= @t680 @t726)))
(step @p2380 :rule trans :premises (@p2379 @p2378 @p2375))
(step @p2381 :rule true_elim :premises (@p2380))
(step @p2382 :rule cong :premises (@p2381 @p2374) :args (=))
(step @p2383 :rule trans :premises (@p2382 @p2373))
(step @p2384 :rule refl :args (@t723))
(step @p2385 :rule refl :args (@t681))
(step @p2386 :rule cong :premises (@p2385 @p2384 @p2383) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p2387 :rule trust :premises () :args ((= (= @t720 @t680) (= @t680 @t720))))
; trust TRUST_THEORY_REWRITE
(step @p2388 :rule trust :premises () :args ((= (= @t720 V2_printf) @t723)))
(step @p2389 :rule cong :premises (@p2385 @p2388 @p2387) :args (ite))
(step @p2390 :rule trans :premises (@p2389 @p2386))
(step @p2391 :rule cong :premises (@p2330 @p2377) :args (=))
(step @p2392 :rule cong :premises (@p2330 @p1119) :args (=))
(step @p2393 :rule cong :premises (@p2385 @p2392 @p2391) :args (ite))
(step @p2394 :rule ite_eq :args (@t682))
(step @p2395 :rule eq_resolve :premises (@p2394 @p2393))
(step @p2396 :rule eq_resolve :premises (@p2395 @p2390))
(step @p2397 :rule ite_elim1 :premises (@p2396))
(step @p2398 :rule reordering :premises (@p2397) :args ((or @t723 @t728)))
(step @p2399 :rule ite_elim2 :premises (@p2396))
(assume-push @p7935 @t703)
(assume-push @p7936 @t714)
(assume-push @p7937 @t721)
(assume-push @p7938 @t727)
(assume-push @p7939 @t714)
(assume-push @p7940 @t703)
(assume-push @p7941 @t721)
(assume-push @p7942 @t727)
(step @p2408 :rule symm :premises (@p7936))
(step @p2409 :rule symm :premises (@p7935))
(step @p2410 :rule symm :premises (@p7937))
(step @p2411 :rule symm :premises (@p7938))
(step @p2412 :rule trans :premises (@p2411 @p2410 @p2409 @p2408))
(step @p2413 :rule cong :premises (@p1116 @p2412) :args (=))
(step @p2414 :rule trans :premises (@p2413 @p2077))
(step @p2415 :rule false_elim :premises (@p2414))
(step-pop @p7942 :rule scope :premises (@p2415))
(step-pop @p7943 :rule scope :premises (@p7942))
(step-pop @p7944 :rule scope :premises (@p7943))
(step-pop @p7945 :rule scope :premises (@p7944))
(step @p2416 :rule process_scope :premises (@p7945) :args (@t730))
(step @p2421 :rule and_intro :premises (@p7936 @p7935 @p7937 @p7938))
(step @p2422 :rule modus_ponens :premises (@p2421 @p2416))
(step-pop @p7946 :rule scope :premises (@p2422))
(step-pop @p7947 :rule scope :premises (@p7946))
(step-pop @p7948 :rule scope :premises (@p7947))
(step-pop @p7949 :rule scope :premises (@p7948))
(step @p2423 :rule process_scope :premises (@p7949) :args (@t730))
(step @p2428 :rule implies_elim :premises (@p2423))
(step @p2429 :rule cnf_and_neg :args (@t731))
(step @p2430 :rule resolution :premises (@p2429 @p2428) :args (true @t731))
; trust TRUST_THEORY_REWRITE
(step @p2431 :rule trust :premises () :args ((= (= @t732 @t726) @t733)))
(step @p2432 :rule refl :args (@t726))
; trust TRUST_THEORY_REWRITE
(step @p2433 :rule trust :premises () :args ((= (= @t678 @t678) true)))
(step @p2434 :rule skolem_intro :args (@t732))
(step @p2435 :rule refl :args (@t678))
(step @p2436 :rule cong :premises (@p2435 @p2434) :args (=))
(step @p2437 :rule refl :args ((= @t678 @t732)))
(step @p2438 :rule trans :premises (@p2437 @p2436 @p2433))
(step @p2439 :rule true_elim :premises (@p2438))
(step @p2440 :rule cong :premises (@p2439 @p2432) :args (=))
(step @p2441 :rule trans :premises (@p2440 @p2431))
(step @p2442 :rule refl :args (@t729))
(step @p2443 :rule refl :args (@t679))
(step @p2444 :rule cong :premises (@p2443 @p2442 @p2441) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p2445 :rule trust :premises () :args ((= (= @t726 @t678) (= @t678 @t726))))
; trust TRUST_THEORY_REWRITE
(step @p2446 :rule trust :premises () :args ((= (= @t726 V2_None4198448) @t729)))
(step @p2447 :rule cong :premises (@p2443 @p2446 @p2445) :args (ite))
(step @p2448 :rule trans :premises (@p2447 @p2444))
(step @p2449 :rule cong :premises (@p2381 @p2435) :args (=))
(step @p2450 :rule cong :premises (@p2381 @p1116) :args (=))
(step @p2451 :rule cong :premises (@p2443 @p2450 @p2449) :args (ite))
(step @p2452 :rule ite_eq :args (@t680))
(step @p2453 :rule eq_resolve :premises (@p2452 @p2451))
(step @p2454 :rule eq_resolve :premises (@p2453 @p2448))
(step @p2455 :rule ite_elim1 :premises (@p2454))
(step @p2456 :rule reordering :premises (@p2455) :args ((or @t729 @t734)))
(step @p2457 :rule ite_elim2 :premises (@p2454))
(assume-push @p7951 @t703)
(assume-push @p7952 @t714)
(assume-push @p7953 @t721)
(assume-push @p7954 @t727)
(assume-push @p7955 @t733)
(assume-push @p7956 @t714)
(assume-push @p7957 @t703)
(assume-push @p7958 @t721)
(assume-push @p7959 @t727)
(assume-push @p7960 @t733)
(step @p2468 :rule symm :premises (@p7952))
(step @p2469 :rule symm :premises (@p7951))
(step @p2470 :rule symm :premises (@p7953))
(step @p2471 :rule symm :premises (@p7954))
(step @p2472 :rule symm :premises (@p7955))
(step @p2473 :rule trans :premises (@p2472 @p2471 @p2470 @p2469 @p2468))
(step @p2474 :rule cong :premises (@p1113 @p2473) :args (=))
(step @p2475 :rule trans :premises (@p2474 @p2090))
(step @p2476 :rule false_elim :premises (@p2475))
(step-pop @p7960 :rule scope :premises (@p2476))
(step-pop @p7961 :rule scope :premises (@p7960))
(step-pop @p7962 :rule scope :premises (@p7961))
(step-pop @p7963 :rule scope :premises (@p7962))
(step-pop @p7964 :rule scope :premises (@p7963))
(step @p2477 :rule process_scope :premises (@p7964) :args (@t736))
(step @p2483 :rule and_intro :premises (@p7952 @p7951 @p7953 @p7954 @p7955))
(step @p2484 :rule modus_ponens :premises (@p2483 @p2477))
(step-pop @p7965 :rule scope :premises (@p2484))
(step-pop @p7966 :rule scope :premises (@p7965))
(step-pop @p7967 :rule scope :premises (@p7966))
(step-pop @p7968 :rule scope :premises (@p7967))
(step-pop @p7969 :rule scope :premises (@p7968))
(step @p2485 :rule process_scope :premises (@p7969) :args (@t736))
(step @p2491 :rule implies_elim :premises (@p2485))
(step @p2492 :rule cnf_and_neg :args (@t737))
(step @p2493 :rule resolution :premises (@p2492 @p2491) :args (true @t737))
; trust TRUST_THEORY_REWRITE
(step @p2494 :rule trust :premises () :args ((= (= @t738 @t732) @t739)))
(step @p2495 :rule refl :args (@t732))
; trust TRUST_THEORY_REWRITE
(step @p2496 :rule trust :premises () :args ((= (= @t676 @t676) true)))
(step @p2497 :rule skolem_intro :args (@t738))
(step @p2498 :rule refl :args (@t676))
(step @p2499 :rule cong :premises (@p2498 @p2497) :args (=))
(step @p2500 :rule refl :args ((= @t676 @t738)))
(step @p2501 :rule trans :premises (@p2500 @p2499 @p2496))
(step @p2502 :rule true_elim :premises (@p2501))
(step @p2503 :rule cong :premises (@p2502 @p2495) :args (=))
(step @p2504 :rule trans :premises (@p2503 @p2494))
(step @p2505 :rule refl :args (@t735))
(step @p2506 :rule refl :args (@t677))
(step @p2507 :rule cong :premises (@p2506 @p2505 @p2504) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p2508 :rule trust :premises () :args ((= (= @t732 @t676) (= @t676 @t732))))
; trust TRUST_THEORY_REWRITE
(step @p2509 :rule trust :premises () :args ((= (= @t732 V2_get_greet+0x1d) @t735)))
(step @p2510 :rule cong :premises (@p2506 @p2509 @p2508) :args (ite))
(step @p2511 :rule trans :premises (@p2510 @p2507))
(step @p2512 :rule cong :premises (@p2439 @p2498) :args (=))
(step @p2513 :rule cong :premises (@p2439 @p1113) :args (=))
(step @p2514 :rule cong :premises (@p2506 @p2513 @p2512) :args (ite))
(step @p2515 :rule ite_eq :args (@t678))
(step @p2516 :rule eq_resolve :premises (@p2515 @p2514))
(step @p2517 :rule eq_resolve :premises (@p2516 @p2511))
(step @p2518 :rule ite_elim1 :premises (@p2517))
(step @p2519 :rule reordering :premises (@p2518) :args ((or @t735 @t740)))
(step @p2520 :rule ite_elim2 :premises (@p2517))
(assume-push @p7971 @t703)
(assume-push @p7972 @t714)
(assume-push @p7973 @t721)
(assume-push @p7974 @t727)
(assume-push @p7975 @t733)
(assume-push @p7976 @t739)
(assume-push @p7977 @t714)
(assume-push @p7978 @t703)
(assume-push @p7979 @t721)
(assume-push @p7980 @t727)
(assume-push @p7981 @t733)
(assume-push @p7982 @t739)
(step @p2533 :rule symm :premises (@p7972))
(step @p2534 :rule symm :premises (@p7971))
(step @p2535 :rule symm :premises (@p7973))
(step @p2536 :rule symm :premises (@p7974))
(step @p2537 :rule symm :premises (@p7975))
(step @p2538 :rule symm :premises (@p7976))
(step @p2539 :rule trans :premises (@p2538 @p2537 @p2536 @p2535 @p2534 @p2533))
(step @p2540 :rule cong :premises (@p1110 @p2539) :args (=))
(step @p2541 :rule trans :premises (@p2540 @p2085))
(step @p2542 :rule false_elim :premises (@p2541))
(step-pop @p7982 :rule scope :premises (@p2542))
(step-pop @p7983 :rule scope :premises (@p7982))
(step-pop @p7984 :rule scope :premises (@p7983))
(step-pop @p7985 :rule scope :premises (@p7984))
(step-pop @p7986 :rule scope :premises (@p7985))
(step-pop @p7987 :rule scope :premises (@p7986))
(step @p2543 :rule process_scope :premises (@p7987) :args (@t742))
(step @p2550 :rule and_intro :premises (@p7972 @p7971 @p7973 @p7974 @p7975 @p7976))
(step @p2551 :rule modus_ponens :premises (@p2550 @p2543))
(step-pop @p7988 :rule scope :premises (@p2551))
(step-pop @p7989 :rule scope :premises (@p7988))
(step-pop @p7990 :rule scope :premises (@p7989))
(step-pop @p7991 :rule scope :premises (@p7990))
(step-pop @p7992 :rule scope :premises (@p7991))
(step-pop @p7993 :rule scope :premises (@p7992))
(step @p2552 :rule process_scope :premises (@p7993) :args (@t742))
(step @p2559 :rule implies_elim :premises (@p2552))
(step @p2560 :rule cnf_and_neg :args (@t743))
(step @p2561 :rule resolution :premises (@p2560 @p2559) :args (true @t743))
; trust TRUST_THEORY_REWRITE
(step @p2562 :rule trust :premises () :args ((= (= @t744 @t738) @t745)))
(step @p2563 :rule refl :args (@t738))
; trust TRUST_THEORY_REWRITE
(step @p2564 :rule trust :premises () :args ((= (= @t674 @t674) true)))
(step @p2565 :rule skolem_intro :args (@t744))
(step @p2566 :rule refl :args (@t674))
(step @p2567 :rule cong :premises (@p2566 @p2565) :args (=))
(step @p2568 :rule refl :args ((= @t674 @t744)))
(step @p2569 :rule trans :premises (@p2568 @p2567 @p2564))
(step @p2570 :rule true_elim :premises (@p2569))
(step @p2571 :rule cong :premises (@p2570 @p2563) :args (=))
(step @p2572 :rule trans :premises (@p2571 @p2562))
(step @p2573 :rule refl :args (@t741))
(step @p2574 :rule refl :args (@t675))
(step @p2575 :rule cong :premises (@p2574 @p2573 @p2572) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p2576 :rule trust :premises () :args ((= (= @t738 @t674) (= @t674 @t738))))
; trust TRUST_THEORY_REWRITE
(step @p2577 :rule trust :premises () :args ((= (= @t738 V2_main+0x19) @t741)))
(step @p2578 :rule cong :premises (@p2574 @p2577 @p2576) :args (ite))
(step @p2579 :rule trans :premises (@p2578 @p2575))
(step @p2580 :rule cong :premises (@p2502 @p2566) :args (=))
(step @p2581 :rule cong :premises (@p2502 @p1110) :args (=))
(step @p2582 :rule cong :premises (@p2574 @p2581 @p2580) :args (ite))
(step @p2583 :rule ite_eq :args (@t676))
(step @p2584 :rule eq_resolve :premises (@p2583 @p2582))
(step @p2585 :rule eq_resolve :premises (@p2584 @p2579))
(step @p2586 :rule ite_elim1 :premises (@p2585))
(step @p2587 :rule reordering :premises (@p2586) :args ((or @t741 @t746)))
(step @p2588 :rule ite_elim2 :premises (@p2585))
(assume-push @p7995 @t703)
(assume-push @p7996 @t714)
(assume-push @p7997 @t721)
(assume-push @p7998 @t727)
(assume-push @p7999 @t733)
(assume-push @p8000 @t739)
(assume-push @p8001 @t745)
(assume-push @p8002 @t714)
(assume-push @p8003 @t703)
(assume-push @p8004 @t721)
(assume-push @p8005 @t727)
(assume-push @p8006 @t733)
(assume-push @p8007 @t739)
(assume-push @p8008 @t745)
(step @p2603 :rule symm :premises (@p7996))
(step @p2604 :rule symm :premises (@p7995))
(step @p2605 :rule symm :premises (@p7997))
(step @p2606 :rule symm :premises (@p7998))
(step @p2607 :rule symm :premises (@p7999))
(step @p2608 :rule symm :premises (@p8000))
(step @p2609 :rule symm :premises (@p8001))
(step @p2610 :rule trans :premises (@p2609 @p2608 @p2607 @p2606 @p2605 @p2604 @p2603))
(step @p2611 :rule cong :premises (@p1107 @p2610) :args (=))
(step @p2612 :rule trans :premises (@p2611 @p2116))
(step @p2613 :rule false_elim :premises (@p2612))
(step-pop @p8008 :rule scope :premises (@p2613))
(step-pop @p8009 :rule scope :premises (@p8008))
(step-pop @p8010 :rule scope :premises (@p8009))
(step-pop @p8011 :rule scope :premises (@p8010))
(step-pop @p8012 :rule scope :premises (@p8011))
(step-pop @p8013 :rule scope :premises (@p8012))
(step-pop @p8014 :rule scope :premises (@p8013))
(step @p2614 :rule process_scope :premises (@p8014) :args (@t748))
(step @p2622 :rule and_intro :premises (@p7996 @p7995 @p7997 @p7998 @p7999 @p8000 @p8001))
(step @p2623 :rule modus_ponens :premises (@p2622 @p2614))
(step-pop @p8015 :rule scope :premises (@p2623))
(step-pop @p8016 :rule scope :premises (@p8015))
(step-pop @p8017 :rule scope :premises (@p8016))
(step-pop @p8018 :rule scope :premises (@p8017))
(step-pop @p8019 :rule scope :premises (@p8018))
(step-pop @p8020 :rule scope :premises (@p8019))
(step-pop @p8021 :rule scope :premises (@p8020))
(step @p2624 :rule process_scope :premises (@p8021) :args (@t748))
(step @p2632 :rule implies_elim :premises (@p2624))
(step @p2633 :rule cnf_and_neg :args (@t749))
(step @p2634 :rule resolution :premises (@p2633 @p2632) :args (true @t749))
; trust TRUST_THEORY_REWRITE
(step @p2635 :rule trust :premises () :args ((= (= @t750 @t744) @t751)))
(step @p2636 :rule refl :args (@t744))
; trust TRUST_THEORY_REWRITE
(step @p2637 :rule trust :premises () :args ((= (= @t672 @t672) true)))
(step @p2638 :rule skolem_intro :args (@t750))
(step @p2639 :rule refl :args (@t672))
(step @p2640 :rule cong :premises (@p2639 @p2638) :args (=))
(step @p2641 :rule refl :args ((= @t672 @t750)))
(step @p2642 :rule trans :premises (@p2641 @p2640 @p2637))
(step @p2643 :rule true_elim :premises (@p2642))
(step @p2644 :rule cong :premises (@p2643 @p2636) :args (=))
(step @p2645 :rule trans :premises (@p2644 @p2635))
(step @p2646 :rule refl :args (@t747))
(step @p2647 :rule refl :args (@t673))
(step @p2648 :rule cong :premises (@p2647 @p2646 @p2645) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p2649 :rule trust :premises () :args ((= (= @t744 @t672) (= @t672 @t744))))
; trust TRUST_THEORY_REWRITE
(step @p2650 :rule trust :premises () :args ((= (= @t744 V2_get_greet+0xd) @t747)))
(step @p2651 :rule cong :premises (@p2647 @p2650 @p2649) :args (ite))
(step @p2652 :rule trans :premises (@p2651 @p2648))
(step @p2653 :rule cong :premises (@p2570 @p2639) :args (=))
(step @p2654 :rule cong :premises (@p2570 @p1107) :args (=))
(step @p2655 :rule cong :premises (@p2647 @p2654 @p2653) :args (ite))
(step @p2656 :rule ite_eq :args (@t674))
(step @p2657 :rule eq_resolve :premises (@p2656 @p2655))
(step @p2658 :rule eq_resolve :premises (@p2657 @p2652))
(step @p2659 :rule ite_elim1 :premises (@p2658))
(step @p2660 :rule reordering :premises (@p2659) :args ((or @t747 @t752)))
(step @p2661 :rule ite_elim2 :premises (@p2658))
(assume-push @p8023 @t703)
(assume-push @p8024 @t714)
(assume-push @p8025 @t721)
(assume-push @p8026 @t727)
(assume-push @p8027 @t733)
(assume-push @p8028 @t739)
(assume-push @p8029 @t745)
(assume-push @p8030 @t751)
(assume-push @p8031 @t714)
(assume-push @p8032 @t703)
(assume-push @p8033 @t721)
(assume-push @p8034 @t727)
(assume-push @p8035 @t733)
(assume-push @p8036 @t739)
(assume-push @p8037 @t745)
(assume-push @p8038 @t751)
(step @p2678 :rule symm :premises (@p8024))
(step @p2679 :rule symm :premises (@p8023))
(step @p2680 :rule symm :premises (@p8025))
(step @p2681 :rule symm :premises (@p8026))
(step @p2682 :rule symm :premises (@p8027))
(step @p2683 :rule symm :premises (@p8028))
(step @p2684 :rule symm :premises (@p8029))
(step @p2685 :rule symm :premises (@p8030))
(step @p2686 :rule trans :premises (@p2685 @p2684 @p2683 @p2682 @p2681 @p2680 @p2679 @p2678))
(step @p2687 :rule cong :premises (@p1104 @p2686) :args (=))
(step @p2688 :rule trans :premises (@p2687 @p2124))
(step @p2689 :rule false_elim :premises (@p2688))
(step-pop @p8038 :rule scope :premises (@p2689))
(step-pop @p8039 :rule scope :premises (@p8038))
(step-pop @p8040 :rule scope :premises (@p8039))
(step-pop @p8041 :rule scope :premises (@p8040))
(step-pop @p8042 :rule scope :premises (@p8041))
(step-pop @p8043 :rule scope :premises (@p8042))
(step-pop @p8044 :rule scope :premises (@p8043))
(step-pop @p8045 :rule scope :premises (@p8044))
(step @p2690 :rule process_scope :premises (@p8045) :args (@t754))
(step @p2699 :rule and_intro :premises (@p8024 @p8023 @p8025 @p8026 @p8027 @p8028 @p8029 @p8030))
(step @p2700 :rule modus_ponens :premises (@p2699 @p2690))
(step-pop @p8046 :rule scope :premises (@p2700))
(step-pop @p8047 :rule scope :premises (@p8046))
(step-pop @p8048 :rule scope :premises (@p8047))
(step-pop @p8049 :rule scope :premises (@p8048))
(step-pop @p8050 :rule scope :premises (@p8049))
(step-pop @p8051 :rule scope :premises (@p8050))
(step-pop @p8052 :rule scope :premises (@p8051))
(step-pop @p8053 :rule scope :premises (@p8052))
(step @p2701 :rule process_scope :premises (@p8053) :args (@t754))
(step @p2710 :rule implies_elim :premises (@p2701))
(step @p2711 :rule cnf_and_neg :args (@t755))
(step @p2712 :rule resolution :premises (@p2711 @p2710) :args (true @t755))
; trust TRUST_THEORY_REWRITE
(step @p2713 :rule trust :premises () :args ((= (= @t756 @t750) @t757)))
(step @p2714 :rule refl :args (@t750))
; trust TRUST_THEORY_REWRITE
(step @p2715 :rule trust :premises () :args ((= (= @t670 @t670) true)))
(step @p2716 :rule skolem_intro :args (@t756))
(step @p2717 :rule refl :args (@t670))
(step @p2718 :rule cong :premises (@p2717 @p2716) :args (=))
(step @p2719 :rule refl :args ((= @t670 @t756)))
(step @p2720 :rule trans :premises (@p2719 @p2718 @p2715))
(step @p2721 :rule true_elim :premises (@p2720))
(step @p2722 :rule cong :premises (@p2721 @p2714) :args (=))
(step @p2723 :rule trans :premises (@p2722 @p2713))
(step @p2724 :rule refl :args (@t753))
(step @p2725 :rule refl :args (@t671))
(step @p2726 :rule cong :premises (@p2725 @p2724 @p2723) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p2727 :rule trust :premises () :args ((= (= @t750 @t670) (= @t670 @t750))))
; trust TRUST_THEORY_REWRITE
(step @p2728 :rule trust :premises () :args ((= (= @t750 V2_get_greet+0x16) @t753)))
(step @p2729 :rule cong :premises (@p2725 @p2728 @p2727) :args (ite))
(step @p2730 :rule trans :premises (@p2729 @p2726))
(step @p2731 :rule cong :premises (@p2643 @p2717) :args (=))
(step @p2732 :rule cong :premises (@p2643 @p1104) :args (=))
(step @p2733 :rule cong :premises (@p2725 @p2732 @p2731) :args (ite))
(step @p2734 :rule ite_eq :args (@t672))
(step @p2735 :rule eq_resolve :premises (@p2734 @p2733))
(step @p2736 :rule eq_resolve :premises (@p2735 @p2730))
(step @p2737 :rule ite_elim1 :premises (@p2736))
(step @p2738 :rule reordering :premises (@p2737) :args ((or @t753 @t758)))
(step @p2739 :rule ite_elim2 :premises (@p2736))
(assume-push @p8055 @t703)
(assume-push @p8056 @t714)
(assume-push @p8057 @t721)
(assume-push @p8058 @t727)
(assume-push @p8059 @t733)
(assume-push @p8060 @t739)
(assume-push @p8061 @t745)
(assume-push @p8062 @t751)
(assume-push @p8063 @t757)
(assume-push @p8064 @t714)
(assume-push @p8065 @t703)
(assume-push @p8066 @t721)
(assume-push @p8067 @t727)
(assume-push @p8068 @t733)
(assume-push @p8069 @t739)
(assume-push @p8070 @t745)
(assume-push @p8071 @t751)
(assume-push @p8072 @t757)
(step @p2758 :rule symm :premises (@p8056))
(step @p2759 :rule symm :premises (@p8055))
(step @p2760 :rule symm :premises (@p8057))
(step @p2761 :rule symm :premises (@p8058))
(step @p2762 :rule symm :premises (@p8059))
(step @p2763 :rule symm :premises (@p8060))
(step @p2764 :rule symm :premises (@p8061))
(step @p2765 :rule symm :premises (@p8062))
(step @p2766 :rule symm :premises (@p8063))
(step @p2767 :rule trans :premises (@p2766 @p2765 @p2764 @p2763 @p2762 @p2761 @p2760 @p2759 @p2758))
(step @p2768 :rule cong :premises (@p1100 @p2767) :args (=))
(step @p2769 :rule trans :premises (@p2768 @p2151))
(step @p2770 :rule false_elim :premises (@p2769))
(step-pop @p8072 :rule scope :premises (@p2770))
(step-pop @p8073 :rule scope :premises (@p8072))
(step-pop @p8074 :rule scope :premises (@p8073))
(step-pop @p8075 :rule scope :premises (@p8074))
(step-pop @p8076 :rule scope :premises (@p8075))
(step-pop @p8077 :rule scope :premises (@p8076))
(step-pop @p8078 :rule scope :premises (@p8077))
(step-pop @p8079 :rule scope :premises (@p8078))
(step-pop @p8080 :rule scope :premises (@p8079))
(step @p2771 :rule process_scope :premises (@p8080) :args (@t760))
(step @p2781 :rule and_intro :premises (@p8056 @p8055 @p8057 @p8058 @p8059 @p8060 @p8061 @p8062 @p8063))
(step @p2782 :rule modus_ponens :premises (@p2781 @p2771))
(step-pop @p8081 :rule scope :premises (@p2782))
(step-pop @p8082 :rule scope :premises (@p8081))
(step-pop @p8083 :rule scope :premises (@p8082))
(step-pop @p8084 :rule scope :premises (@p8083))
(step-pop @p8085 :rule scope :premises (@p8084))
(step-pop @p8086 :rule scope :premises (@p8085))
(step-pop @p8087 :rule scope :premises (@p8086))
(step-pop @p8088 :rule scope :premises (@p8087))
(step-pop @p8089 :rule scope :premises (@p8088))
(step @p2783 :rule process_scope :premises (@p8089) :args (@t760))
(step @p2793 :rule implies_elim :premises (@p2783))
(step @p2794 :rule cnf_and_neg :args (@t761))
(step @p2795 :rule resolution :premises (@p2794 @p2793) :args (true @t761))
(assume-push @p8091 @t703)
(assume-push @p8092 @t714)
(assume-push @p8093 @t721)
(assume-push @p8094 @t727)
(assume-push @p8095 @t733)
(assume-push @p8096 @t739)
(assume-push @p8097 @t745)
(assume-push @p8098 @t751)
(assume-push @p8099 @t757)
(assume-push @p8100 @t714)
(assume-push @p8101 @t703)
(assume-push @p8102 @t721)
(assume-push @p8103 @t727)
(assume-push @p8104 @t733)
(assume-push @p8105 @t739)
(assume-push @p8106 @t745)
(assume-push @p8107 @t751)
(assume-push @p8108 @t757)
(step @p2814 :rule symm :premises (@p8092))
(step @p2815 :rule symm :premises (@p8091))
(step @p2816 :rule symm :premises (@p8093))
(step @p2817 :rule symm :premises (@p8094))
(step @p2818 :rule symm :premises (@p8095))
(step @p2819 :rule symm :premises (@p8096))
(step @p2820 :rule symm :premises (@p8097))
(step @p2821 :rule symm :premises (@p8098))
(step @p2822 :rule symm :premises (@p8099))
(step @p2823 :rule trans :premises (@p2822 @p2821 @p2820 @p2819 @p2818 @p2817 @p2816 @p2815 @p2814))
(step @p2824 :rule cong :premises (@p1101 @p2823) :args (=))
(step @p2825 :rule trans :premises (@p2824 @p2136))
(step @p2826 :rule false_elim :premises (@p2825))
(step-pop @p8108 :rule scope :premises (@p2826))
(step-pop @p8109 :rule scope :premises (@p8108))
(step-pop @p8110 :rule scope :premises (@p8109))
(step-pop @p8111 :rule scope :premises (@p8110))
(step-pop @p8112 :rule scope :premises (@p8111))
(step-pop @p8113 :rule scope :premises (@p8112))
(step-pop @p8114 :rule scope :premises (@p8113))
(step-pop @p8115 :rule scope :premises (@p8114))
(step-pop @p8116 :rule scope :premises (@p8115))
(step @p2827 :rule process_scope :premises (@p8116) :args (@t763))
(step @p2837 :rule and_intro :premises (@p8092 @p8091 @p8093 @p8094 @p8095 @p8096 @p8097 @p8098 @p8099))
(step @p2838 :rule modus_ponens :premises (@p2837 @p2827))
(step-pop @p8117 :rule scope :premises (@p2838))
(step-pop @p8118 :rule scope :premises (@p8117))
(step-pop @p8119 :rule scope :premises (@p8118))
(step-pop @p8120 :rule scope :premises (@p8119))
(step-pop @p8121 :rule scope :premises (@p8120))
(step-pop @p8122 :rule scope :premises (@p8121))
(step-pop @p8123 :rule scope :premises (@p8122))
(step-pop @p8124 :rule scope :premises (@p8123))
(step-pop @p8125 :rule scope :premises (@p8124))
(step @p2839 :rule process_scope :premises (@p8125) :args (@t763))
(step @p2849 :rule implies_elim :premises (@p2839))
(step @p2850 :rule resolution :premises (@p2794 @p2849) :args (true @t761))
; trust TRUST_THEORY_REWRITE
(step @p2851 :rule trust :premises () :args ((= (= @t756 V2_main) @t759)))
; trust TRUST_THEORY_REWRITE
(step @p2852 :rule trust :premises () :args ((= (= @t756 V2_get_greet) @t762)))
(step @p2853 :rule refl :args (@t669))
(step @p2854 :rule cong :premises (@p2853 @p2852 @p2851) :args (ite))
(step @p2855 :rule cong :premises (@p2721 @p1100) :args (=))
(step @p2856 :rule cong :premises (@p2721 @p1101) :args (=))
(step @p2857 :rule cong :premises (@p2853 @p2856 @p2855) :args (ite))
(step @p2858 :rule ite_eq :args (@t670))
(step @p2859 :rule eq_resolve :premises (@p2858 @p2857))
(step @p2860 :rule eq_resolve :premises (@p2859 @p2854))
(step @p2861 :rule ite_elim2 :premises (@p2860))
(step @p2862 :rule ite_elim1 :premises (@p2860))
(step @p2863 :rule reordering :premises (@p2862) :args ((or @t762 @t764)))
(step @p2864 :rule chain_resolution :premises (@p2863 @p2861 @p2850 @p2261 @p2795 @p2261) :args ((@list false true false true false) (@list @t669 @t762 @t703 @t759 @t703)))
(step @p2865 :rule factoring :premises (@p2864))
(step @p2866 :rule chain_resolution :premises (@p2865 @p2739 @p2738 @p2712 @p2261) :args (@t765 (@list @t757 @t671 @t753 @t703)))
(step @p2867 :rule factoring :premises (@p2866))
(step @p2868 :rule chain_resolution :premises (@p2867 @p2661 @p2660 @p2634 @p2261) :args (@t765 (@list @t751 @t673 @t747 @t703)))
(step @p2869 :rule factoring :premises (@p2868))
(step @p2870 :rule chain_resolution :premises (@p2869 @p2588 @p2587 @p2561 @p2261) :args (@t765 (@list @t745 @t675 @t741 @t703)))
(step @p2871 :rule factoring :premises (@p2870))
(step @p2872 :rule chain_resolution :premises (@p2871 @p2520 @p2519 @p2493 @p2261) :args (@t765 (@list @t739 @t677 @t735 @t703)))
(step @p2873 :rule factoring :premises (@p2872))
(step @p2874 :rule chain_resolution :premises (@p2873 @p2457 @p2456 @p2430 @p2261) :args (@t765 (@list @t733 @t679 @t729 @t703)))
(step @p2875 :rule factoring :premises (@p2874))
(step @p2876 :rule chain_resolution :premises (@p2875 @p2399 @p2398 @p2372 @p2261) :args (@t765 (@list @t727 @t681 @t723 @t703)))
(step @p2877 :rule factoring :premises (@p2876))
(step @p2878 :rule chain_resolution :premises (@p2877 @p2346 @p2321 @p2235 @p2287) :args (@t765 (@list @t721 @t683 @t668 @t714)))
(step @p2879 :rule factoring :premises (@p2878))
(step @p2880 :rule ite_elim2 :premises (@p2285))
(step @p2881 :rule chain_resolution :premises (@p2880 @p2879) :args (@t155 (@list @t700)))
(assume-push @p8127 @t703)
(assume-push @p8128 @t713)
(assume-push @p8129 @t722)
(assume-push @p8130 @t722)
(assume-push @p8131 @t703)
(assume-push @p8132 @t713)
(step @p2888 :rule symm :premises (@p8129))
(step @p2889 :rule symm :premises (@p8127))
(step @p2890 :rule symm :premises (@p2889))
(step @p2891 :rule symm :premises (@p8128))
(step @p2892 :rule trans :premises (@p2891 @p2890 @p2888))
(step @p2893 :rule cong :premises (@p1119 @p2892) :args (=))
(step @p2894 :rule trans :premises (@p2893 @p2064))
(step @p2895 :rule false_elim :premises (@p2894))
(step-pop @p8132 :rule scope :premises (@p2895))
(step-pop @p8133 :rule scope :premises (@p8132))
(step-pop @p8134 :rule scope :premises (@p8133))
(step @p2896 :rule process_scope :premises (@p8134) :args (@t767))
(step @p2900 :rule and_intro :premises (@p8129 @p8127 @p8128))
(step @p2901 :rule modus_ponens :premises (@p2900 @p2896))
(step-pop @p8135 :rule scope :premises (@p2901))
(step-pop @p8136 :rule scope :premises (@p8135))
(step-pop @p8137 :rule scope :premises (@p8136))
(step @p2902 :rule process_scope :premises (@p8137) :args (@t767))
(step @p2906 :rule implies_elim :premises (@p2902))
(step @p2907 :rule cnf_and_neg :args (@t768))
(step @p2908 :rule resolution :premises (@p2907 @p2906) :args (true @t768))
; trust TRUST_THEORY_REWRITE
(step @p2909 :rule trust :premises () :args ((= (= @t769 @t712) @t770)))
(step @p2910 :rule refl :args (@t712))
; trust TRUST_THEORY_REWRITE
(step @p2911 :rule trust :premises () :args ((= (= @t697 @t697) true)))
(step @p2912 :rule skolem_intro :args (@t769))
(step @p2913 :rule refl :args (@t697))
(step @p2914 :rule cong :premises (@p2913 @p2912) :args (=))
(step @p2915 :rule refl :args ((= @t697 @t769)))
(step @p2916 :rule trans :premises (@p2915 @p2914 @p2911))
(step @p2917 :rule true_elim :premises (@p2916))
(step @p2918 :rule cong :premises (@p2917 @p2910) :args (=))
(step @p2919 :rule trans :premises (@p2918 @p2909))
(step @p2920 :rule refl :args (@t766))
(step @p2921 :rule refl :args (@t698))
(step @p2922 :rule cong :premises (@p2921 @p2920 @p2919) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p2923 :rule trust :premises () :args ((= (= @t712 @t697) (= @t697 @t712))))
; trust TRUST_THEORY_REWRITE
(step @p2924 :rule trust :premises () :args ((= (= @t712 V2_printf) @t766)))
(step @p2925 :rule cong :premises (@p2921 @p2924 @p2923) :args (ite))
(step @p2926 :rule trans :premises (@p2925 @p2922))
(step @p2927 :rule cong :premises (@p2270 @p2913) :args (=))
(step @p2928 :rule cong :premises (@p2270 @p1119) :args (=))
(step @p2929 :rule cong :premises (@p2921 @p2928 @p2927) :args (ite))
(step @p2930 :rule ite_eq :args (@t699))
(step @p2931 :rule eq_resolve :premises (@p2930 @p2929))
(step @p2932 :rule eq_resolve :premises (@p2931 @p2926))
(step @p2933 :rule ite_elim1 :premises (@p2932))
(step @p2934 :rule reordering :premises (@p2933) :args ((or @t766 @t771)))
(step @p2935 :rule ite_elim2 :premises (@p2932))
(assume-push @p8139 @t703)
(assume-push @p8140 @t713)
(assume-push @p8141 @t722)
(assume-push @p8142 @t770)
(assume-push @p8143 @t722)
(assume-push @p8144 @t703)
(assume-push @p8145 @t713)
(assume-push @p8146 @t770)
(step @p2944 :rule symm :premises (@p8141))
(step @p2945 :rule symm :premises (@p8139))
(step @p2946 :rule symm :premises (@p2945))
(step @p2947 :rule symm :premises (@p8140))
(step @p2948 :rule symm :premises (@p8142))
(step @p2949 :rule trans :premises (@p2948 @p2947 @p2946 @p2944))
(step @p2950 :rule cong :premises (@p1116 @p2949) :args (=))
(step @p2951 :rule trans :premises (@p2950 @p2077))
(step @p2952 :rule false_elim :premises (@p2951))
(step-pop @p8146 :rule scope :premises (@p2952))
(step-pop @p8147 :rule scope :premises (@p8146))
(step-pop @p8148 :rule scope :premises (@p8147))
(step-pop @p8149 :rule scope :premises (@p8148))
(step @p2953 :rule process_scope :premises (@p8149) :args (@t773))
(step @p2958 :rule and_intro :premises (@p8141 @p8139 @p8140 @p8142))
(step @p2959 :rule modus_ponens :premises (@p2958 @p2953))
(step-pop @p8150 :rule scope :premises (@p2959))
(step-pop @p8151 :rule scope :premises (@p8150))
(step-pop @p8152 :rule scope :premises (@p8151))
(step-pop @p8153 :rule scope :premises (@p8152))
(step @p2960 :rule process_scope :premises (@p8153) :args (@t773))
(step @p2965 :rule implies_elim :premises (@p2960))
(step @p2966 :rule cnf_and_neg :args (@t774))
(step @p2967 :rule resolution :premises (@p2966 @p2965) :args (true @t774))
; trust TRUST_THEORY_REWRITE
(step @p2968 :rule trust :premises () :args ((= (= @t775 @t769) @t776)))
(step @p2969 :rule refl :args (@t769))
; trust TRUST_THEORY_REWRITE
(step @p2970 :rule trust :premises () :args ((= (= @t695 @t695) true)))
(step @p2971 :rule skolem_intro :args (@t775))
(step @p2972 :rule refl :args (@t695))
(step @p2973 :rule cong :premises (@p2972 @p2971) :args (=))
(step @p2974 :rule refl :args ((= @t695 @t775)))
(step @p2975 :rule trans :premises (@p2974 @p2973 @p2970))
(step @p2976 :rule true_elim :premises (@p2975))
(step @p2977 :rule cong :premises (@p2976 @p2969) :args (=))
(step @p2978 :rule trans :premises (@p2977 @p2968))
(step @p2979 :rule refl :args (@t772))
(step @p2980 :rule refl :args (@t696))
(step @p2981 :rule cong :premises (@p2980 @p2979 @p2978) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p2982 :rule trust :premises () :args ((= (= @t769 @t695) (= @t695 @t769))))
; trust TRUST_THEORY_REWRITE
(step @p2983 :rule trust :premises () :args ((= (= @t769 V2_None4198448) @t772)))
(step @p2984 :rule cong :premises (@p2980 @p2983 @p2982) :args (ite))
(step @p2985 :rule trans :premises (@p2984 @p2981))
(step @p2986 :rule cong :premises (@p2917 @p2972) :args (=))
(step @p2987 :rule cong :premises (@p2917 @p1116) :args (=))
(step @p2988 :rule cong :premises (@p2980 @p2987 @p2986) :args (ite))
(step @p2989 :rule ite_eq :args (@t697))
(step @p2990 :rule eq_resolve :premises (@p2989 @p2988))
(step @p2991 :rule eq_resolve :premises (@p2990 @p2985))
(step @p2992 :rule ite_elim1 :premises (@p2991))
(step @p2993 :rule reordering :premises (@p2992) :args ((or @t772 @t777)))
(step @p2994 :rule ite_elim2 :premises (@p2991))
(assume-push @p8155 @t703)
(assume-push @p8156 @t713)
(assume-push @p8157 @t722)
(assume-push @p8158 @t770)
(assume-push @p8159 @t776)
(assume-push @p8160 @t722)
(assume-push @p8161 @t703)
(assume-push @p8162 @t713)
(assume-push @p8163 @t770)
(assume-push @p8164 @t776)
(step @p3005 :rule symm :premises (@p8157))
(step @p3006 :rule symm :premises (@p8155))
(step @p3007 :rule symm :premises (@p3006))
(step @p3008 :rule symm :premises (@p8156))
(step @p3009 :rule symm :premises (@p8158))
(step @p3010 :rule symm :premises (@p8159))
(step @p3011 :rule trans :premises (@p3010 @p3009 @p3008 @p3007 @p3005))
(step @p3012 :rule cong :premises (@p1113 @p3011) :args (=))
(step @p3013 :rule trans :premises (@p3012 @p2090))
(step @p3014 :rule false_elim :premises (@p3013))
(step-pop @p8164 :rule scope :premises (@p3014))
(step-pop @p8165 :rule scope :premises (@p8164))
(step-pop @p8166 :rule scope :premises (@p8165))
(step-pop @p8167 :rule scope :premises (@p8166))
(step-pop @p8168 :rule scope :premises (@p8167))
(step @p3015 :rule process_scope :premises (@p8168) :args (@t779))
(step @p3021 :rule and_intro :premises (@p8157 @p8155 @p8156 @p8158 @p8159))
(step @p3022 :rule modus_ponens :premises (@p3021 @p3015))
(step-pop @p8169 :rule scope :premises (@p3022))
(step-pop @p8170 :rule scope :premises (@p8169))
(step-pop @p8171 :rule scope :premises (@p8170))
(step-pop @p8172 :rule scope :premises (@p8171))
(step-pop @p8173 :rule scope :premises (@p8172))
(step @p3023 :rule process_scope :premises (@p8173) :args (@t779))
(step @p3029 :rule implies_elim :premises (@p3023))
(step @p3030 :rule cnf_and_neg :args (@t780))
(step @p3031 :rule resolution :premises (@p3030 @p3029) :args (true @t780))
; trust TRUST_THEORY_REWRITE
(step @p3032 :rule trust :premises () :args ((= (= @t781 @t775) @t782)))
(step @p3033 :rule refl :args (@t775))
; trust TRUST_THEORY_REWRITE
(step @p3034 :rule trust :premises () :args ((= (= @t693 @t693) true)))
(step @p3035 :rule skolem_intro :args (@t781))
(step @p3036 :rule refl :args (@t693))
(step @p3037 :rule cong :premises (@p3036 @p3035) :args (=))
(step @p3038 :rule refl :args ((= @t693 @t781)))
(step @p3039 :rule trans :premises (@p3038 @p3037 @p3034))
(step @p3040 :rule true_elim :premises (@p3039))
(step @p3041 :rule cong :premises (@p3040 @p3033) :args (=))
(step @p3042 :rule trans :premises (@p3041 @p3032))
(step @p3043 :rule refl :args (@t778))
(step @p3044 :rule refl :args (@t694))
(step @p3045 :rule cong :premises (@p3044 @p3043 @p3042) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p3046 :rule trust :premises () :args ((= (= @t775 @t693) (= @t693 @t775))))
; trust TRUST_THEORY_REWRITE
(step @p3047 :rule trust :premises () :args ((= (= @t775 V2_get_greet+0x1d) @t778)))
(step @p3048 :rule cong :premises (@p3044 @p3047 @p3046) :args (ite))
(step @p3049 :rule trans :premises (@p3048 @p3045))
(step @p3050 :rule cong :premises (@p2976 @p3036) :args (=))
(step @p3051 :rule cong :premises (@p2976 @p1113) :args (=))
(step @p3052 :rule cong :premises (@p3044 @p3051 @p3050) :args (ite))
(step @p3053 :rule ite_eq :args (@t695))
(step @p3054 :rule eq_resolve :premises (@p3053 @p3052))
(step @p3055 :rule eq_resolve :premises (@p3054 @p3049))
(step @p3056 :rule ite_elim1 :premises (@p3055))
(step @p3057 :rule reordering :premises (@p3056) :args ((or @t778 @t783)))
(step @p3058 :rule ite_elim2 :premises (@p3055))
(assume-push @p8175 @t703)
(assume-push @p8176 @t713)
(assume-push @p8177 @t722)
(assume-push @p8178 @t770)
(assume-push @p8179 @t776)
(assume-push @p8180 @t782)
(assume-push @p8181 @t722)
(assume-push @p8182 @t703)
(assume-push @p8183 @t713)
(assume-push @p8184 @t770)
(assume-push @p8185 @t776)
(assume-push @p8186 @t782)
(step @p3071 :rule symm :premises (@p8177))
(step @p3072 :rule symm :premises (@p8175))
(step @p3073 :rule symm :premises (@p3072))
(step @p3074 :rule symm :premises (@p8176))
(step @p3075 :rule symm :premises (@p8178))
(step @p3076 :rule symm :premises (@p8179))
(step @p3077 :rule symm :premises (@p8180))
(step @p3078 :rule trans :premises (@p3077 @p3076 @p3075 @p3074 @p3073 @p3071))
(step @p3079 :rule cong :premises (@p1110 @p3078) :args (=))
(step @p3080 :rule trans :premises (@p3079 @p2085))
(step @p3081 :rule false_elim :premises (@p3080))
(step-pop @p8186 :rule scope :premises (@p3081))
(step-pop @p8187 :rule scope :premises (@p8186))
(step-pop @p8188 :rule scope :premises (@p8187))
(step-pop @p8189 :rule scope :premises (@p8188))
(step-pop @p8190 :rule scope :premises (@p8189))
(step-pop @p8191 :rule scope :premises (@p8190))
(step @p3082 :rule process_scope :premises (@p8191) :args (@t785))
(step @p3089 :rule and_intro :premises (@p8177 @p8175 @p8176 @p8178 @p8179 @p8180))
(step @p3090 :rule modus_ponens :premises (@p3089 @p3082))
(step-pop @p8192 :rule scope :premises (@p3090))
(step-pop @p8193 :rule scope :premises (@p8192))
(step-pop @p8194 :rule scope :premises (@p8193))
(step-pop @p8195 :rule scope :premises (@p8194))
(step-pop @p8196 :rule scope :premises (@p8195))
(step-pop @p8197 :rule scope :premises (@p8196))
(step @p3091 :rule process_scope :premises (@p8197) :args (@t785))
(step @p3098 :rule implies_elim :premises (@p3091))
(step @p3099 :rule cnf_and_neg :args (@t786))
(step @p3100 :rule resolution :premises (@p3099 @p3098) :args (true @t786))
; trust TRUST_THEORY_REWRITE
(step @p3101 :rule trust :premises () :args ((= (= @t787 @t781) @t788)))
(step @p3102 :rule refl :args (@t781))
; trust TRUST_THEORY_REWRITE
(step @p3103 :rule trust :premises () :args ((= (= @t691 @t691) true)))
(step @p3104 :rule skolem_intro :args (@t787))
(step @p3105 :rule refl :args (@t691))
(step @p3106 :rule cong :premises (@p3105 @p3104) :args (=))
(step @p3107 :rule refl :args ((= @t691 @t787)))
(step @p3108 :rule trans :premises (@p3107 @p3106 @p3103))
(step @p3109 :rule true_elim :premises (@p3108))
(step @p3110 :rule cong :premises (@p3109 @p3102) :args (=))
(step @p3111 :rule trans :premises (@p3110 @p3101))
(step @p3112 :rule refl :args (@t784))
(step @p3113 :rule refl :args (@t692))
(step @p3114 :rule cong :premises (@p3113 @p3112 @p3111) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p3115 :rule trust :premises () :args ((= (= @t781 @t691) (= @t691 @t781))))
; trust TRUST_THEORY_REWRITE
(step @p3116 :rule trust :premises () :args ((= (= @t781 V2_main+0x19) @t784)))
(step @p3117 :rule cong :premises (@p3113 @p3116 @p3115) :args (ite))
(step @p3118 :rule trans :premises (@p3117 @p3114))
(step @p3119 :rule cong :premises (@p3040 @p3105) :args (=))
(step @p3120 :rule cong :premises (@p3040 @p1110) :args (=))
(step @p3121 :rule cong :premises (@p3113 @p3120 @p3119) :args (ite))
(step @p3122 :rule ite_eq :args (@t693))
(step @p3123 :rule eq_resolve :premises (@p3122 @p3121))
(step @p3124 :rule eq_resolve :premises (@p3123 @p3118))
(step @p3125 :rule ite_elim1 :premises (@p3124))
(step @p3126 :rule reordering :premises (@p3125) :args ((or @t784 @t789)))
(step @p3127 :rule ite_elim2 :premises (@p3124))
(assume-push @p8199 @t703)
(assume-push @p8200 @t713)
(assume-push @p8201 @t722)
(assume-push @p8202 @t770)
(assume-push @p8203 @t776)
(assume-push @p8204 @t782)
(assume-push @p8205 @t788)
(assume-push @p8206 @t722)
(assume-push @p8207 @t703)
(assume-push @p8208 @t713)
(assume-push @p8209 @t770)
(assume-push @p8210 @t776)
(assume-push @p8211 @t782)
(assume-push @p8212 @t788)
(step @p3142 :rule symm :premises (@p8201))
(step @p3143 :rule symm :premises (@p8199))
(step @p3144 :rule symm :premises (@p3143))
(step @p3145 :rule symm :premises (@p8200))
(step @p3146 :rule symm :premises (@p8202))
(step @p3147 :rule symm :premises (@p8203))
(step @p3148 :rule symm :premises (@p8204))
(step @p3149 :rule symm :premises (@p8205))
(step @p3150 :rule trans :premises (@p3149 @p3148 @p3147 @p3146 @p3145 @p3144 @p3142))
(step @p3151 :rule cong :premises (@p1107 @p3150) :args (=))
(step @p3152 :rule trans :premises (@p3151 @p2116))
(step @p3153 :rule false_elim :premises (@p3152))
(step-pop @p8212 :rule scope :premises (@p3153))
(step-pop @p8213 :rule scope :premises (@p8212))
(step-pop @p8214 :rule scope :premises (@p8213))
(step-pop @p8215 :rule scope :premises (@p8214))
(step-pop @p8216 :rule scope :premises (@p8215))
(step-pop @p8217 :rule scope :premises (@p8216))
(step-pop @p8218 :rule scope :premises (@p8217))
(step @p3154 :rule process_scope :premises (@p8218) :args (@t791))
(step @p3162 :rule and_intro :premises (@p8201 @p8199 @p8200 @p8202 @p8203 @p8204 @p8205))
(step @p3163 :rule modus_ponens :premises (@p3162 @p3154))
(step-pop @p8219 :rule scope :premises (@p3163))
(step-pop @p8220 :rule scope :premises (@p8219))
(step-pop @p8221 :rule scope :premises (@p8220))
(step-pop @p8222 :rule scope :premises (@p8221))
(step-pop @p8223 :rule scope :premises (@p8222))
(step-pop @p8224 :rule scope :premises (@p8223))
(step-pop @p8225 :rule scope :premises (@p8224))
(step @p3164 :rule process_scope :premises (@p8225) :args (@t791))
(step @p3172 :rule implies_elim :premises (@p3164))
(step @p3173 :rule cnf_and_neg :args (@t792))
(step @p3174 :rule resolution :premises (@p3173 @p3172) :args (true @t792))
; trust TRUST_THEORY_REWRITE
(step @p3175 :rule trust :premises () :args ((= (= @t793 @t787) @t794)))
(step @p3176 :rule refl :args (@t787))
; trust TRUST_THEORY_REWRITE
(step @p3177 :rule trust :premises () :args ((= (= @t689 @t689) true)))
(step @p3178 :rule skolem_intro :args (@t793))
(step @p3179 :rule refl :args (@t689))
(step @p3180 :rule cong :premises (@p3179 @p3178) :args (=))
(step @p3181 :rule refl :args ((= @t689 @t793)))
(step @p3182 :rule trans :premises (@p3181 @p3180 @p3177))
(step @p3183 :rule true_elim :premises (@p3182))
(step @p3184 :rule cong :premises (@p3183 @p3176) :args (=))
(step @p3185 :rule trans :premises (@p3184 @p3175))
(step @p3186 :rule refl :args (@t790))
(step @p3187 :rule refl :args (@t690))
(step @p3188 :rule cong :premises (@p3187 @p3186 @p3185) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p3189 :rule trust :premises () :args ((= (= @t787 @t689) (= @t689 @t787))))
; trust TRUST_THEORY_REWRITE
(step @p3190 :rule trust :premises () :args ((= (= @t787 V2_get_greet+0xd) @t790)))
(step @p3191 :rule cong :premises (@p3187 @p3190 @p3189) :args (ite))
(step @p3192 :rule trans :premises (@p3191 @p3188))
(step @p3193 :rule cong :premises (@p3109 @p3179) :args (=))
(step @p3194 :rule cong :premises (@p3109 @p1107) :args (=))
(step @p3195 :rule cong :premises (@p3187 @p3194 @p3193) :args (ite))
(step @p3196 :rule ite_eq :args (@t691))
(step @p3197 :rule eq_resolve :premises (@p3196 @p3195))
(step @p3198 :rule eq_resolve :premises (@p3197 @p3192))
(step @p3199 :rule ite_elim1 :premises (@p3198))
(step @p3200 :rule reordering :premises (@p3199) :args ((or @t790 @t795)))
(step @p3201 :rule ite_elim2 :premises (@p3198))
(assume-push @p8227 @t703)
(assume-push @p8228 @t713)
(assume-push @p8229 @t722)
(assume-push @p8230 @t770)
(assume-push @p8231 @t776)
(assume-push @p8232 @t782)
(assume-push @p8233 @t788)
(assume-push @p8234 @t794)
(assume-push @p8235 @t722)
(assume-push @p8236 @t703)
(assume-push @p8237 @t713)
(assume-push @p8238 @t770)
(assume-push @p8239 @t776)
(assume-push @p8240 @t782)
(assume-push @p8241 @t788)
(assume-push @p8242 @t794)
(step @p3218 :rule symm :premises (@p8229))
(step @p3219 :rule symm :premises (@p8227))
(step @p3220 :rule symm :premises (@p3219))
(step @p3221 :rule symm :premises (@p8228))
(step @p3222 :rule symm :premises (@p8230))
(step @p3223 :rule symm :premises (@p8231))
(step @p3224 :rule symm :premises (@p8232))
(step @p3225 :rule symm :premises (@p8233))
(step @p3226 :rule symm :premises (@p8234))
(step @p3227 :rule trans :premises (@p3226 @p3225 @p3224 @p3223 @p3222 @p3221 @p3220 @p3218))
(step @p3228 :rule cong :premises (@p1104 @p3227) :args (=))
(step @p3229 :rule trans :premises (@p3228 @p2124))
(step @p3230 :rule false_elim :premises (@p3229))
(step-pop @p8242 :rule scope :premises (@p3230))
(step-pop @p8243 :rule scope :premises (@p8242))
(step-pop @p8244 :rule scope :premises (@p8243))
(step-pop @p8245 :rule scope :premises (@p8244))
(step-pop @p8246 :rule scope :premises (@p8245))
(step-pop @p8247 :rule scope :premises (@p8246))
(step-pop @p8248 :rule scope :premises (@p8247))
(step-pop @p8249 :rule scope :premises (@p8248))
(step @p3231 :rule process_scope :premises (@p8249) :args (@t797))
(step @p3240 :rule and_intro :premises (@p8229 @p8227 @p8228 @p8230 @p8231 @p8232 @p8233 @p8234))
(step @p3241 :rule modus_ponens :premises (@p3240 @p3231))
(step-pop @p8250 :rule scope :premises (@p3241))
(step-pop @p8251 :rule scope :premises (@p8250))
(step-pop @p8252 :rule scope :premises (@p8251))
(step-pop @p8253 :rule scope :premises (@p8252))
(step-pop @p8254 :rule scope :premises (@p8253))
(step-pop @p8255 :rule scope :premises (@p8254))
(step-pop @p8256 :rule scope :premises (@p8255))
(step-pop @p8257 :rule scope :premises (@p8256))
(step @p3242 :rule process_scope :premises (@p8257) :args (@t797))
(step @p3251 :rule implies_elim :premises (@p3242))
(step @p3252 :rule cnf_and_neg :args (@t798))
(step @p3253 :rule resolution :premises (@p3252 @p3251) :args (true @t798))
; trust TRUST_THEORY_REWRITE
(step @p3254 :rule trust :premises () :args ((= (= @t708 @t793) @t799)))
(step @p3255 :rule refl :args (@t793))
(step @p3256 :rule cong :premises (@p2246 @p3255) :args (=))
(step @p3257 :rule trans :premises (@p3256 @p3254))
(step @p3258 :rule refl :args (@t796))
(step @p3259 :rule refl :args (@t688))
(step @p3260 :rule cong :premises (@p3259 @p3258 @p3257) :args (ite))
; trust TRUST_THEORY_REWRITE
(step @p3261 :rule trust :premises () :args ((= (= @t793 @t687) (= @t687 @t793))))
; trust TRUST_THEORY_REWRITE
(step @p3262 :rule trust :premises () :args ((= (= @t793 V2_get_greet+0x16) @t796)))
(step @p3263 :rule cong :premises (@p3259 @p3262 @p3261) :args (ite))
(step @p3264 :rule trans :premises (@p3263 @p3260))
(step @p3265 :rule cong :premises (@p3183 @p2242) :args (=))
(step @p3266 :rule cong :premises (@p3183 @p1104) :args (=))
(step @p3267 :rule cong :premises (@p3259 @p3266 @p3265) :args (ite))
(step @p3268 :rule ite_eq :args (@t689))
(step @p3269 :rule eq_resolve :premises (@p3268 @p3267))
(step @p3270 :rule eq_resolve :premises (@p3269 @p3264))
(step @p3271 :rule ite_elim1 :premises (@p3270))
(step @p3272 :rule reordering :premises (@p3271) :args ((or @t796 @t800)))
(step @p3273 :rule ite_elim2 :premises (@p3270))
(assume-push @p8259 @t703)
(assume-push @p8260 @t713)
(assume-push @p8261 @t722)
(assume-push @p8262 @t770)
(assume-push @p8263 @t776)
(assume-push @p8264 @t782)
(assume-push @p8265 @t788)
(assume-push @p8266 @t794)
(assume-push @p8267 @t799)
(assume-push @p8268 @t722)
(assume-push @p8269 @t703)
(assume-push @p8270 @t713)
(assume-push @p8271 @t770)
(assume-push @p8272 @t776)
(assume-push @p8273 @t782)
(assume-push @p8274 @t788)
(assume-push @p8275 @t794)
(assume-push @p8276 @t799)
(step @p3292 :rule symm :premises (@p8261))
(step @p3293 :rule symm :premises (@p8259))
(step @p3294 :rule symm :premises (@p3293))
(step @p3295 :rule symm :premises (@p8260))
(step @p3296 :rule symm :premises (@p8262))
(step @p3297 :rule symm :premises (@p8263))
(step @p3298 :rule symm :premises (@p8264))
(step @p3299 :rule symm :premises (@p8265))
(step @p3300 :rule symm :premises (@p8266))
(step @p3301 :rule symm :premises (@p8267))
(step @p3302 :rule trans :premises (@p3301 @p3300 @p3299 @p3298 @p3297 @p3296 @p3295 @p3294 @p3292))
(step @p3303 :rule cong :premises (@p1100 @p3302) :args (=))
(step @p3304 :rule trans :premises (@p3303 @p2151))
(step @p3305 :rule false_elim :premises (@p3304))
(step-pop @p8276 :rule scope :premises (@p3305))
(step-pop @p8277 :rule scope :premises (@p8276))
(step-pop @p8278 :rule scope :premises (@p8277))
(step-pop @p8279 :rule scope :premises (@p8278))
(step-pop @p8280 :rule scope :premises (@p8279))
(step-pop @p8281 :rule scope :premises (@p8280))
(step-pop @p8282 :rule scope :premises (@p8281))
(step-pop @p8283 :rule scope :premises (@p8282))
(step-pop @p8284 :rule scope :premises (@p8283))
(step @p3306 :rule process_scope :premises (@p8284) :args (@t801))
(step @p3316 :rule and_intro :premises (@p8261 @p8259 @p8260 @p8262 @p8263 @p8264 @p8265 @p8266 @p8267))
(step @p3317 :rule modus_ponens :premises (@p3316 @p3306))
(step-pop @p8285 :rule scope :premises (@p3317))
(step-pop @p8286 :rule scope :premises (@p8285))
(step-pop @p8287 :rule scope :premises (@p8286))
(step-pop @p8288 :rule scope :premises (@p8287))
(step-pop @p8289 :rule scope :premises (@p8288))
(step-pop @p8290 :rule scope :premises (@p8289))
(step-pop @p8291 :rule scope :premises (@p8290))
(step-pop @p8292 :rule scope :premises (@p8291))
(step-pop @p8293 :rule scope :premises (@p8292))
(step @p3318 :rule process_scope :premises (@p8293) :args (@t801))
(step @p3328 :rule implies_elim :premises (@p3318))
(step @p3329 :rule cnf_and_neg :args (@t802))
(step @p3330 :rule resolution :premises (@p3329 @p3328) :args (true @t802))
(assume-push @p8295 @t703)
(assume-push @p8296 @t713)
(assume-push @p8297 @t722)
(assume-push @p8298 @t770)
(assume-push @p8299 @t776)
(assume-push @p8300 @t782)
(assume-push @p8301 @t788)
(assume-push @p8302 @t794)
(assume-push @p8303 @t799)
(assume-push @p8304 @t722)
(assume-push @p8305 @t703)
(assume-push @p8306 @t713)
(assume-push @p8307 @t770)
(assume-push @p8308 @t776)
(assume-push @p8309 @t782)
(assume-push @p8310 @t788)
(assume-push @p8311 @t794)
(assume-push @p8312 @t799)
(step @p3349 :rule symm :premises (@p8297))
(step @p3350 :rule symm :premises (@p8295))
(step @p3351 :rule symm :premises (@p3350))
(step @p3352 :rule symm :premises (@p8296))
(step @p3353 :rule symm :premises (@p8298))
(step @p3354 :rule symm :premises (@p8299))
(step @p3355 :rule symm :premises (@p8300))
(step @p3356 :rule symm :premises (@p8301))
(step @p3357 :rule symm :premises (@p8302))
(step @p3358 :rule symm :premises (@p8303))
(step @p3359 :rule trans :premises (@p3358 @p3357 @p3356 @p3355 @p3354 @p3353 @p3352 @p3351 @p3349))
(step @p3360 :rule cong :premises (@p1101 @p3359) :args (=))
(step @p3361 :rule trans :premises (@p3360 @p2136))
(step @p3362 :rule false_elim :premises (@p3361))
(step-pop @p8312 :rule scope :premises (@p3362))
(step-pop @p8313 :rule scope :premises (@p8312))
(step-pop @p8314 :rule scope :premises (@p8313))
(step-pop @p8315 :rule scope :premises (@p8314))
(step-pop @p8316 :rule scope :premises (@p8315))
(step-pop @p8317 :rule scope :premises (@p8316))
(step-pop @p8318 :rule scope :premises (@p8317))
(step-pop @p8319 :rule scope :premises (@p8318))
(step-pop @p8320 :rule scope :premises (@p8319))
(step @p3363 :rule process_scope :premises (@p8320) :args (@t803))
(step @p3373 :rule and_intro :premises (@p8297 @p8295 @p8296 @p8298 @p8299 @p8300 @p8301 @p8302 @p8303))
(step @p3374 :rule modus_ponens :premises (@p3373 @p3363))
(step-pop @p8321 :rule scope :premises (@p3374))
(step-pop @p8322 :rule scope :premises (@p8321))
(step-pop @p8323 :rule scope :premises (@p8322))
(step-pop @p8324 :rule scope :premises (@p8323))
(step-pop @p8325 :rule scope :premises (@p8324))
(step-pop @p8326 :rule scope :premises (@p8325))
(step-pop @p8327 :rule scope :premises (@p8326))
(step-pop @p8328 :rule scope :premises (@p8327))
(step-pop @p8329 :rule scope :premises (@p8328))
(step @p3375 :rule process_scope :premises (@p8329) :args (@t803))
(step @p3385 :rule implies_elim :premises (@p3375))
(step @p3386 :rule resolution :premises (@p3329 @p3385) :args (true @t802))
(step @p3387 :rule ite_elim2 :premises (@p2252))
(step @p3388 :rule chain_resolution :premises (@p2254 @p3387 @p3386 @p2881 @p2261 @p3330 @p2881 @p2261) :args ((@list false true false false true false false) (@list @t686 @t710 @t713 @t703 @t709 @t713 @t703)))
(step @p3389 :rule factoring :premises (@p3388))
(step @p3390 :rule chain_resolution :premises (@p3389 @p3273 @p3272 @p3253 @p2881 @p2261) :args (@t804 (@list @t799 @t688 @t796 @t713 @t703)))
(step @p3391 :rule factoring :premises (@p3390))
(step @p3392 :rule chain_resolution :premises (@p3391 @p3201 @p3200 @p3174 @p2881 @p2261) :args (@t804 (@list @t794 @t690 @t790 @t713 @t703)))
(step @p3393 :rule factoring :premises (@p3392))
(step @p3394 :rule chain_resolution :premises (@p3393 @p3127 @p3126 @p3100 @p2881 @p2261) :args (@t804 (@list @t788 @t692 @t784 @t713 @t703)))
(step @p3395 :rule factoring :premises (@p3394))
(step @p3396 :rule chain_resolution :premises (@p3395 @p3058 @p3057 @p3031 @p2881 @p2261) :args (@t804 (@list @t782 @t694 @t778 @t713 @t703)))
(step @p3397 :rule factoring :premises (@p3396))
(step @p3398 :rule chain_resolution :premises (@p3397 @p2994 @p2993 @p2967 @p2881 @p2261) :args (@t804 (@list @t776 @t696 @t772 @t713 @t703)))
(step @p3399 :rule factoring :premises (@p3398))
(step @p3400 :rule chain_resolution :premises (@p3399 @p2935 @p2934 @p2908 @p2881 @p2261) :args (@t804 (@list @t770 @t698 @t766 @t713 @t703)))
(step @p3401 :rule factoring :premises (@p3400))
(step @p3402 :rule ite_elim1 :premises (@p2345))
(step @p3403 :rule reordering :premises (@p3402) :args ((or @t722 @t717)))
(step @p3404 :rule chain_resolution :premises (@p3403 @p3401) :args (@t155 (@list @t722)))
(step @p3405 :rule chain_resolution :premises (@p2346 @p3404) :args (@t155 (@list @t683)))
(step @p3406 :rule refl :args (@t771))
(step @p3407 :rule refl :args (@t728))
(step @p3408 :rule nary_cong :premises (@p3407 @p3406 @p2288) :args (or))
(assume-push @p8331 @t698)
(assume-push @p8332 @t681)
(assume-push @p8333 @t716)
; trust TRUST_THEORY_REWRITE
(step @p2295 :rule trust :premises () :args (@t718))
(step @p3412 :rule symm :premises (@p8331))
(step @p3413 :rule symm :premises (@p3412))
(step @p3414 :rule symm :premises (@p8332))
(step @p3415 :rule trans :premises (@p3414 @p3413))
(step @p3416 :rule true_intro :premises (@p3415))
(step @p3417 :rule false_intro :premises (@p8333))
(step @p3418 :rule symm :premises (@p3417))
(step @p3419 :rule trans :premises (@p3418 @p3416))
(step @p3420 false :rule eq_resolve :premises (@p3419 @p2295))
(step-pop @p8333 :rule scope :premises (@p3420))
(step-pop @p8334 :rule scope :premises (@p8333))
(step-pop @p8335 :rule scope :premises (@p8334))
(step @p3421 :rule process_scope :premises (@p8335) :args (false))
(assume-push @p8337 @t681)
(assume-push @p8338 @t698)
(assume-push @p8339 @t716)
(step @p3428 :rule and_intro :premises (@p8338 @p8337 @p8339))
(step-pop @p8339 :rule scope :premises (@p3428))
(step-pop @p8340 :rule scope :premises (@p8339))
(step-pop @p8341 :rule scope :premises (@p8340))
(step @p3429 :rule process_scope :premises (@p8341) :args (@t805))
(step @p3433 :rule implies_elim :premises (@p3429))
(step @p3434 :rule resolution :premises (@p3433 @p3421) :args (true @t805))
(step @p3435 :rule not_and :premises (@p3434))
(step @p3436 :rule eq_resolve :premises (@p3435 @p3408))
(step @p3437 :rule reordering :premises (@p3436) :args ((or @t668 @t771 @t728)))
(assume-push @p8343 @t703)
(assume-push @p8344 @t713)
(assume-push @p8345 @t721)
(assume-push @p8346 @t766)
(assume-push @p8347 @t727)
(assume-push @p8348 @t766)
(assume-push @p8349 @t713)
(assume-push @p8350 @t703)
(assume-push @p8351 @t721)
(assume-push @p8352 @t727)
(step @p3448 :rule symm :premises (@p8346))
(step @p3449 :rule symm :premises (@p8344))
(step @p3450 :rule symm :premises (@p3449))
(step @p3451 :rule symm :premises (@p8343))
(step @p3452 :rule symm :premises (@p8345))
(step @p3453 :rule symm :premises (@p8347))
(step @p3454 :rule trans :premises (@p3453 @p3452 @p3451 @p3450 @p3448))
(step @p3455 :rule cong :premises (@p1116 @p3454) :args (=))
(step @p3456 :rule trans :premises (@p3455 @p1965))
(step @p3457 :rule false_elim :premises (@p3456))
(step-pop @p8352 :rule scope :premises (@p3457))
(step-pop @p8353 :rule scope :premises (@p8352))
(step-pop @p8354 :rule scope :premises (@p8353))
(step-pop @p8355 :rule scope :premises (@p8354))
(step-pop @p8356 :rule scope :premises (@p8355))
(step @p3458 :rule process_scope :premises (@p8356) :args (@t730))
(step @p3464 :rule and_intro :premises (@p8346 @p8344 @p8343 @p8345 @p8347))
(step @p3465 :rule modus_ponens :premises (@p3464 @p3458))
(step-pop @p8357 :rule scope :premises (@p3465))
(step-pop @p8358 :rule scope :premises (@p8357))
(step-pop @p8359 :rule scope :premises (@p8358))
(step-pop @p8360 :rule scope :premises (@p8359))
(step-pop @p8361 :rule scope :premises (@p8360))
(step @p3466 :rule process_scope :premises (@p8361) :args (@t730))
(step @p3472 :rule implies_elim :premises (@p3466))
(step @p3473 :rule cnf_and_neg :args (@t806))
(step @p3474 :rule resolution :premises (@p3473 @p3472) :args (true @t806))
(assume-push @p8363 @t703)
(assume-push @p8364 @t713)
(assume-push @p8365 @t721)
(assume-push @p8366 @t766)
(assume-push @p8367 @t727)
(assume-push @p8368 @t733)
(assume-push @p8369 @t766)
(assume-push @p8370 @t713)
(assume-push @p8371 @t703)
(assume-push @p8372 @t721)
(assume-push @p8373 @t727)
(assume-push @p8374 @t733)
(step @p3487 :rule symm :premises (@p8366))
(step @p3488 :rule symm :premises (@p8364))
(step @p3489 :rule symm :premises (@p3488))
(step @p3490 :rule symm :premises (@p8363))
(step @p3491 :rule symm :premises (@p8365))
(step @p3492 :rule symm :premises (@p8367))
(step @p3493 :rule symm :premises (@p8368))
(step @p3494 :rule trans :premises (@p3493 @p3492 @p3491 @p3490 @p3489 @p3487))
(step @p3495 :rule cong :premises (@p1113 @p3494) :args (=))
(step @p3496 :rule trans :premises (@p3495 @p1978))
(step @p3497 :rule false_elim :premises (@p3496))
(step-pop @p8374 :rule scope :premises (@p3497))
(step-pop @p8375 :rule scope :premises (@p8374))
(step-pop @p8376 :rule scope :premises (@p8375))
(step-pop @p8377 :rule scope :premises (@p8376))
(step-pop @p8378 :rule scope :premises (@p8377))
(step-pop @p8379 :rule scope :premises (@p8378))
(step @p3498 :rule process_scope :premises (@p8379) :args (@t736))
(step @p3505 :rule and_intro :premises (@p8366 @p8364 @p8363 @p8365 @p8367 @p8368))
(step @p3506 :rule modus_ponens :premises (@p3505 @p3498))
(step-pop @p8380 :rule scope :premises (@p3506))
(step-pop @p8381 :rule scope :premises (@p8380))
(step-pop @p8382 :rule scope :premises (@p8381))
(step-pop @p8383 :rule scope :premises (@p8382))
(step-pop @p8384 :rule scope :premises (@p8383))
(step-pop @p8385 :rule scope :premises (@p8384))
(step @p3507 :rule process_scope :premises (@p8385) :args (@t736))
(step @p3514 :rule implies_elim :premises (@p3507))
(step @p3515 :rule cnf_and_neg :args (@t807))
(step @p3516 :rule resolution :premises (@p3515 @p3514) :args (true @t807))
(assume-push @p8387 @t703)
(assume-push @p8388 @t713)
(assume-push @p8389 @t721)
(assume-push @p8390 @t766)
(assume-push @p8391 @t727)
(assume-push @p8392 @t733)
(assume-push @p8393 @t739)
(assume-push @p8394 @t766)
(assume-push @p8395 @t713)
(assume-push @p8396 @t703)
(assume-push @p8397 @t721)
(assume-push @p8398 @t727)
(assume-push @p8399 @t733)
(assume-push @p8400 @t739)
(step @p3531 :rule symm :premises (@p8390))
(step @p3532 :rule symm :premises (@p8388))
(step @p3533 :rule symm :premises (@p3532))
(step @p3534 :rule symm :premises (@p8387))
(step @p3535 :rule symm :premises (@p8389))
(step @p3536 :rule symm :premises (@p8391))
(step @p3537 :rule symm :premises (@p8392))
(step @p3538 :rule symm :premises (@p8393))
(step @p3539 :rule trans :premises (@p3538 @p3537 @p3536 @p3535 @p3534 @p3533 @p3531))
(step @p3540 :rule cong :premises (@p1110 @p3539) :args (=))
(step @p3541 :rule trans :premises (@p3540 @p1973))
(step @p3542 :rule false_elim :premises (@p3541))
(step-pop @p8400 :rule scope :premises (@p3542))
(step-pop @p8401 :rule scope :premises (@p8400))
(step-pop @p8402 :rule scope :premises (@p8401))
(step-pop @p8403 :rule scope :premises (@p8402))
(step-pop @p8404 :rule scope :premises (@p8403))
(step-pop @p8405 :rule scope :premises (@p8404))
(step-pop @p8406 :rule scope :premises (@p8405))
(step @p3543 :rule process_scope :premises (@p8406) :args (@t742))
(step @p3551 :rule and_intro :premises (@p8390 @p8388 @p8387 @p8389 @p8391 @p8392 @p8393))
(step @p3552 :rule modus_ponens :premises (@p3551 @p3543))
(step-pop @p8407 :rule scope :premises (@p3552))
(step-pop @p8408 :rule scope :premises (@p8407))
(step-pop @p8409 :rule scope :premises (@p8408))
(step-pop @p8410 :rule scope :premises (@p8409))
(step-pop @p8411 :rule scope :premises (@p8410))
(step-pop @p8412 :rule scope :premises (@p8411))
(step-pop @p8413 :rule scope :premises (@p8412))
(step @p3553 :rule process_scope :premises (@p8413) :args (@t742))
(step @p3561 :rule implies_elim :premises (@p3553))
(step @p3562 :rule cnf_and_neg :args (@t808))
(step @p3563 :rule resolution :premises (@p3562 @p3561) :args (true @t808))
(assume-push @p8415 @t703)
(assume-push @p8416 @t713)
(assume-push @p8417 @t721)
(assume-push @p8418 @t766)
(assume-push @p8419 @t727)
(assume-push @p8420 @t733)
(assume-push @p8421 @t739)
(assume-push @p8422 @t745)
(assume-push @p8423 @t766)
(assume-push @p8424 @t713)
(assume-push @p8425 @t703)
(assume-push @p8426 @t721)
(assume-push @p8427 @t727)
(assume-push @p8428 @t733)
(assume-push @p8429 @t739)
(assume-push @p8430 @t745)
(step @p3580 :rule symm :premises (@p8418))
(step @p3581 :rule symm :premises (@p8416))
(step @p3582 :rule symm :premises (@p3581))
(step @p3583 :rule symm :premises (@p8415))
(step @p3584 :rule symm :premises (@p8417))
(step @p3585 :rule symm :premises (@p8419))
(step @p3586 :rule symm :premises (@p8420))
(step @p3587 :rule symm :premises (@p8421))
(step @p3588 :rule symm :premises (@p8422))
(step @p3589 :rule trans :premises (@p3588 @p3587 @p3586 @p3585 @p3584 @p3583 @p3582 @p3580))
(step @p3590 :rule cong :premises (@p1107 @p3589) :args (=))
(step @p3591 :rule trans :premises (@p3590 @p2004))
(step @p3592 :rule false_elim :premises (@p3591))
(step-pop @p8430 :rule scope :premises (@p3592))
(step-pop @p8431 :rule scope :premises (@p8430))
(step-pop @p8432 :rule scope :premises (@p8431))
(step-pop @p8433 :rule scope :premises (@p8432))
(step-pop @p8434 :rule scope :premises (@p8433))
(step-pop @p8435 :rule scope :premises (@p8434))
(step-pop @p8436 :rule scope :premises (@p8435))
(step-pop @p8437 :rule scope :premises (@p8436))
(step @p3593 :rule process_scope :premises (@p8437) :args (@t748))
(step @p3602 :rule and_intro :premises (@p8418 @p8416 @p8415 @p8417 @p8419 @p8420 @p8421 @p8422))
(step @p3603 :rule modus_ponens :premises (@p3602 @p3593))
(step-pop @p8438 :rule scope :premises (@p3603))
(step-pop @p8439 :rule scope :premises (@p8438))
(step-pop @p8440 :rule scope :premises (@p8439))
(step-pop @p8441 :rule scope :premises (@p8440))
(step-pop @p8442 :rule scope :premises (@p8441))
(step-pop @p8443 :rule scope :premises (@p8442))
(step-pop @p8444 :rule scope :premises (@p8443))
(step-pop @p8445 :rule scope :premises (@p8444))
(step @p3604 :rule process_scope :premises (@p8445) :args (@t748))
(step @p3613 :rule implies_elim :premises (@p3604))
(step @p3614 :rule cnf_and_neg :args (@t809))
(step @p3615 :rule resolution :premises (@p3614 @p3613) :args (true @t809))
(assume-push @p8447 @t703)
(assume-push @p8448 @t713)
(assume-push @p8449 @t721)
(assume-push @p8450 @t766)
(assume-push @p8451 @t727)
(assume-push @p8452 @t733)
(assume-push @p8453 @t739)
(assume-push @p8454 @t745)
(assume-push @p8455 @t751)
(assume-push @p8456 @t766)
(assume-push @p8457 @t713)
(assume-push @p8458 @t703)
(assume-push @p8459 @t721)
(assume-push @p8460 @t727)
(assume-push @p8461 @t733)
(assume-push @p8462 @t739)
(assume-push @p8463 @t745)
(assume-push @p8464 @t751)
(step @p3634 :rule symm :premises (@p8450))
(step @p3635 :rule symm :premises (@p8448))
(step @p3636 :rule symm :premises (@p3635))
(step @p3637 :rule symm :premises (@p8447))
(step @p3638 :rule symm :premises (@p8449))
(step @p3639 :rule symm :premises (@p8451))
(step @p3640 :rule symm :premises (@p8452))
(step @p3641 :rule symm :premises (@p8453))
(step @p3642 :rule symm :premises (@p8454))
(step @p3643 :rule symm :premises (@p8455))
(step @p3644 :rule trans :premises (@p3643 @p3642 @p3641 @p3640 @p3639 @p3638 @p3637 @p3636 @p3634))
(step @p3645 :rule cong :premises (@p1104 @p3644) :args (=))
(step @p3646 :rule trans :premises (@p3645 @p2012))
(step @p3647 :rule false_elim :premises (@p3646))
(step-pop @p8464 :rule scope :premises (@p3647))
(step-pop @p8465 :rule scope :premises (@p8464))
(step-pop @p8466 :rule scope :premises (@p8465))
(step-pop @p8467 :rule scope :premises (@p8466))
(step-pop @p8468 :rule scope :premises (@p8467))
(step-pop @p8469 :rule scope :premises (@p8468))
(step-pop @p8470 :rule scope :premises (@p8469))
(step-pop @p8471 :rule scope :premises (@p8470))
(step-pop @p8472 :rule scope :premises (@p8471))
(step @p3648 :rule process_scope :premises (@p8472) :args (@t754))
(step @p3658 :rule and_intro :premises (@p8450 @p8448 @p8447 @p8449 @p8451 @p8452 @p8453 @p8454 @p8455))
(step @p3659 :rule modus_ponens :premises (@p3658 @p3648))
(step-pop @p8473 :rule scope :premises (@p3659))
(step-pop @p8474 :rule scope :premises (@p8473))
(step-pop @p8475 :rule scope :premises (@p8474))
(step-pop @p8476 :rule scope :premises (@p8475))
(step-pop @p8477 :rule scope :premises (@p8476))
(step-pop @p8478 :rule scope :premises (@p8477))
(step-pop @p8479 :rule scope :premises (@p8478))
(step-pop @p8480 :rule scope :premises (@p8479))
(step-pop @p8481 :rule scope :premises (@p8480))
(step @p3660 :rule process_scope :premises (@p8481) :args (@t754))
(step @p3670 :rule implies_elim :premises (@p3660))
(step @p3671 :rule cnf_and_neg :args (@t810))
(step @p3672 :rule resolution :premises (@p3671 @p3670) :args (true @t810))
(assume-push @p8483 @t703)
(assume-push @p8484 @t713)
(assume-push @p8485 @t721)
(assume-push @p8486 @t766)
(assume-push @p8487 @t727)
(assume-push @p8488 @t733)
(assume-push @p8489 @t739)
(assume-push @p8490 @t745)
(assume-push @p8491 @t751)
(assume-push @p8492 @t757)
(assume-push @p8493 @t766)
(assume-push @p8494 @t713)
(assume-push @p8495 @t703)
(assume-push @p8496 @t721)
(assume-push @p8497 @t727)
(assume-push @p8498 @t733)
(assume-push @p8499 @t739)
(assume-push @p8500 @t745)
(assume-push @p8501 @t751)
(assume-push @p8502 @t757)
(step @p3693 :rule symm :premises (@p8486))
(step @p3694 :rule symm :premises (@p8484))
(step @p3695 :rule symm :premises (@p3694))
(step @p3696 :rule symm :premises (@p8483))
(step @p3697 :rule symm :premises (@p8485))
(step @p3698 :rule symm :premises (@p8487))
(step @p3699 :rule symm :premises (@p8488))
(step @p3700 :rule symm :premises (@p8489))
(step @p3701 :rule symm :premises (@p8490))
(step @p3702 :rule symm :premises (@p8491))
(step @p3703 :rule symm :premises (@p8492))
(step @p3704 :rule trans :premises (@p3703 @p3702 @p3701 @p3700 @p3699 @p3698 @p3697 @p3696 @p3695 @p3693))
(step @p3705 :rule cong :premises (@p1100 @p3704) :args (=))
(step @p3706 :rule trans :premises (@p3705 @p2039))
(step @p3707 :rule false_elim :premises (@p3706))
(step-pop @p8502 :rule scope :premises (@p3707))
(step-pop @p8503 :rule scope :premises (@p8502))
(step-pop @p8504 :rule scope :premises (@p8503))
(step-pop @p8505 :rule scope :premises (@p8504))
(step-pop @p8506 :rule scope :premises (@p8505))
(step-pop @p8507 :rule scope :premises (@p8506))
(step-pop @p8508 :rule scope :premises (@p8507))
(step-pop @p8509 :rule scope :premises (@p8508))
(step-pop @p8510 :rule scope :premises (@p8509))
(step-pop @p8511 :rule scope :premises (@p8510))
(step @p3708 :rule process_scope :premises (@p8511) :args (@t760))
(step @p3719 :rule and_intro :premises (@p8486 @p8484 @p8483 @p8485 @p8487 @p8488 @p8489 @p8490 @p8491 @p8492))
(step @p3720 :rule modus_ponens :premises (@p3719 @p3708))
(step-pop @p8512 :rule scope :premises (@p3720))
(step-pop @p8513 :rule scope :premises (@p8512))
(step-pop @p8514 :rule scope :premises (@p8513))
(step-pop @p8515 :rule scope :premises (@p8514))
(step-pop @p8516 :rule scope :premises (@p8515))
(step-pop @p8517 :rule scope :premises (@p8516))
(step-pop @p8518 :rule scope :premises (@p8517))
(step-pop @p8519 :rule scope :premises (@p8518))
(step-pop @p8520 :rule scope :premises (@p8519))
(step-pop @p8521 :rule scope :premises (@p8520))
(step @p3721 :rule process_scope :premises (@p8521) :args (@t760))
(step @p3732 :rule implies_elim :premises (@p3721))
(step @p3733 :rule cnf_and_neg :args (@t811))
(step @p3734 :rule resolution :premises (@p3733 @p3732) :args (true @t811))
(assume-push @p8523 @t703)
(assume-push @p8524 @t713)
(assume-push @p8525 @t721)
(assume-push @p8526 @t766)
(assume-push @p8527 @t727)
(assume-push @p8528 @t733)
(assume-push @p8529 @t739)
(assume-push @p8530 @t745)
(assume-push @p8531 @t751)
(assume-push @p8532 @t757)
(assume-push @p8533 @t766)
(assume-push @p8534 @t713)
(assume-push @p8535 @t703)
(assume-push @p8536 @t721)
(assume-push @p8537 @t727)
(assume-push @p8538 @t733)
(assume-push @p8539 @t739)
(assume-push @p8540 @t745)
(assume-push @p8541 @t751)
(assume-push @p8542 @t757)
(step @p3755 :rule symm :premises (@p8526))
(step @p3756 :rule symm :premises (@p8524))
(step @p3757 :rule symm :premises (@p3756))
(step @p3758 :rule symm :premises (@p8523))
(step @p3759 :rule symm :premises (@p8525))
(step @p3760 :rule symm :premises (@p8527))
(step @p3761 :rule symm :premises (@p8528))
(step @p3762 :rule symm :premises (@p8529))
(step @p3763 :rule symm :premises (@p8530))
(step @p3764 :rule symm :premises (@p8531))
(step @p3765 :rule symm :premises (@p8532))
(step @p3766 :rule trans :premises (@p3765 @p3764 @p3763 @p3762 @p3761 @p3760 @p3759 @p3758 @p3757 @p3755))
(step @p3767 :rule cong :premises (@p1101 @p3766) :args (=))
(step @p3768 :rule trans :premises (@p3767 @p2024))
(step @p3769 :rule false_elim :premises (@p3768))
(step-pop @p8542 :rule scope :premises (@p3769))
(step-pop @p8543 :rule scope :premises (@p8542))
(step-pop @p8544 :rule scope :premises (@p8543))
(step-pop @p8545 :rule scope :premises (@p8544))
(step-pop @p8546 :rule scope :premises (@p8545))
(step-pop @p8547 :rule scope :premises (@p8546))
(step-pop @p8548 :rule scope :premises (@p8547))
(step-pop @p8549 :rule scope :premises (@p8548))
(step-pop @p8550 :rule scope :premises (@p8549))
(step-pop @p8551 :rule scope :premises (@p8550))
(step @p3770 :rule process_scope :premises (@p8551) :args (@t763))
(step @p3781 :rule and_intro :premises (@p8526 @p8524 @p8523 @p8525 @p8527 @p8528 @p8529 @p8530 @p8531 @p8532))
(step @p3782 :rule modus_ponens :premises (@p3781 @p3770))
(step-pop @p8552 :rule scope :premises (@p3782))
(step-pop @p8553 :rule scope :premises (@p8552))
(step-pop @p8554 :rule scope :premises (@p8553))
(step-pop @p8555 :rule scope :premises (@p8554))
(step-pop @p8556 :rule scope :premises (@p8555))
(step-pop @p8557 :rule scope :premises (@p8556))
(step-pop @p8558 :rule scope :premises (@p8557))
(step-pop @p8559 :rule scope :premises (@p8558))
(step-pop @p8560 :rule scope :premises (@p8559))
(step-pop @p8561 :rule scope :premises (@p8560))
(step @p3783 :rule process_scope :premises (@p8561) :args (@t763))
(step @p3794 :rule implies_elim :premises (@p3783))
(step @p3795 :rule resolution :premises (@p3733 @p3794) :args (true @t811))
(step @p3796 :rule chain_resolution :premises (@p2863 @p2861 @p3795 @p3405 @p2881 @p2261 @p3734 @p3405 @p2881 @p2261) :args ((@list false true false false false true false false false) (@list @t669 @t762 @t721 @t713 @t703 @t759 @t721 @t713 @t703)))
(step @p3797 :rule factoring :premises (@p3796))
(step @p3798 :rule chain_resolution :premises (@p3797 @p2739 @p2738 @p3672 @p3405 @p2881 @p2261) :args (@t812 (@list @t757 @t671 @t753 @t721 @t713 @t703)))
(step @p3799 :rule factoring :premises (@p3798))
(step @p3800 :rule chain_resolution :premises (@p3799 @p2661 @p2660 @p3615 @p3405 @p2881 @p2261) :args (@t812 (@list @t751 @t673 @t747 @t721 @t713 @t703)))
(step @p3801 :rule factoring :premises (@p3800))
(step @p3802 :rule chain_resolution :premises (@p3801 @p2588 @p2587 @p3563 @p3405 @p2881 @p2261) :args (@t812 (@list @t745 @t675 @t741 @t721 @t713 @t703)))
(step @p3803 :rule factoring :premises (@p3802))
(step @p3804 :rule chain_resolution :premises (@p3803 @p2520 @p2519 @p3516 @p3405 @p2881 @p2261) :args (@t812 (@list @t739 @t677 @t735 @t721 @t713 @t703)))
(step @p3805 :rule factoring :premises (@p3804))
(step @p3806 :rule chain_resolution :premises (@p3805 @p2457 @p2456 @p3474 @p3405 @p2881 @p2261) :args (@t812 (@list @t733 @t679 @t729 @t721 @t713 @t703)))
(step @p3807 :rule factoring :premises (@p3806))
(step @p3808 :rule chain_resolution :premises (@p3807 @p2399 @p3437 @p2235 @p2934) :args (@t765 (@list @t727 @t681 @t668 @t766)))
(step @p3809 :rule factoring :premises (@p3808))
(step @p3810 :rule chain_resolution :premises (@p2935 @p3809) :args (@t155 (@list @t698)))
(assume-push @p8563 @t703)
(assume-push @p8564 @t713)
(assume-push @p8565 @t721)
(assume-push @p8566 @t770)
(assume-push @p8567 @t723)
(assume-push @p8568 @t723)
(assume-push @p8569 @t721)
(assume-push @p8570 @t703)
(assume-push @p8571 @t713)
(assume-push @p8572 @t770)
(step @p3821 :rule symm :premises (@p8567))
(step @p3822 :rule symm :premises (@p8565))
(step @p3823 :rule symm :premises (@p3822))
(step @p3824 :rule symm :premises (@p8563))
(step @p3825 :rule symm :premises (@p3824))
(step @p3826 :rule symm :premises (@p8564))
(step @p3827 :rule symm :premises (@p8566))
(step @p3828 :rule trans :premises (@p3827 @p3826 @p3825 @p3823 @p3821))
(step @p3829 :rule cong :premises (@p1116 @p3828) :args (=))
(step @p3830 :rule trans :premises (@p3829 @p1965))
(step @p3831 :rule false_elim :premises (@p3830))
(step-pop @p8572 :rule scope :premises (@p3831))
(step-pop @p8573 :rule scope :premises (@p8572))
(step-pop @p8574 :rule scope :premises (@p8573))
(step-pop @p8575 :rule scope :premises (@p8574))
(step-pop @p8576 :rule scope :premises (@p8575))
(step @p3832 :rule process_scope :premises (@p8576) :args (@t773))
(step @p3838 :rule and_intro :premises (@p8567 @p8565 @p8563 @p8564 @p8566))
(step @p3839 :rule modus_ponens :premises (@p3838 @p3832))
(step-pop @p8577 :rule scope :premises (@p3839))
(step-pop @p8578 :rule scope :premises (@p8577))
(step-pop @p8579 :rule scope :premises (@p8578))
(step-pop @p8580 :rule scope :premises (@p8579))
(step-pop @p8581 :rule scope :premises (@p8580))
(step @p3840 :rule process_scope :premises (@p8581) :args (@t773))
(step @p3846 :rule implies_elim :premises (@p3840))
(step @p3847 :rule cnf_and_neg :args (@t813))
(step @p3848 :rule resolution :premises (@p3847 @p3846) :args (true @t813))
(assume-push @p8583 @t703)
(assume-push @p8584 @t713)
(assume-push @p8585 @t721)
(assume-push @p8586 @t770)
(assume-push @p8587 @t723)
(assume-push @p8588 @t776)
(assume-push @p8589 @t723)
(assume-push @p8590 @t721)
(assume-push @p8591 @t703)
(assume-push @p8592 @t713)
(assume-push @p8593 @t770)
(assume-push @p8594 @t776)
(step @p3861 :rule symm :premises (@p8587))
(step @p3862 :rule symm :premises (@p8585))
(step @p3863 :rule symm :premises (@p3862))
(step @p3864 :rule symm :premises (@p8583))
(step @p3865 :rule symm :premises (@p3864))
(step @p3866 :rule symm :premises (@p8584))
(step @p3867 :rule symm :premises (@p8586))
(step @p3868 :rule symm :premises (@p8588))
(step @p3869 :rule trans :premises (@p3868 @p3867 @p3866 @p3865 @p3863 @p3861))
(step @p3870 :rule cong :premises (@p1113 @p3869) :args (=))
(step @p3871 :rule trans :premises (@p3870 @p1978))
(step @p3872 :rule false_elim :premises (@p3871))
(step-pop @p8594 :rule scope :premises (@p3872))
(step-pop @p8595 :rule scope :premises (@p8594))
(step-pop @p8596 :rule scope :premises (@p8595))
(step-pop @p8597 :rule scope :premises (@p8596))
(step-pop @p8598 :rule scope :premises (@p8597))
(step-pop @p8599 :rule scope :premises (@p8598))
(step @p3873 :rule process_scope :premises (@p8599) :args (@t779))
(step @p3880 :rule and_intro :premises (@p8587 @p8585 @p8583 @p8584 @p8586 @p8588))
(step @p3881 :rule modus_ponens :premises (@p3880 @p3873))
(step-pop @p8600 :rule scope :premises (@p3881))
(step-pop @p8601 :rule scope :premises (@p8600))
(step-pop @p8602 :rule scope :premises (@p8601))
(step-pop @p8603 :rule scope :premises (@p8602))
(step-pop @p8604 :rule scope :premises (@p8603))
(step-pop @p8605 :rule scope :premises (@p8604))
(step @p3882 :rule process_scope :premises (@p8605) :args (@t779))
(step @p3889 :rule implies_elim :premises (@p3882))
(step @p3890 :rule cnf_and_neg :args (@t814))
(step @p3891 :rule resolution :premises (@p3890 @p3889) :args (true @t814))
(assume-push @p8607 @t703)
(assume-push @p8608 @t713)
(assume-push @p8609 @t721)
(assume-push @p8610 @t770)
(assume-push @p8611 @t723)
(assume-push @p8612 @t776)
(assume-push @p8613 @t782)
(assume-push @p8614 @t723)
(assume-push @p8615 @t721)
(assume-push @p8616 @t703)
(assume-push @p8617 @t713)
(assume-push @p8618 @t770)
(assume-push @p8619 @t776)
(assume-push @p8620 @t782)
(step @p3906 :rule symm :premises (@p8611))
(step @p3907 :rule symm :premises (@p8609))
(step @p3908 :rule symm :premises (@p3907))
(step @p3909 :rule symm :premises (@p8607))
(step @p3910 :rule symm :premises (@p3909))
(step @p3911 :rule symm :premises (@p8608))
(step @p3912 :rule symm :premises (@p8610))
(step @p3913 :rule symm :premises (@p8612))
(step @p3914 :rule symm :premises (@p8613))
(step @p3915 :rule trans :premises (@p3914 @p3913 @p3912 @p3911 @p3910 @p3908 @p3906))
(step @p3916 :rule cong :premises (@p1110 @p3915) :args (=))
(step @p3917 :rule trans :premises (@p3916 @p1973))
(step @p3918 :rule false_elim :premises (@p3917))
(step-pop @p8620 :rule scope :premises (@p3918))
(step-pop @p8621 :rule scope :premises (@p8620))
(step-pop @p8622 :rule scope :premises (@p8621))
(step-pop @p8623 :rule scope :premises (@p8622))
(step-pop @p8624 :rule scope :premises (@p8623))
(step-pop @p8625 :rule scope :premises (@p8624))
(step-pop @p8626 :rule scope :premises (@p8625))
(step @p3919 :rule process_scope :premises (@p8626) :args (@t785))
(step @p3927 :rule and_intro :premises (@p8611 @p8609 @p8607 @p8608 @p8610 @p8612 @p8613))
(step @p3928 :rule modus_ponens :premises (@p3927 @p3919))
(step-pop @p8627 :rule scope :premises (@p3928))
(step-pop @p8628 :rule scope :premises (@p8627))
(step-pop @p8629 :rule scope :premises (@p8628))
(step-pop @p8630 :rule scope :premises (@p8629))
(step-pop @p8631 :rule scope :premises (@p8630))
(step-pop @p8632 :rule scope :premises (@p8631))
(step-pop @p8633 :rule scope :premises (@p8632))
(step @p3929 :rule process_scope :premises (@p8633) :args (@t785))
(step @p3937 :rule implies_elim :premises (@p3929))
(step @p3938 :rule cnf_and_neg :args (@t815))
(step @p3939 :rule resolution :premises (@p3938 @p3937) :args (true @t815))
(assume-push @p8635 @t703)
(assume-push @p8636 @t713)
(assume-push @p8637 @t721)
(assume-push @p8638 @t770)
(assume-push @p8639 @t723)
(assume-push @p8640 @t776)
(assume-push @p8641 @t782)
(assume-push @p8642 @t788)
(assume-push @p8643 @t723)
(assume-push @p8644 @t721)
(assume-push @p8645 @t703)
(assume-push @p8646 @t713)
(assume-push @p8647 @t770)
(assume-push @p8648 @t776)
(assume-push @p8649 @t782)
(assume-push @p8650 @t788)
(step @p3956 :rule symm :premises (@p8639))
(step @p3957 :rule symm :premises (@p8637))
(step @p3958 :rule symm :premises (@p3957))
(step @p3959 :rule symm :premises (@p8635))
(step @p3960 :rule symm :premises (@p3959))
(step @p3961 :rule symm :premises (@p8636))
(step @p3962 :rule symm :premises (@p8638))
(step @p3963 :rule symm :premises (@p8640))
(step @p3964 :rule symm :premises (@p8641))
(step @p3965 :rule symm :premises (@p8642))
(step @p3966 :rule trans :premises (@p3965 @p3964 @p3963 @p3962 @p3961 @p3960 @p3958 @p3956))
(step @p3967 :rule cong :premises (@p1107 @p3966) :args (=))
(step @p3968 :rule trans :premises (@p3967 @p2004))
(step @p3969 :rule false_elim :premises (@p3968))
(step-pop @p8650 :rule scope :premises (@p3969))
(step-pop @p8651 :rule scope :premises (@p8650))
(step-pop @p8652 :rule scope :premises (@p8651))
(step-pop @p8653 :rule scope :premises (@p8652))
(step-pop @p8654 :rule scope :premises (@p8653))
(step-pop @p8655 :rule scope :premises (@p8654))
(step-pop @p8656 :rule scope :premises (@p8655))
(step-pop @p8657 :rule scope :premises (@p8656))
(step @p3970 :rule process_scope :premises (@p8657) :args (@t791))
(step @p3979 :rule and_intro :premises (@p8639 @p8637 @p8635 @p8636 @p8638 @p8640 @p8641 @p8642))
(step @p3980 :rule modus_ponens :premises (@p3979 @p3970))
(step-pop @p8658 :rule scope :premises (@p3980))
(step-pop @p8659 :rule scope :premises (@p8658))
(step-pop @p8660 :rule scope :premises (@p8659))
(step-pop @p8661 :rule scope :premises (@p8660))
(step-pop @p8662 :rule scope :premises (@p8661))
(step-pop @p8663 :rule scope :premises (@p8662))
(step-pop @p8664 :rule scope :premises (@p8663))
(step-pop @p8665 :rule scope :premises (@p8664))
(step @p3981 :rule process_scope :premises (@p8665) :args (@t791))
(step @p3990 :rule implies_elim :premises (@p3981))
(step @p3991 :rule cnf_and_neg :args (@t816))
(step @p3992 :rule resolution :premises (@p3991 @p3990) :args (true @t816))
(assume-push @p8667 @t703)
(assume-push @p8668 @t713)
(assume-push @p8669 @t721)
(assume-push @p8670 @t770)
(assume-push @p8671 @t723)
(assume-push @p8672 @t776)
(assume-push @p8673 @t782)
(assume-push @p8674 @t788)
(assume-push @p8675 @t794)
(assume-push @p8676 @t723)
(assume-push @p8677 @t721)
(assume-push @p8678 @t703)
(assume-push @p8679 @t713)
(assume-push @p8680 @t770)
(assume-push @p8681 @t776)
(assume-push @p8682 @t782)
(assume-push @p8683 @t788)
(assume-push @p8684 @t794)
(step @p4011 :rule symm :premises (@p8671))
(step @p4012 :rule symm :premises (@p8669))
(step @p4013 :rule symm :premises (@p4012))
(step @p4014 :rule symm :premises (@p8667))
(step @p4015 :rule symm :premises (@p4014))
(step @p4016 :rule symm :premises (@p8668))
(step @p4017 :rule symm :premises (@p8670))
(step @p4018 :rule symm :premises (@p8672))
(step @p4019 :rule symm :premises (@p8673))
(step @p4020 :rule symm :premises (@p8674))
(step @p4021 :rule symm :premises (@p8675))
(step @p4022 :rule trans :premises (@p4021 @p4020 @p4019 @p4018 @p4017 @p4016 @p4015 @p4013 @p4011))
(step @p4023 :rule cong :premises (@p1104 @p4022) :args (=))
(step @p4024 :rule trans :premises (@p4023 @p2012))
(step @p4025 :rule false_elim :premises (@p4024))
(step-pop @p8684 :rule scope :premises (@p4025))
(step-pop @p8685 :rule scope :premises (@p8684))
(step-pop @p8686 :rule scope :premises (@p8685))
(step-pop @p8687 :rule scope :premises (@p8686))
(step-pop @p8688 :rule scope :premises (@p8687))
(step-pop @p8689 :rule scope :premises (@p8688))
(step-pop @p8690 :rule scope :premises (@p8689))
(step-pop @p8691 :rule scope :premises (@p8690))
(step-pop @p8692 :rule scope :premises (@p8691))
(step @p4026 :rule process_scope :premises (@p8692) :args (@t797))
(step @p4036 :rule and_intro :premises (@p8671 @p8669 @p8667 @p8668 @p8670 @p8672 @p8673 @p8674 @p8675))
(step @p4037 :rule modus_ponens :premises (@p4036 @p4026))
(step-pop @p8693 :rule scope :premises (@p4037))
(step-pop @p8694 :rule scope :premises (@p8693))
(step-pop @p8695 :rule scope :premises (@p8694))
(step-pop @p8696 :rule scope :premises (@p8695))
(step-pop @p8697 :rule scope :premises (@p8696))
(step-pop @p8698 :rule scope :premises (@p8697))
(step-pop @p8699 :rule scope :premises (@p8698))
(step-pop @p8700 :rule scope :premises (@p8699))
(step-pop @p8701 :rule scope :premises (@p8700))
(step @p4038 :rule process_scope :premises (@p8701) :args (@t797))
(step @p4048 :rule implies_elim :premises (@p4038))
(step @p4049 :rule cnf_and_neg :args (@t817))
(step @p4050 :rule resolution :premises (@p4049 @p4048) :args (true @t817))
(assume-push @p8703 @t703)
(assume-push @p8704 @t713)
(assume-push @p8705 @t721)
(assume-push @p8706 @t770)
(assume-push @p8707 @t723)
(assume-push @p8708 @t776)
(assume-push @p8709 @t782)
(assume-push @p8710 @t788)
(assume-push @p8711 @t794)
(assume-push @p8712 @t799)
(assume-push @p8713 @t723)
(assume-push @p8714 @t721)
(assume-push @p8715 @t703)
(assume-push @p8716 @t713)
(assume-push @p8717 @t770)
(assume-push @p8718 @t776)
(assume-push @p8719 @t782)
(assume-push @p8720 @t788)
(assume-push @p8721 @t794)
(assume-push @p8722 @t799)
(step @p4071 :rule symm :premises (@p8707))
(step @p4072 :rule symm :premises (@p8705))
(step @p4073 :rule symm :premises (@p4072))
(step @p4074 :rule symm :premises (@p8703))
(step @p4075 :rule symm :premises (@p4074))
(step @p4076 :rule symm :premises (@p8704))
(step @p4077 :rule symm :premises (@p8706))
(step @p4078 :rule symm :premises (@p8708))
(step @p4079 :rule symm :premises (@p8709))
(step @p4080 :rule symm :premises (@p8710))
(step @p4081 :rule symm :premises (@p8711))
(step @p4082 :rule symm :premises (@p8712))
(step @p4083 :rule trans :premises (@p4082 @p4081 @p4080 @p4079 @p4078 @p4077 @p4076 @p4075 @p4073 @p4071))
(step @p4084 :rule cong :premises (@p1100 @p4083) :args (=))
(step @p4085 :rule trans :premises (@p4084 @p2039))
(step @p4086 :rule false_elim :premises (@p4085))
(step-pop @p8722 :rule scope :premises (@p4086))
(step-pop @p8723 :rule scope :premises (@p8722))
(step-pop @p8724 :rule scope :premises (@p8723))
(step-pop @p8725 :rule scope :premises (@p8724))
(step-pop @p8726 :rule scope :premises (@p8725))
(step-pop @p8727 :rule scope :premises (@p8726))
(step-pop @p8728 :rule scope :premises (@p8727))
(step-pop @p8729 :rule scope :premises (@p8728))
(step-pop @p8730 :rule scope :premises (@p8729))
(step-pop @p8731 :rule scope :premises (@p8730))
(step @p4087 :rule process_scope :premises (@p8731) :args (@t801))
(step @p4098 :rule and_intro :premises (@p8707 @p8705 @p8703 @p8704 @p8706 @p8708 @p8709 @p8710 @p8711 @p8712))
(step @p4099 :rule modus_ponens :premises (@p4098 @p4087))
(step-pop @p8732 :rule scope :premises (@p4099))
(step-pop @p8733 :rule scope :premises (@p8732))
(step-pop @p8734 :rule scope :premises (@p8733))
(step-pop @p8735 :rule scope :premises (@p8734))
(step-pop @p8736 :rule scope :premises (@p8735))
(step-pop @p8737 :rule scope :premises (@p8736))
(step-pop @p8738 :rule scope :premises (@p8737))
(step-pop @p8739 :rule scope :premises (@p8738))
(step-pop @p8740 :rule scope :premises (@p8739))
(step-pop @p8741 :rule scope :premises (@p8740))
(step @p4100 :rule process_scope :premises (@p8741) :args (@t801))
(step @p4111 :rule implies_elim :premises (@p4100))
(step @p4112 :rule cnf_and_neg :args (@t818))
(step @p4113 :rule resolution :premises (@p4112 @p4111) :args (true @t818))
(assume-push @p8743 @t703)
(assume-push @p8744 @t713)
(assume-push @p8745 @t721)
(assume-push @p8746 @t770)
(assume-push @p8747 @t723)
(assume-push @p8748 @t776)
(assume-push @p8749 @t782)
(assume-push @p8750 @t788)
(assume-push @p8751 @t794)
(assume-push @p8752 @t799)
(assume-push @p8753 @t723)
(assume-push @p8754 @t721)
(assume-push @p8755 @t703)
(assume-push @p8756 @t713)
(assume-push @p8757 @t770)
(assume-push @p8758 @t776)
(assume-push @p8759 @t782)
(assume-push @p8760 @t788)
(assume-push @p8761 @t794)
(assume-push @p8762 @t799)
(step @p4134 :rule symm :premises (@p8747))
(step @p4135 :rule symm :premises (@p8745))
(step @p4136 :rule symm :premises (@p4135))
(step @p4137 :rule symm :premises (@p8743))
(step @p4138 :rule symm :premises (@p4137))
(step @p4139 :rule symm :premises (@p8744))
(step @p4140 :rule symm :premises (@p8746))
(step @p4141 :rule symm :premises (@p8748))
(step @p4142 :rule symm :premises (@p8749))
(step @p4143 :rule symm :premises (@p8750))
(step @p4144 :rule symm :premises (@p8751))
(step @p4145 :rule symm :premises (@p8752))
(step @p4146 :rule trans :premises (@p4145 @p4144 @p4143 @p4142 @p4141 @p4140 @p4139 @p4138 @p4136 @p4134))
(step @p4147 :rule cong :premises (@p1101 @p4146) :args (=))
(step @p4148 :rule trans :premises (@p4147 @p2024))
(step @p4149 :rule false_elim :premises (@p4148))
(step-pop @p8762 :rule scope :premises (@p4149))
(step-pop @p8763 :rule scope :premises (@p8762))
(step-pop @p8764 :rule scope :premises (@p8763))
(step-pop @p8765 :rule scope :premises (@p8764))
(step-pop @p8766 :rule scope :premises (@p8765))
(step-pop @p8767 :rule scope :premises (@p8766))
(step-pop @p8768 :rule scope :premises (@p8767))
(step-pop @p8769 :rule scope :premises (@p8768))
(step-pop @p8770 :rule scope :premises (@p8769))
(step-pop @p8771 :rule scope :premises (@p8770))
(step @p4150 :rule process_scope :premises (@p8771) :args (@t803))
(step @p4161 :rule and_intro :premises (@p8747 @p8745 @p8743 @p8744 @p8746 @p8748 @p8749 @p8750 @p8751 @p8752))
(step @p4162 :rule modus_ponens :premises (@p4161 @p4150))
(step-pop @p8772 :rule scope :premises (@p4162))
(step-pop @p8773 :rule scope :premises (@p8772))
(step-pop @p8774 :rule scope :premises (@p8773))
(step-pop @p8775 :rule scope :premises (@p8774))
(step-pop @p8776 :rule scope :premises (@p8775))
(step-pop @p8777 :rule scope :premises (@p8776))
(step-pop @p8778 :rule scope :premises (@p8777))
(step-pop @p8779 :rule scope :premises (@p8778))
(step-pop @p8780 :rule scope :premises (@p8779))
(step-pop @p8781 :rule scope :premises (@p8780))
(step @p4163 :rule process_scope :premises (@p8781) :args (@t803))
(step @p4174 :rule implies_elim :premises (@p4163))
(step @p4175 :rule resolution :premises (@p4112 @p4174) :args (true @t818))
(step @p4176 :rule chain_resolution :premises (@p2254 @p3387 @p4175 @p3810 @p3405 @p2881 @p2261 @p4113 @p3810 @p3405 @p2881 @p2261) :args ((@list false true false false false false true false false false false) (@list @t686 @t710 @t770 @t721 @t713 @t703 @t709 @t770 @t721 @t713 @t703)))
(step @p4177 :rule factoring :premises (@p4176))
(step @p4178 :rule chain_resolution :premises (@p4177 @p3273 @p3272 @p4050 @p3810 @p3405 @p2881 @p2261) :args (@t819 (@list @t799 @t688 @t796 @t770 @t721 @t713 @t703)))
(step @p4179 :rule factoring :premises (@p4178))
(step @p4180 :rule chain_resolution :premises (@p4179 @p3201 @p3200 @p3992 @p3810 @p3405 @p2881 @p2261) :args (@t819 (@list @t794 @t690 @t790 @t770 @t721 @t713 @t703)))
(step @p4181 :rule factoring :premises (@p4180))
(step @p4182 :rule chain_resolution :premises (@p4181 @p3127 @p3126 @p3939 @p3810 @p3405 @p2881 @p2261) :args (@t819 (@list @t788 @t692 @t784 @t770 @t721 @t713 @t703)))
(step @p4183 :rule factoring :premises (@p4182))
(step @p4184 :rule chain_resolution :premises (@p4183 @p3058 @p3057 @p3891 @p3810 @p3405 @p2881 @p2261) :args (@t819 (@list @t782 @t694 @t778 @t770 @t721 @t713 @t703)))
(step @p4185 :rule factoring :premises (@p4184))
(step @p4186 :rule chain_resolution :premises (@p4185 @p2994 @p2993 @p3848 @p3810 @p3405 @p2881 @p2261) :args (@t819 (@list @t776 @t696 @t772 @t770 @t721 @t713 @t703)))
(step @p4187 :rule factoring :premises (@p4186))
(step @p4188 :rule chain_resolution :premises (@p2398 @p4187) :args (@t155 (@list @t723)))
(step @p4189 :rule chain_resolution :premises (@p2399 @p4188) :args (@t155 (@list @t681)))
(step @p4190 :rule refl :args (@t777))
(step @p4191 :rule refl :args (@t734))
(step @p4192 :rule nary_cong :premises (@p4191 @p4190 @p2288) :args (or))
(assume-push @p8783 @t696)
(assume-push @p8784 @t679)
(assume-push @p8785 @t716)
; trust TRUST_THEORY_REWRITE
(step @p2295 :rule trust :premises () :args (@t718))
(step @p4196 :rule symm :premises (@p8783))
(step @p4197 :rule symm :premises (@p4196))
(step @p4198 :rule symm :premises (@p8784))
(step @p4199 :rule trans :premises (@p4198 @p4197))
(step @p4200 :rule true_intro :premises (@p4199))
(step @p4201 :rule false_intro :premises (@p8785))
(step @p4202 :rule symm :premises (@p4201))
(step @p4203 :rule trans :premises (@p4202 @p4200))
(step @p4204 false :rule eq_resolve :premises (@p4203 @p2295))
(step-pop @p8785 :rule scope :premises (@p4204))
(step-pop @p8786 :rule scope :premises (@p8785))
(step-pop @p8787 :rule scope :premises (@p8786))
(step @p4205 :rule process_scope :premises (@p8787) :args (false))
(assume-push @p8789 @t679)
(assume-push @p8790 @t696)
(assume-push @p8791 @t716)
(step @p4212 :rule and_intro :premises (@p8790 @p8789 @p8791))
(step-pop @p8791 :rule scope :premises (@p4212))
(step-pop @p8792 :rule scope :premises (@p8791))
(step-pop @p8793 :rule scope :premises (@p8792))
(step @p4213 :rule process_scope :premises (@p8793) :args (@t820))
(step @p4217 :rule implies_elim :premises (@p4213))
(step @p4218 :rule resolution :premises (@p4217 @p4205) :args (true @t820))
(step @p4219 :rule not_and :premises (@p4218))
(step @p4220 :rule eq_resolve :premises (@p4219 @p4192))
(step @p4221 :rule reordering :premises (@p4220) :args ((or @t668 @t777 @t734)))
(assume-push @p8795 @t703)
(assume-push @p8796 @t713)
(assume-push @p8797 @t721)
(assume-push @p8798 @t770)
(assume-push @p8799 @t727)
(assume-push @p8800 @t772)
(assume-push @p8801 @t733)
(assume-push @p8802 @t772)
(assume-push @p8803 @t770)
(assume-push @p8804 @t713)
(assume-push @p8805 @t703)
(assume-push @p8806 @t721)
(assume-push @p8807 @t727)
(assume-push @p8808 @t733)
(step @p4236 :rule symm :premises (@p8800))
(step @p4237 :rule symm :premises (@p8798))
(step @p4238 :rule symm :premises (@p4237))
(step @p4239 :rule symm :premises (@p8796))
(step @p4240 :rule symm :premises (@p4239))
(step @p4241 :rule symm :premises (@p8795))
(step @p4242 :rule symm :premises (@p8797))
(step @p4243 :rule symm :premises (@p8799))
(step @p4244 :rule symm :premises (@p8801))
(step @p4245 :rule trans :premises (@p4244 @p4243 @p4242 @p4241 @p4240 @p4238 @p4236))
(step @p4246 :rule cong :premises (@p1113 @p4245) :args (=))
(step @p4247 :rule trans :premises (@p4246 @p1868))
(step @p4248 :rule false_elim :premises (@p4247))
(step-pop @p8808 :rule scope :premises (@p4248))
(step-pop @p8809 :rule scope :premises (@p8808))
(step-pop @p8810 :rule scope :premises (@p8809))
(step-pop @p8811 :rule scope :premises (@p8810))
(step-pop @p8812 :rule scope :premises (@p8811))
(step-pop @p8813 :rule scope :premises (@p8812))
(step-pop @p8814 :rule scope :premises (@p8813))
(step @p4249 :rule process_scope :premises (@p8814) :args (@t736))
(step @p4257 :rule and_intro :premises (@p8800 @p8798 @p8796 @p8795 @p8797 @p8799 @p8801))
(step @p4258 :rule modus_ponens :premises (@p4257 @p4249))
(step-pop @p8815 :rule scope :premises (@p4258))
(step-pop @p8816 :rule scope :premises (@p8815))
(step-pop @p8817 :rule scope :premises (@p8816))
(step-pop @p8818 :rule scope :premises (@p8817))
(step-pop @p8819 :rule scope :premises (@p8818))
(step-pop @p8820 :rule scope :premises (@p8819))
(step-pop @p8821 :rule scope :premises (@p8820))
(step @p4259 :rule process_scope :premises (@p8821) :args (@t736))
(step @p4267 :rule implies_elim :premises (@p4259))
(step @p4268 :rule cnf_and_neg :args (@t821))
(step @p4269 :rule resolution :premises (@p4268 @p4267) :args (true @t821))
(assume-push @p8823 @t703)
(assume-push @p8824 @t713)
(assume-push @p8825 @t721)
(assume-push @p8826 @t770)
(assume-push @p8827 @t727)
(assume-push @p8828 @t772)
(assume-push @p8829 @t733)
(assume-push @p8830 @t739)
(assume-push @p8831 @t772)
(assume-push @p8832 @t770)
(assume-push @p8833 @t713)
(assume-push @p8834 @t703)
(assume-push @p8835 @t721)
(assume-push @p8836 @t727)
(assume-push @p8837 @t733)
(assume-push @p8838 @t739)
(step @p4286 :rule symm :premises (@p8828))
(step @p4287 :rule symm :premises (@p8826))
(step @p4288 :rule symm :premises (@p4287))
(step @p4289 :rule symm :premises (@p8824))
(step @p4290 :rule symm :premises (@p4289))
(step @p4291 :rule symm :premises (@p8823))
(step @p4292 :rule symm :premises (@p8825))
(step @p4293 :rule symm :premises (@p8827))
(step @p4294 :rule symm :premises (@p8829))
(step @p4295 :rule symm :premises (@p8830))
(step @p4296 :rule trans :premises (@p4295 @p4294 @p4293 @p4292 @p4291 @p4290 @p4288 @p4286))
(step @p4297 :rule cong :premises (@p1110 @p4296) :args (=))
(step @p4298 :rule trans :premises (@p4297 @p1863))
(step @p4299 :rule false_elim :premises (@p4298))
(step-pop @p8838 :rule scope :premises (@p4299))
(step-pop @p8839 :rule scope :premises (@p8838))
(step-pop @p8840 :rule scope :premises (@p8839))
(step-pop @p8841 :rule scope :premises (@p8840))
(step-pop @p8842 :rule scope :premises (@p8841))
(step-pop @p8843 :rule scope :premises (@p8842))
(step-pop @p8844 :rule scope :premises (@p8843))
(step-pop @p8845 :rule scope :premises (@p8844))
(step @p4300 :rule process_scope :premises (@p8845) :args (@t742))
(step @p4309 :rule and_intro :premises (@p8828 @p8826 @p8824 @p8823 @p8825 @p8827 @p8829 @p8830))
(step @p4310 :rule modus_ponens :premises (@p4309 @p4300))
(step-pop @p8846 :rule scope :premises (@p4310))
(step-pop @p8847 :rule scope :premises (@p8846))
(step-pop @p8848 :rule scope :premises (@p8847))
(step-pop @p8849 :rule scope :premises (@p8848))
(step-pop @p8850 :rule scope :premises (@p8849))
(step-pop @p8851 :rule scope :premises (@p8850))
(step-pop @p8852 :rule scope :premises (@p8851))
(step-pop @p8853 :rule scope :premises (@p8852))
(step @p4311 :rule process_scope :premises (@p8853) :args (@t742))
(step @p4320 :rule implies_elim :premises (@p4311))
(step @p4321 :rule cnf_and_neg :args (@t822))
(step @p4322 :rule resolution :premises (@p4321 @p4320) :args (true @t822))
(assume-push @p8855 @t703)
(assume-push @p8856 @t713)
(assume-push @p8857 @t721)
(assume-push @p8858 @t770)
(assume-push @p8859 @t727)
(assume-push @p8860 @t772)
(assume-push @p8861 @t733)
(assume-push @p8862 @t739)
(assume-push @p8863 @t745)
(assume-push @p8864 @t772)
(assume-push @p8865 @t770)
(assume-push @p8866 @t713)
(assume-push @p8867 @t703)
(assume-push @p8868 @t721)
(assume-push @p8869 @t727)
(assume-push @p8870 @t733)
(assume-push @p8871 @t739)
(assume-push @p8872 @t745)
(step @p4341 :rule symm :premises (@p8860))
(step @p4342 :rule symm :premises (@p8858))
(step @p4343 :rule symm :premises (@p4342))
(step @p4344 :rule symm :premises (@p8856))
(step @p4345 :rule symm :premises (@p4344))
(step @p4346 :rule symm :premises (@p8855))
(step @p4347 :rule symm :premises (@p8857))
(step @p4348 :rule symm :premises (@p8859))
(step @p4349 :rule symm :premises (@p8861))
(step @p4350 :rule symm :premises (@p8862))
(step @p4351 :rule symm :premises (@p8863))
(step @p4352 :rule trans :premises (@p4351 @p4350 @p4349 @p4348 @p4347 @p4346 @p4345 @p4343 @p4341))
(step @p4353 :rule cong :premises (@p1107 @p4352) :args (=))
(step @p4354 :rule trans :premises (@p4353 @p1894))
(step @p4355 :rule false_elim :premises (@p4354))
(step-pop @p8872 :rule scope :premises (@p4355))
(step-pop @p8873 :rule scope :premises (@p8872))
(step-pop @p8874 :rule scope :premises (@p8873))
(step-pop @p8875 :rule scope :premises (@p8874))
(step-pop @p8876 :rule scope :premises (@p8875))
(step-pop @p8877 :rule scope :premises (@p8876))
(step-pop @p8878 :rule scope :premises (@p8877))
(step-pop @p8879 :rule scope :premises (@p8878))
(step-pop @p8880 :rule scope :premises (@p8879))
(step @p4356 :rule process_scope :premises (@p8880) :args (@t748))
(step @p4366 :rule and_intro :premises (@p8860 @p8858 @p8856 @p8855 @p8857 @p8859 @p8861 @p8862 @p8863))
(step @p4367 :rule modus_ponens :premises (@p4366 @p4356))
(step-pop @p8881 :rule scope :premises (@p4367))
(step-pop @p8882 :rule scope :premises (@p8881))
(step-pop @p8883 :rule scope :premises (@p8882))
(step-pop @p8884 :rule scope :premises (@p8883))
(step-pop @p8885 :rule scope :premises (@p8884))
(step-pop @p8886 :rule scope :premises (@p8885))
(step-pop @p8887 :rule scope :premises (@p8886))
(step-pop @p8888 :rule scope :premises (@p8887))
(step-pop @p8889 :rule scope :premises (@p8888))
(step @p4368 :rule process_scope :premises (@p8889) :args (@t748))
(step @p4378 :rule implies_elim :premises (@p4368))
(step @p4379 :rule cnf_and_neg :args (@t823))
(step @p4380 :rule resolution :premises (@p4379 @p4378) :args (true @t823))
(assume-push @p8891 @t703)
(assume-push @p8892 @t713)
(assume-push @p8893 @t721)
(assume-push @p8894 @t770)
(assume-push @p8895 @t727)
(assume-push @p8896 @t772)
(assume-push @p8897 @t733)
(assume-push @p8898 @t739)
(assume-push @p8899 @t745)
(assume-push @p8900 @t751)
(assume-push @p8901 @t772)
(assume-push @p8902 @t770)
(assume-push @p8903 @t713)
(assume-push @p8904 @t703)
(assume-push @p8905 @t721)
(assume-push @p8906 @t727)
(assume-push @p8907 @t733)
(assume-push @p8908 @t739)
(assume-push @p8909 @t745)
(assume-push @p8910 @t751)
(step @p4401 :rule symm :premises (@p8896))
(step @p4402 :rule symm :premises (@p8894))
(step @p4403 :rule symm :premises (@p4402))
(step @p4404 :rule symm :premises (@p8892))
(step @p4405 :rule symm :premises (@p4404))
(step @p4406 :rule symm :premises (@p8891))
(step @p4407 :rule symm :premises (@p8893))
(step @p4408 :rule symm :premises (@p8895))
(step @p4409 :rule symm :premises (@p8897))
(step @p4410 :rule symm :premises (@p8898))
(step @p4411 :rule symm :premises (@p8899))
(step @p4412 :rule symm :premises (@p8900))
(step @p4413 :rule trans :premises (@p4412 @p4411 @p4410 @p4409 @p4408 @p4407 @p4406 @p4405 @p4403 @p4401))
(step @p4414 :rule cong :premises (@p1104 @p4413) :args (=))
(step @p4415 :rule trans :premises (@p4414 @p1902))
(step @p4416 :rule false_elim :premises (@p4415))
(step-pop @p8910 :rule scope :premises (@p4416))
(step-pop @p8911 :rule scope :premises (@p8910))
(step-pop @p8912 :rule scope :premises (@p8911))
(step-pop @p8913 :rule scope :premises (@p8912))
(step-pop @p8914 :rule scope :premises (@p8913))
(step-pop @p8915 :rule scope :premises (@p8914))
(step-pop @p8916 :rule scope :premises (@p8915))
(step-pop @p8917 :rule scope :premises (@p8916))
(step-pop @p8918 :rule scope :premises (@p8917))
(step-pop @p8919 :rule scope :premises (@p8918))
(step @p4417 :rule process_scope :premises (@p8919) :args (@t754))
(step @p4428 :rule and_intro :premises (@p8896 @p8894 @p8892 @p8891 @p8893 @p8895 @p8897 @p8898 @p8899 @p8900))
(step @p4429 :rule modus_ponens :premises (@p4428 @p4417))
(step-pop @p8920 :rule scope :premises (@p4429))
(step-pop @p8921 :rule scope :premises (@p8920))
(step-pop @p8922 :rule scope :premises (@p8921))
(step-pop @p8923 :rule scope :premises (@p8922))
(step-pop @p8924 :rule scope :premises (@p8923))
(step-pop @p8925 :rule scope :premises (@p8924))
(step-pop @p8926 :rule scope :premises (@p8925))
(step-pop @p8927 :rule scope :premises (@p8926))
(step-pop @p8928 :rule scope :premises (@p8927))
(step-pop @p8929 :rule scope :premises (@p8928))
(step @p4430 :rule process_scope :premises (@p8929) :args (@t754))
(step @p4441 :rule implies_elim :premises (@p4430))
(step @p4442 :rule cnf_and_neg :args (@t824))
(step @p4443 :rule resolution :premises (@p4442 @p4441) :args (true @t824))
(assume-push @p8931 @t703)
(assume-push @p8932 @t713)
(assume-push @p8933 @t721)
(assume-push @p8934 @t770)
(assume-push @p8935 @t727)
(assume-push @p8936 @t772)
(assume-push @p8937 @t733)
(assume-push @p8938 @t739)
(assume-push @p8939 @t745)
(assume-push @p8940 @t751)
(assume-push @p8941 @t757)
(assume-push @p8942 @t772)
(assume-push @p8943 @t770)
(assume-push @p8944 @t713)
(assume-push @p8945 @t703)
(assume-push @p8946 @t721)
(assume-push @p8947 @t727)
(assume-push @p8948 @t733)
(assume-push @p8949 @t739)
(assume-push @p8950 @t745)
(assume-push @p8951 @t751)
(assume-push @p8952 @t757)
(step @p4466 :rule symm :premises (@p8936))
(step @p4467 :rule symm :premises (@p8934))
(step @p4468 :rule symm :premises (@p4467))
(step @p4469 :rule symm :premises (@p8932))
(step @p4470 :rule symm :premises (@p4469))
(step @p4471 :rule symm :premises (@p8931))
(step @p4472 :rule symm :premises (@p8933))
(step @p4473 :rule symm :premises (@p8935))
(step @p4474 :rule symm :premises (@p8937))
(step @p4475 :rule symm :premises (@p8938))
(step @p4476 :rule symm :premises (@p8939))
(step @p4477 :rule symm :premises (@p8940))
(step @p4478 :rule symm :premises (@p8941))
(step @p4479 :rule trans :premises (@p4478 @p4477 @p4476 @p4475 @p4474 @p4473 @p4472 @p4471 @p4470 @p4468 @p4466))
(step @p4480 :rule cong :premises (@p1100 @p4479) :args (=))
(step @p4481 :rule trans :premises (@p4480 @p1929))
(step @p4482 :rule false_elim :premises (@p4481))
(step-pop @p8952 :rule scope :premises (@p4482))
(step-pop @p8953 :rule scope :premises (@p8952))
(step-pop @p8954 :rule scope :premises (@p8953))
(step-pop @p8955 :rule scope :premises (@p8954))
(step-pop @p8956 :rule scope :premises (@p8955))
(step-pop @p8957 :rule scope :premises (@p8956))
(step-pop @p8958 :rule scope :premises (@p8957))
(step-pop @p8959 :rule scope :premises (@p8958))
(step-pop @p8960 :rule scope :premises (@p8959))
(step-pop @p8961 :rule scope :premises (@p8960))
(step-pop @p8962 :rule scope :premises (@p8961))
(step @p4483 :rule process_scope :premises (@p8962) :args (@t760))
(step @p4495 :rule and_intro :premises (@p8936 @p8934 @p8932 @p8931 @p8933 @p8935 @p8937 @p8938 @p8939 @p8940 @p8941))
(step @p4496 :rule modus_ponens :premises (@p4495 @p4483))
(step-pop @p8963 :rule scope :premises (@p4496))
(step-pop @p8964 :rule scope :premises (@p8963))
(step-pop @p8965 :rule scope :premises (@p8964))
(step-pop @p8966 :rule scope :premises (@p8965))
(step-pop @p8967 :rule scope :premises (@p8966))
(step-pop @p8968 :rule scope :premises (@p8967))
(step-pop @p8969 :rule scope :premises (@p8968))
(step-pop @p8970 :rule scope :premises (@p8969))
(step-pop @p8971 :rule scope :premises (@p8970))
(step-pop @p8972 :rule scope :premises (@p8971))
(step-pop @p8973 :rule scope :premises (@p8972))
(step @p4497 :rule process_scope :premises (@p8973) :args (@t760))
(step @p4509 :rule implies_elim :premises (@p4497))
(step @p4510 :rule cnf_and_neg :args (@t825))
(step @p4511 :rule resolution :premises (@p4510 @p4509) :args (true @t825))
(assume-push @p8975 @t703)
(assume-push @p8976 @t713)
(assume-push @p8977 @t721)
(assume-push @p8978 @t770)
(assume-push @p8979 @t727)
(assume-push @p8980 @t772)
(assume-push @p8981 @t733)
(assume-push @p8982 @t739)
(assume-push @p8983 @t745)
(assume-push @p8984 @t751)
(assume-push @p8985 @t757)
(assume-push @p8986 @t772)
(assume-push @p8987 @t770)
(assume-push @p8988 @t713)
(assume-push @p8989 @t703)
(assume-push @p8990 @t721)
(assume-push @p8991 @t727)
(assume-push @p8992 @t733)
(assume-push @p8993 @t739)
(assume-push @p8994 @t745)
(assume-push @p8995 @t751)
(assume-push @p8996 @t757)
(step @p4534 :rule symm :premises (@p8980))
(step @p4535 :rule symm :premises (@p8978))
(step @p4536 :rule symm :premises (@p4535))
(step @p4537 :rule symm :premises (@p8976))
(step @p4538 :rule symm :premises (@p4537))
(step @p4539 :rule symm :premises (@p8975))
(step @p4540 :rule symm :premises (@p8977))
(step @p4541 :rule symm :premises (@p8979))
(step @p4542 :rule symm :premises (@p8981))
(step @p4543 :rule symm :premises (@p8982))
(step @p4544 :rule symm :premises (@p8983))
(step @p4545 :rule symm :premises (@p8984))
(step @p4546 :rule symm :premises (@p8985))
(step @p4547 :rule trans :premises (@p4546 @p4545 @p4544 @p4543 @p4542 @p4541 @p4540 @p4539 @p4538 @p4536 @p4534))
(step @p4548 :rule cong :premises (@p1101 @p4547) :args (=))
(step @p4549 :rule trans :premises (@p4548 @p1914))
(step @p4550 :rule false_elim :premises (@p4549))
(step-pop @p8996 :rule scope :premises (@p4550))
(step-pop @p8997 :rule scope :premises (@p8996))
(step-pop @p8998 :rule scope :premises (@p8997))
(step-pop @p8999 :rule scope :premises (@p8998))
(step-pop @p9000 :rule scope :premises (@p8999))
(step-pop @p9001 :rule scope :premises (@p9000))
(step-pop @p9002 :rule scope :premises (@p9001))
(step-pop @p9003 :rule scope :premises (@p9002))
(step-pop @p9004 :rule scope :premises (@p9003))
(step-pop @p9005 :rule scope :premises (@p9004))
(step-pop @p9006 :rule scope :premises (@p9005))
(step @p4551 :rule process_scope :premises (@p9006) :args (@t763))
(step @p4563 :rule and_intro :premises (@p8980 @p8978 @p8976 @p8975 @p8977 @p8979 @p8981 @p8982 @p8983 @p8984 @p8985))
(step @p4564 :rule modus_ponens :premises (@p4563 @p4551))
(step-pop @p9007 :rule scope :premises (@p4564))
(step-pop @p9008 :rule scope :premises (@p9007))
(step-pop @p9009 :rule scope :premises (@p9008))
(step-pop @p9010 :rule scope :premises (@p9009))
(step-pop @p9011 :rule scope :premises (@p9010))
(step-pop @p9012 :rule scope :premises (@p9011))
(step-pop @p9013 :rule scope :premises (@p9012))
(step-pop @p9014 :rule scope :premises (@p9013))
(step-pop @p9015 :rule scope :premises (@p9014))
(step-pop @p9016 :rule scope :premises (@p9015))
(step-pop @p9017 :rule scope :premises (@p9016))
(step @p4565 :rule process_scope :premises (@p9017) :args (@t763))
(step @p4577 :rule implies_elim :premises (@p4565))
(step @p4578 :rule resolution :premises (@p4510 @p4577) :args (true @t825))
(step @p4579 :rule chain_resolution :premises (@p2863 @p2861 @p4578 @p4189 @p3810 @p3405 @p2881 @p2261 @p4511 @p4189 @p3810 @p3405 @p2881 @p2261) :args ((@list false true false false false false false true false false false false false) (@list @t669 @t762 @t727 @t770 @t721 @t713 @t703 @t759 @t727 @t770 @t721 @t713 @t703)))
(step @p4580 :rule factoring :premises (@p4579))
(step @p4581 :rule chain_resolution :premises (@p4580 @p2739 @p2738 @p4443 @p4189 @p3810 @p3405 @p2881 @p2261) :args (@t826 (@list @t757 @t671 @t753 @t727 @t770 @t721 @t713 @t703)))
(step @p4582 :rule factoring :premises (@p4581))
(step @p4583 :rule chain_resolution :premises (@p4582 @p2661 @p2660 @p4380 @p4189 @p3810 @p3405 @p2881 @p2261) :args (@t826 (@list @t751 @t673 @t747 @t727 @t770 @t721 @t713 @t703)))
(step @p4584 :rule factoring :premises (@p4583))
(step @p4585 :rule chain_resolution :premises (@p4584 @p2588 @p2587 @p4322 @p4189 @p3810 @p3405 @p2881 @p2261) :args (@t826 (@list @t745 @t675 @t741 @t727 @t770 @t721 @t713 @t703)))
(step @p4586 :rule factoring :premises (@p4585))
(step @p4587 :rule chain_resolution :premises (@p4586 @p2520 @p2519 @p4269 @p4189 @p3810 @p3405 @p2881 @p2261) :args (@t826 (@list @t739 @t677 @t735 @t727 @t770 @t721 @t713 @t703)))
(step @p4588 :rule factoring :premises (@p4587))
(step @p4589 :rule chain_resolution :premises (@p4588 @p2457 @p4221 @p2235 @p2993) :args (@t765 (@list @t733 @t679 @t668 @t772)))
(step @p4590 :rule factoring :premises (@p4589))
(step @p4591 :rule chain_resolution :premises (@p2994 @p4590) :args (@t155 (@list @t696)))
(assume-push @p9019 @t703)
(assume-push @p9020 @t713)
(assume-push @p9021 @t721)
(assume-push @p9022 @t770)
(assume-push @p9023 @t727)
(assume-push @p9024 @t776)
(assume-push @p9025 @t729)
(assume-push @p9026 @t729)
(assume-push @p9027 @t727)
(assume-push @p9028 @t721)
(assume-push @p9029 @t703)
(assume-push @p9030 @t713)
(assume-push @p9031 @t770)
(assume-push @p9032 @t776)
(step @p4606 :rule symm :premises (@p9025))
(step @p4607 :rule symm :premises (@p9023))
(step @p4608 :rule symm :premises (@p4607))
(step @p4609 :rule symm :premises (@p9021))
(step @p4610 :rule symm :premises (@p4609))
(step @p4611 :rule symm :premises (@p9019))
(step @p4612 :rule symm :premises (@p4611))
(step @p4613 :rule symm :premises (@p9020))
(step @p4614 :rule symm :premises (@p9022))
(step @p4615 :rule symm :premises (@p9024))
(step @p4616 :rule trans :premises (@p4615 @p4614 @p4613 @p4612 @p4610 @p4608 @p4606))
(step @p4617 :rule cong :premises (@p1113 @p4616) :args (=))
(step @p4618 :rule trans :premises (@p4617 @p1868))
(step @p4619 :rule false_elim :premises (@p4618))
(step-pop @p9032 :rule scope :premises (@p4619))
(step-pop @p9033 :rule scope :premises (@p9032))
(step-pop @p9034 :rule scope :premises (@p9033))
(step-pop @p9035 :rule scope :premises (@p9034))
(step-pop @p9036 :rule scope :premises (@p9035))
(step-pop @p9037 :rule scope :premises (@p9036))
(step-pop @p9038 :rule scope :premises (@p9037))
(step @p4620 :rule process_scope :premises (@p9038) :args (@t779))
(step @p4628 :rule and_intro :premises (@p9025 @p9023 @p9021 @p9019 @p9020 @p9022 @p9024))
(step @p4629 :rule modus_ponens :premises (@p4628 @p4620))
(step-pop @p9039 :rule scope :premises (@p4629))
(step-pop @p9040 :rule scope :premises (@p9039))
(step-pop @p9041 :rule scope :premises (@p9040))
(step-pop @p9042 :rule scope :premises (@p9041))
(step-pop @p9043 :rule scope :premises (@p9042))
(step-pop @p9044 :rule scope :premises (@p9043))
(step-pop @p9045 :rule scope :premises (@p9044))
(step @p4630 :rule process_scope :premises (@p9045) :args (@t779))
(step @p4638 :rule implies_elim :premises (@p4630))
(step @p4639 :rule cnf_and_neg :args (@t827))
(step @p4640 :rule resolution :premises (@p4639 @p4638) :args (true @t827))
(assume-push @p9047 @t703)
(assume-push @p9048 @t713)
(assume-push @p9049 @t721)
(assume-push @p9050 @t770)
(assume-push @p9051 @t727)
(assume-push @p9052 @t776)
(assume-push @p9053 @t729)
(assume-push @p9054 @t782)
(assume-push @p9055 @t729)
(assume-push @p9056 @t727)
(assume-push @p9057 @t721)
(assume-push @p9058 @t703)
(assume-push @p9059 @t713)
(assume-push @p9060 @t770)
(assume-push @p9061 @t776)
(assume-push @p9062 @t782)
(step @p4657 :rule symm :premises (@p9053))
(step @p4658 :rule symm :premises (@p9051))
(step @p4659 :rule symm :premises (@p4658))
(step @p4660 :rule symm :premises (@p9049))
(step @p4661 :rule symm :premises (@p4660))
(step @p4662 :rule symm :premises (@p9047))
(step @p4663 :rule symm :premises (@p4662))
(step @p4664 :rule symm :premises (@p9048))
(step @p4665 :rule symm :premises (@p9050))
(step @p4666 :rule symm :premises (@p9052))
(step @p4667 :rule symm :premises (@p9054))
(step @p4668 :rule trans :premises (@p4667 @p4666 @p4665 @p4664 @p4663 @p4661 @p4659 @p4657))
(step @p4669 :rule cong :premises (@p1110 @p4668) :args (=))
(step @p4670 :rule trans :premises (@p4669 @p1863))
(step @p4671 :rule false_elim :premises (@p4670))
(step-pop @p9062 :rule scope :premises (@p4671))
(step-pop @p9063 :rule scope :premises (@p9062))
(step-pop @p9064 :rule scope :premises (@p9063))
(step-pop @p9065 :rule scope :premises (@p9064))
(step-pop @p9066 :rule scope :premises (@p9065))
(step-pop @p9067 :rule scope :premises (@p9066))
(step-pop @p9068 :rule scope :premises (@p9067))
(step-pop @p9069 :rule scope :premises (@p9068))
(step @p4672 :rule process_scope :premises (@p9069) :args (@t785))
(step @p4681 :rule and_intro :premises (@p9053 @p9051 @p9049 @p9047 @p9048 @p9050 @p9052 @p9054))
(step @p4682 :rule modus_ponens :premises (@p4681 @p4672))
(step-pop @p9070 :rule scope :premises (@p4682))
(step-pop @p9071 :rule scope :premises (@p9070))
(step-pop @p9072 :rule scope :premises (@p9071))
(step-pop @p9073 :rule scope :premises (@p9072))
(step-pop @p9074 :rule scope :premises (@p9073))
(step-pop @p9075 :rule scope :premises (@p9074))
(step-pop @p9076 :rule scope :premises (@p9075))
(step-pop @p9077 :rule scope :premises (@p9076))
(step @p4683 :rule process_scope :premises (@p9077) :args (@t785))
(step @p4692 :rule implies_elim :premises (@p4683))
(step @p4693 :rule cnf_and_neg :args (@t828))
(step @p4694 :rule resolution :premises (@p4693 @p4692) :args (true @t828))
(assume-push @p9079 @t703)
(assume-push @p9080 @t713)
(assume-push @p9081 @t721)
(assume-push @p9082 @t770)
(assume-push @p9083 @t727)
(assume-push @p9084 @t776)
(assume-push @p9085 @t729)
(assume-push @p9086 @t782)
(assume-push @p9087 @t788)
(assume-push @p9088 @t729)
(assume-push @p9089 @t727)
(assume-push @p9090 @t721)
(assume-push @p9091 @t703)
(assume-push @p9092 @t713)
(assume-push @p9093 @t770)
(assume-push @p9094 @t776)
(assume-push @p9095 @t782)
(assume-push @p9096 @t788)
(step @p4713 :rule symm :premises (@p9085))
(step @p4714 :rule symm :premises (@p9083))
(step @p4715 :rule symm :premises (@p4714))
(step @p4716 :rule symm :premises (@p9081))
(step @p4717 :rule symm :premises (@p4716))
(step @p4718 :rule symm :premises (@p9079))
(step @p4719 :rule symm :premises (@p4718))
(step @p4720 :rule symm :premises (@p9080))
(step @p4721 :rule symm :premises (@p9082))
(step @p4722 :rule symm :premises (@p9084))
(step @p4723 :rule symm :premises (@p9086))
(step @p4724 :rule symm :premises (@p9087))
(step @p4725 :rule trans :premises (@p4724 @p4723 @p4722 @p4721 @p4720 @p4719 @p4717 @p4715 @p4713))
(step @p4726 :rule cong :premises (@p1107 @p4725) :args (=))
(step @p4727 :rule trans :premises (@p4726 @p1894))
(step @p4728 :rule false_elim :premises (@p4727))
(step-pop @p9096 :rule scope :premises (@p4728))
(step-pop @p9097 :rule scope :premises (@p9096))
(step-pop @p9098 :rule scope :premises (@p9097))
(step-pop @p9099 :rule scope :premises (@p9098))
(step-pop @p9100 :rule scope :premises (@p9099))
(step-pop @p9101 :rule scope :premises (@p9100))
(step-pop @p9102 :rule scope :premises (@p9101))
(step-pop @p9103 :rule scope :premises (@p9102))
(step-pop @p9104 :rule scope :premises (@p9103))
(step @p4729 :rule process_scope :premises (@p9104) :args (@t791))
(step @p4739 :rule and_intro :premises (@p9085 @p9083 @p9081 @p9079 @p9080 @p9082 @p9084 @p9086 @p9087))
(step @p4740 :rule modus_ponens :premises (@p4739 @p4729))
(step-pop @p9105 :rule scope :premises (@p4740))
(step-pop @p9106 :rule scope :premises (@p9105))
(step-pop @p9107 :rule scope :premises (@p9106))
(step-pop @p9108 :rule scope :premises (@p9107))
(step-pop @p9109 :rule scope :premises (@p9108))
(step-pop @p9110 :rule scope :premises (@p9109))
(step-pop @p9111 :rule scope :premises (@p9110))
(step-pop @p9112 :rule scope :premises (@p9111))
(step-pop @p9113 :rule scope :premises (@p9112))
(step @p4741 :rule process_scope :premises (@p9113) :args (@t791))
(step @p4751 :rule implies_elim :premises (@p4741))
(step @p4752 :rule cnf_and_neg :args (@t829))
(step @p4753 :rule resolution :premises (@p4752 @p4751) :args (true @t829))
(assume-push @p9115 @t703)
(assume-push @p9116 @t713)
(assume-push @p9117 @t721)
(assume-push @p9118 @t770)
(assume-push @p9119 @t727)
(assume-push @p9120 @t776)
(assume-push @p9121 @t729)
(assume-push @p9122 @t782)
(assume-push @p9123 @t788)
(assume-push @p9124 @t794)
(assume-push @p9125 @t729)
(assume-push @p9126 @t727)
(assume-push @p9127 @t721)
(assume-push @p9128 @t703)
(assume-push @p9129 @t713)
(assume-push @p9130 @t770)
(assume-push @p9131 @t776)
(assume-push @p9132 @t782)
(assume-push @p9133 @t788)
(assume-push @p9134 @t794)
(step @p4774 :rule symm :premises (@p9121))
(step @p4775 :rule symm :premises (@p9119))
(step @p4776 :rule symm :premises (@p4775))
(step @p4777 :rule symm :premises (@p9117))
(step @p4778 :rule symm :premises (@p4777))
(step @p4779 :rule symm :premises (@p9115))
(step @p4780 :rule symm :premises (@p4779))
(step @p4781 :rule symm :premises (@p9116))
(step @p4782 :rule symm :premises (@p9118))
(step @p4783 :rule symm :premises (@p9120))
(step @p4784 :rule symm :premises (@p9122))
(step @p4785 :rule symm :premises (@p9123))
(step @p4786 :rule symm :premises (@p9124))
(step @p4787 :rule trans :premises (@p4786 @p4785 @p4784 @p4783 @p4782 @p4781 @p4780 @p4778 @p4776 @p4774))
(step @p4788 :rule cong :premises (@p1104 @p4787) :args (=))
(step @p4789 :rule trans :premises (@p4788 @p1902))
(step @p4790 :rule false_elim :premises (@p4789))
(step-pop @p9134 :rule scope :premises (@p4790))
(step-pop @p9135 :rule scope :premises (@p9134))
(step-pop @p9136 :rule scope :premises (@p9135))
(step-pop @p9137 :rule scope :premises (@p9136))
(step-pop @p9138 :rule scope :premises (@p9137))
(step-pop @p9139 :rule scope :premises (@p9138))
(step-pop @p9140 :rule scope :premises (@p9139))
(step-pop @p9141 :rule scope :premises (@p9140))
(step-pop @p9142 :rule scope :premises (@p9141))
(step-pop @p9143 :rule scope :premises (@p9142))
(step @p4791 :rule process_scope :premises (@p9143) :args (@t797))
(step @p4802 :rule and_intro :premises (@p9121 @p9119 @p9117 @p9115 @p9116 @p9118 @p9120 @p9122 @p9123 @p9124))
(step @p4803 :rule modus_ponens :premises (@p4802 @p4791))
(step-pop @p9144 :rule scope :premises (@p4803))
(step-pop @p9145 :rule scope :premises (@p9144))
(step-pop @p9146 :rule scope :premises (@p9145))
(step-pop @p9147 :rule scope :premises (@p9146))
(step-pop @p9148 :rule scope :premises (@p9147))
(step-pop @p9149 :rule scope :premises (@p9148))
(step-pop @p9150 :rule scope :premises (@p9149))
(step-pop @p9151 :rule scope :premises (@p9150))
(step-pop @p9152 :rule scope :premises (@p9151))
(step-pop @p9153 :rule scope :premises (@p9152))
(step @p4804 :rule process_scope :premises (@p9153) :args (@t797))
(step @p4815 :rule implies_elim :premises (@p4804))
(step @p4816 :rule cnf_and_neg :args (@t830))
(step @p4817 :rule resolution :premises (@p4816 @p4815) :args (true @t830))
(assume-push @p9155 @t703)
(assume-push @p9156 @t713)
(assume-push @p9157 @t721)
(assume-push @p9158 @t770)
(assume-push @p9159 @t727)
(assume-push @p9160 @t776)
(assume-push @p9161 @t729)
(assume-push @p9162 @t782)
(assume-push @p9163 @t788)
(assume-push @p9164 @t794)
(assume-push @p9165 @t799)
(assume-push @p9166 @t729)
(assume-push @p9167 @t727)
(assume-push @p9168 @t721)
(assume-push @p9169 @t703)
(assume-push @p9170 @t713)
(assume-push @p9171 @t770)
(assume-push @p9172 @t776)
(assume-push @p9173 @t782)
(assume-push @p9174 @t788)
(assume-push @p9175 @t794)
(assume-push @p9176 @t799)
(step @p4840 :rule symm :premises (@p9161))
(step @p4841 :rule symm :premises (@p9159))
(step @p4842 :rule symm :premises (@p4841))
(step @p4843 :rule symm :premises (@p9157))
(step @p4844 :rule symm :premises (@p4843))
(step @p4845 :rule symm :premises (@p9155))
(step @p4846 :rule symm :premises (@p4845))
(step @p4847 :rule symm :premises (@p9156))
(step @p4848 :rule symm :premises (@p9158))
(step @p4849 :rule symm :premises (@p9160))
(step @p4850 :rule symm :premises (@p9162))
(step @p4851 :rule symm :premises (@p9163))
(step @p4852 :rule symm :premises (@p9164))
(step @p4853 :rule symm :premises (@p9165))
(step @p4854 :rule trans :premises (@p4853 @p4852 @p4851 @p4850 @p4849 @p4848 @p4847 @p4846 @p4844 @p4842 @p4840))
(step @p4855 :rule cong :premises (@p1100 @p4854) :args (=))
(step @p4856 :rule trans :premises (@p4855 @p1929))
(step @p4857 :rule false_elim :premises (@p4856))
(step-pop @p9176 :rule scope :premises (@p4857))
(step-pop @p9177 :rule scope :premises (@p9176))
(step-pop @p9178 :rule scope :premises (@p9177))
(step-pop @p9179 :rule scope :premises (@p9178))
(step-pop @p9180 :rule scope :premises (@p9179))
(step-pop @p9181 :rule scope :premises (@p9180))
(step-pop @p9182 :rule scope :premises (@p9181))
(step-pop @p9183 :rule scope :premises (@p9182))
(step-pop @p9184 :rule scope :premises (@p9183))
(step-pop @p9185 :rule scope :premises (@p9184))
(step-pop @p9186 :rule scope :premises (@p9185))
(step @p4858 :rule process_scope :premises (@p9186) :args (@t801))
(step @p4870 :rule and_intro :premises (@p9161 @p9159 @p9157 @p9155 @p9156 @p9158 @p9160 @p9162 @p9163 @p9164 @p9165))
(step @p4871 :rule modus_ponens :premises (@p4870 @p4858))
(step-pop @p9187 :rule scope :premises (@p4871))
(step-pop @p9188 :rule scope :premises (@p9187))
(step-pop @p9189 :rule scope :premises (@p9188))
(step-pop @p9190 :rule scope :premises (@p9189))
(step-pop @p9191 :rule scope :premises (@p9190))
(step-pop @p9192 :rule scope :premises (@p9191))
(step-pop @p9193 :rule scope :premises (@p9192))
(step-pop @p9194 :rule scope :premises (@p9193))
(step-pop @p9195 :rule scope :premises (@p9194))
(step-pop @p9196 :rule scope :premises (@p9195))
(step-pop @p9197 :rule scope :premises (@p9196))
(step @p4872 :rule process_scope :premises (@p9197) :args (@t801))
(step @p4884 :rule implies_elim :premises (@p4872))
(step @p4885 :rule cnf_and_neg :args (@t831))
(step @p4886 :rule resolution :premises (@p4885 @p4884) :args (true @t831))
(assume-push @p9199 @t703)
(assume-push @p9200 @t713)
(assume-push @p9201 @t721)
(assume-push @p9202 @t770)
(assume-push @p9203 @t727)
(assume-push @p9204 @t776)
(assume-push @p9205 @t729)
(assume-push @p9206 @t782)
(assume-push @p9207 @t788)
(assume-push @p9208 @t794)
(assume-push @p9209 @t799)
(assume-push @p9210 @t729)
(assume-push @p9211 @t727)
(assume-push @p9212 @t721)
(assume-push @p9213 @t703)
(assume-push @p9214 @t713)
(assume-push @p9215 @t770)
(assume-push @p9216 @t776)
(assume-push @p9217 @t782)
(assume-push @p9218 @t788)
(assume-push @p9219 @t794)
(assume-push @p9220 @t799)
(step @p4909 :rule symm :premises (@p9205))
(step @p4910 :rule symm :premises (@p9203))
(step @p4911 :rule symm :premises (@p4910))
(step @p4912 :rule symm :premises (@p9201))
(step @p4913 :rule symm :premises (@p4912))
(step @p4914 :rule symm :premises (@p9199))
(step @p4915 :rule symm :premises (@p4914))
(step @p4916 :rule symm :premises (@p9200))
(step @p4917 :rule symm :premises (@p9202))
(step @p4918 :rule symm :premises (@p9204))
(step @p4919 :rule symm :premises (@p9206))
(step @p4920 :rule symm :premises (@p9207))
(step @p4921 :rule symm :premises (@p9208))
(step @p4922 :rule symm :premises (@p9209))
(step @p4923 :rule trans :premises (@p4922 @p4921 @p4920 @p4919 @p4918 @p4917 @p4916 @p4915 @p4913 @p4911 @p4909))
(step @p4924 :rule cong :premises (@p1101 @p4923) :args (=))
(step @p4925 :rule trans :premises (@p4924 @p1914))
(step @p4926 :rule false_elim :premises (@p4925))
(step-pop @p9220 :rule scope :premises (@p4926))
(step-pop @p9221 :rule scope :premises (@p9220))
(step-pop @p9222 :rule scope :premises (@p9221))
(step-pop @p9223 :rule scope :premises (@p9222))
(step-pop @p9224 :rule scope :premises (@p9223))
(step-pop @p9225 :rule scope :premises (@p9224))
(step-pop @p9226 :rule scope :premises (@p9225))
(step-pop @p9227 :rule scope :premises (@p9226))
(step-pop @p9228 :rule scope :premises (@p9227))
(step-pop @p9229 :rule scope :premises (@p9228))
(step-pop @p9230 :rule scope :premises (@p9229))
(step @p4927 :rule process_scope :premises (@p9230) :args (@t803))
(step @p4939 :rule and_intro :premises (@p9205 @p9203 @p9201 @p9199 @p9200 @p9202 @p9204 @p9206 @p9207 @p9208 @p9209))
(step @p4940 :rule modus_ponens :premises (@p4939 @p4927))
(step-pop @p9231 :rule scope :premises (@p4940))
(step-pop @p9232 :rule scope :premises (@p9231))
(step-pop @p9233 :rule scope :premises (@p9232))
(step-pop @p9234 :rule scope :premises (@p9233))
(step-pop @p9235 :rule scope :premises (@p9234))
(step-pop @p9236 :rule scope :premises (@p9235))
(step-pop @p9237 :rule scope :premises (@p9236))
(step-pop @p9238 :rule scope :premises (@p9237))
(step-pop @p9239 :rule scope :premises (@p9238))
(step-pop @p9240 :rule scope :premises (@p9239))
(step-pop @p9241 :rule scope :premises (@p9240))
(step @p4941 :rule process_scope :premises (@p9241) :args (@t803))
(step @p4953 :rule implies_elim :premises (@p4941))
(step @p4954 :rule resolution :premises (@p4885 @p4953) :args (true @t831))
(step @p4955 :rule chain_resolution :premises (@p2254 @p3387 @p4954 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261 @p4886 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args ((@list false true false false false false false false true false false false false false false) (@list @t686 @t710 @t776 @t727 @t770 @t721 @t713 @t703 @t709 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p4956 :rule factoring :premises (@p4955))
(step @p4957 :rule chain_resolution :premises (@p4956 @p3273 @p3272 @p4817 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args (@t832 (@list @t799 @t688 @t796 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p4958 :rule factoring :premises (@p4957))
(step @p4959 :rule chain_resolution :premises (@p4958 @p3201 @p3200 @p4753 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args (@t832 (@list @t794 @t690 @t790 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p4960 :rule factoring :premises (@p4959))
(step @p4961 :rule chain_resolution :premises (@p4960 @p3127 @p3126 @p4694 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args (@t832 (@list @t788 @t692 @t784 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p4962 :rule factoring :premises (@p4961))
(step @p4963 :rule chain_resolution :premises (@p4962 @p3058 @p3057 @p4640 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args (@t832 (@list @t782 @t694 @t778 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p4964 :rule factoring :premises (@p4963))
(step @p4965 :rule chain_resolution :premises (@p2456 @p4964) :args (@t155 (@list @t729)))
(step @p4966 :rule chain_resolution :premises (@p2457 @p4965) :args (@t155 (@list @t679)))
(step @p4967 :rule refl :args (@t783))
(step @p4968 :rule refl :args (@t740))
(step @p4969 :rule nary_cong :premises (@p4968 @p4967 @p2288) :args (or))
(assume-push @p9243 @t694)
(assume-push @p9244 @t677)
(assume-push @p9245 @t716)
; trust TRUST_THEORY_REWRITE
(step @p2295 :rule trust :premises () :args (@t718))
(step @p4973 :rule symm :premises (@p9243))
(step @p4974 :rule symm :premises (@p4973))
(step @p4975 :rule symm :premises (@p9244))
(step @p4976 :rule trans :premises (@p4975 @p4974))
(step @p4977 :rule true_intro :premises (@p4976))
(step @p4978 :rule false_intro :premises (@p9245))
(step @p4979 :rule symm :premises (@p4978))
(step @p4980 :rule trans :premises (@p4979 @p4977))
(step @p4981 false :rule eq_resolve :premises (@p4980 @p2295))
(step-pop @p9245 :rule scope :premises (@p4981))
(step-pop @p9246 :rule scope :premises (@p9245))
(step-pop @p9247 :rule scope :premises (@p9246))
(step @p4982 :rule process_scope :premises (@p9247) :args (false))
(assume-push @p9249 @t677)
(assume-push @p9250 @t694)
(assume-push @p9251 @t716)
(step @p4989 :rule and_intro :premises (@p9250 @p9249 @p9251))
(step-pop @p9251 :rule scope :premises (@p4989))
(step-pop @p9252 :rule scope :premises (@p9251))
(step-pop @p9253 :rule scope :premises (@p9252))
(step @p4990 :rule process_scope :premises (@p9253) :args (@t833))
(step @p4994 :rule implies_elim :premises (@p4990))
(step @p4995 :rule resolution :premises (@p4994 @p4982) :args (true @t833))
(step @p4996 :rule not_and :premises (@p4995))
(step @p4997 :rule eq_resolve :premises (@p4996 @p4969))
(step @p4998 :rule reordering :premises (@p4997) :args ((or @t668 @t783 @t740)))
(assume-push @p9255 @t703)
(assume-push @p9256 @t713)
(assume-push @p9257 @t721)
(assume-push @p9258 @t770)
(assume-push @p9259 @t727)
(assume-push @p9260 @t776)
(assume-push @p9261 @t733)
(assume-push @p9262 @t778)
(assume-push @p9263 @t739)
(assume-push @p9264 @t778)
(assume-push @p9265 @t776)
(assume-push @p9266 @t770)
(assume-push @p9267 @t713)
(assume-push @p9268 @t703)
(assume-push @p9269 @t721)
(assume-push @p9270 @t727)
(assume-push @p9271 @t733)
(assume-push @p9272 @t739)
(step @p5017 :rule symm :premises (@p9262))
(step @p5018 :rule symm :premises (@p9260))
(step @p5019 :rule symm :premises (@p5018))
(step @p5020 :rule symm :premises (@p9258))
(step @p5021 :rule symm :premises (@p5020))
(step @p5022 :rule symm :premises (@p9256))
(step @p5023 :rule symm :premises (@p5022))
(step @p5024 :rule symm :premises (@p9255))
(step @p5025 :rule symm :premises (@p9257))
(step @p5026 :rule symm :premises (@p9259))
(step @p5027 :rule symm :premises (@p9261))
(step @p5028 :rule symm :premises (@p9263))
(step @p5029 :rule trans :premises (@p5028 @p5027 @p5026 @p5025 @p5024 @p5023 @p5021 @p5019 @p5017))
(step @p5030 :rule cong :premises (@p1110 @p5029) :args (=))
(step @p5031 :rule trans :premises (@p5030 @p1749))
(step @p5032 :rule false_elim :premises (@p5031))
(step-pop @p9272 :rule scope :premises (@p5032))
(step-pop @p9273 :rule scope :premises (@p9272))
(step-pop @p9274 :rule scope :premises (@p9273))
(step-pop @p9275 :rule scope :premises (@p9274))
(step-pop @p9276 :rule scope :premises (@p9275))
(step-pop @p9277 :rule scope :premises (@p9276))
(step-pop @p9278 :rule scope :premises (@p9277))
(step-pop @p9279 :rule scope :premises (@p9278))
(step-pop @p9280 :rule scope :premises (@p9279))
(step @p5033 :rule process_scope :premises (@p9280) :args (@t742))
(step @p5043 :rule and_intro :premises (@p9262 @p9260 @p9258 @p9256 @p9255 @p9257 @p9259 @p9261 @p9263))
(step @p5044 :rule modus_ponens :premises (@p5043 @p5033))
(step-pop @p9281 :rule scope :premises (@p5044))
(step-pop @p9282 :rule scope :premises (@p9281))
(step-pop @p9283 :rule scope :premises (@p9282))
(step-pop @p9284 :rule scope :premises (@p9283))
(step-pop @p9285 :rule scope :premises (@p9284))
(step-pop @p9286 :rule scope :premises (@p9285))
(step-pop @p9287 :rule scope :premises (@p9286))
(step-pop @p9288 :rule scope :premises (@p9287))
(step-pop @p9289 :rule scope :premises (@p9288))
(step @p5045 :rule process_scope :premises (@p9289) :args (@t742))
(step @p5055 :rule implies_elim :premises (@p5045))
(step @p5056 :rule cnf_and_neg :args (@t834))
(step @p5057 :rule resolution :premises (@p5056 @p5055) :args (true @t834))
(assume-push @p9291 @t703)
(assume-push @p9292 @t713)
(assume-push @p9293 @t721)
(assume-push @p9294 @t770)
(assume-push @p9295 @t727)
(assume-push @p9296 @t776)
(assume-push @p9297 @t733)
(assume-push @p9298 @t778)
(assume-push @p9299 @t739)
(assume-push @p9300 @t745)
(assume-push @p9301 @t778)
(assume-push @p9302 @t776)
(assume-push @p9303 @t770)
(assume-push @p9304 @t713)
(assume-push @p9305 @t703)
(assume-push @p9306 @t721)
(assume-push @p9307 @t727)
(assume-push @p9308 @t733)
(assume-push @p9309 @t739)
(assume-push @p9310 @t745)
(step @p5078 :rule symm :premises (@p9298))
(step @p5079 :rule symm :premises (@p9296))
(step @p5080 :rule symm :premises (@p5079))
(step @p5081 :rule symm :premises (@p9294))
(step @p5082 :rule symm :premises (@p5081))
(step @p5083 :rule symm :premises (@p9292))
(step @p5084 :rule symm :premises (@p5083))
(step @p5085 :rule symm :premises (@p9291))
(step @p5086 :rule symm :premises (@p9293))
(step @p5087 :rule symm :premises (@p9295))
(step @p5088 :rule symm :premises (@p9297))
(step @p5089 :rule symm :premises (@p9299))
(step @p5090 :rule symm :premises (@p9300))
(step @p5091 :rule trans :premises (@p5090 @p5089 @p5088 @p5087 @p5086 @p5085 @p5084 @p5082 @p5080 @p5078))
(step @p5092 :rule cong :premises (@p1107 @p5091) :args (=))
(step @p5093 :rule trans :premises (@p5092 @p1781))
(step @p5094 :rule false_elim :premises (@p5093))
(step-pop @p9310 :rule scope :premises (@p5094))
(step-pop @p9311 :rule scope :premises (@p9310))
(step-pop @p9312 :rule scope :premises (@p9311))
(step-pop @p9313 :rule scope :premises (@p9312))
(step-pop @p9314 :rule scope :premises (@p9313))
(step-pop @p9315 :rule scope :premises (@p9314))
(step-pop @p9316 :rule scope :premises (@p9315))
(step-pop @p9317 :rule scope :premises (@p9316))
(step-pop @p9318 :rule scope :premises (@p9317))
(step-pop @p9319 :rule scope :premises (@p9318))
(step @p5095 :rule process_scope :premises (@p9319) :args (@t748))
(step @p5106 :rule and_intro :premises (@p9298 @p9296 @p9294 @p9292 @p9291 @p9293 @p9295 @p9297 @p9299 @p9300))
(step @p5107 :rule modus_ponens :premises (@p5106 @p5095))
(step-pop @p9320 :rule scope :premises (@p5107))
(step-pop @p9321 :rule scope :premises (@p9320))
(step-pop @p9322 :rule scope :premises (@p9321))
(step-pop @p9323 :rule scope :premises (@p9322))
(step-pop @p9324 :rule scope :premises (@p9323))
(step-pop @p9325 :rule scope :premises (@p9324))
(step-pop @p9326 :rule scope :premises (@p9325))
(step-pop @p9327 :rule scope :premises (@p9326))
(step-pop @p9328 :rule scope :premises (@p9327))
(step-pop @p9329 :rule scope :premises (@p9328))
(step @p5108 :rule process_scope :premises (@p9329) :args (@t748))
(step @p5119 :rule implies_elim :premises (@p5108))
(step @p5120 :rule cnf_and_neg :args (@t835))
(step @p5121 :rule resolution :premises (@p5120 @p5119) :args (true @t835))
(assume-push @p9331 @t703)
(assume-push @p9332 @t713)
(assume-push @p9333 @t721)
(assume-push @p9334 @t770)
(assume-push @p9335 @t727)
(assume-push @p9336 @t776)
(assume-push @p9337 @t733)
(assume-push @p9338 @t778)
(assume-push @p9339 @t739)
(assume-push @p9340 @t745)
(assume-push @p9341 @t751)
(assume-push @p9342 @t778)
(assume-push @p9343 @t776)
(assume-push @p9344 @t770)
(assume-push @p9345 @t713)
(assume-push @p9346 @t703)
(assume-push @p9347 @t721)
(assume-push @p9348 @t727)
(assume-push @p9349 @t733)
(assume-push @p9350 @t739)
(assume-push @p9351 @t745)
(assume-push @p9352 @t751)
(step @p5144 :rule symm :premises (@p9338))
(step @p5145 :rule symm :premises (@p9336))
(step @p5146 :rule symm :premises (@p5145))
(step @p5147 :rule symm :premises (@p9334))
(step @p5148 :rule symm :premises (@p5147))
(step @p5149 :rule symm :premises (@p9332))
(step @p5150 :rule symm :premises (@p5149))
(step @p5151 :rule symm :premises (@p9331))
(step @p5152 :rule symm :premises (@p9333))
(step @p5153 :rule symm :premises (@p9335))
(step @p5154 :rule symm :premises (@p9337))
(step @p5155 :rule symm :premises (@p9339))
(step @p5156 :rule symm :premises (@p9340))
(step @p5157 :rule symm :premises (@p9341))
(step @p5158 :rule trans :premises (@p5157 @p5156 @p5155 @p5154 @p5153 @p5152 @p5151 @p5150 @p5148 @p5146 @p5144))
(step @p5159 :rule cong :premises (@p1104 @p5158) :args (=))
(step @p5160 :rule trans :premises (@p5159 @p1789))
(step @p5161 :rule false_elim :premises (@p5160))
(step-pop @p9352 :rule scope :premises (@p5161))
(step-pop @p9353 :rule scope :premises (@p9352))
(step-pop @p9354 :rule scope :premises (@p9353))
(step-pop @p9355 :rule scope :premises (@p9354))
(step-pop @p9356 :rule scope :premises (@p9355))
(step-pop @p9357 :rule scope :premises (@p9356))
(step-pop @p9358 :rule scope :premises (@p9357))
(step-pop @p9359 :rule scope :premises (@p9358))
(step-pop @p9360 :rule scope :premises (@p9359))
(step-pop @p9361 :rule scope :premises (@p9360))
(step-pop @p9362 :rule scope :premises (@p9361))
(step @p5162 :rule process_scope :premises (@p9362) :args (@t754))
(step @p5174 :rule and_intro :premises (@p9338 @p9336 @p9334 @p9332 @p9331 @p9333 @p9335 @p9337 @p9339 @p9340 @p9341))
(step @p5175 :rule modus_ponens :premises (@p5174 @p5162))
(step-pop @p9363 :rule scope :premises (@p5175))
(step-pop @p9364 :rule scope :premises (@p9363))
(step-pop @p9365 :rule scope :premises (@p9364))
(step-pop @p9366 :rule scope :premises (@p9365))
(step-pop @p9367 :rule scope :premises (@p9366))
(step-pop @p9368 :rule scope :premises (@p9367))
(step-pop @p9369 :rule scope :premises (@p9368))
(step-pop @p9370 :rule scope :premises (@p9369))
(step-pop @p9371 :rule scope :premises (@p9370))
(step-pop @p9372 :rule scope :premises (@p9371))
(step-pop @p9373 :rule scope :premises (@p9372))
(step @p5176 :rule process_scope :premises (@p9373) :args (@t754))
(step @p5188 :rule implies_elim :premises (@p5176))
(step @p5189 :rule cnf_and_neg :args (@t836))
(step @p5190 :rule resolution :premises (@p5189 @p5188) :args (true @t836))
(assume-push @p9375 @t703)
(assume-push @p9376 @t713)
(assume-push @p9377 @t721)
(assume-push @p9378 @t770)
(assume-push @p9379 @t727)
(assume-push @p9380 @t776)
(assume-push @p9381 @t733)
(assume-push @p9382 @t778)
(assume-push @p9383 @t739)
(assume-push @p9384 @t745)
(assume-push @p9385 @t751)
(assume-push @p9386 @t757)
(assume-push @p9387 @t778)
(assume-push @p9388 @t776)
(assume-push @p9389 @t770)
(assume-push @p9390 @t713)
(assume-push @p9391 @t703)
(assume-push @p9392 @t721)
(assume-push @p9393 @t727)
(assume-push @p9394 @t733)
(assume-push @p9395 @t739)
(assume-push @p9396 @t745)
(assume-push @p9397 @t751)
(assume-push @p9398 @t757)
(step @p5215 :rule symm :premises (@p9382))
(step @p5216 :rule symm :premises (@p9380))
(step @p5217 :rule symm :premises (@p5216))
(step @p5218 :rule symm :premises (@p9378))
(step @p5219 :rule symm :premises (@p5218))
(step @p5220 :rule symm :premises (@p9376))
(step @p5221 :rule symm :premises (@p5220))
(step @p5222 :rule symm :premises (@p9375))
(step @p5223 :rule symm :premises (@p9377))
(step @p5224 :rule symm :premises (@p9379))
(step @p5225 :rule symm :premises (@p9381))
(step @p5226 :rule symm :premises (@p9383))
(step @p5227 :rule symm :premises (@p9384))
(step @p5228 :rule symm :premises (@p9385))
(step @p5229 :rule symm :premises (@p9386))
(step @p5230 :rule trans :premises (@p5229 @p5228 @p5227 @p5226 @p5225 @p5224 @p5223 @p5222 @p5221 @p5219 @p5217 @p5215))
(step @p5231 :rule cong :premises (@p1100 @p5230) :args (=))
(step @p5232 :rule trans :premises (@p5231 @p1816))
(step @p5233 :rule false_elim :premises (@p5232))
(step-pop @p9398 :rule scope :premises (@p5233))
(step-pop @p9399 :rule scope :premises (@p9398))
(step-pop @p9400 :rule scope :premises (@p9399))
(step-pop @p9401 :rule scope :premises (@p9400))
(step-pop @p9402 :rule scope :premises (@p9401))
(step-pop @p9403 :rule scope :premises (@p9402))
(step-pop @p9404 :rule scope :premises (@p9403))
(step-pop @p9405 :rule scope :premises (@p9404))
(step-pop @p9406 :rule scope :premises (@p9405))
(step-pop @p9407 :rule scope :premises (@p9406))
(step-pop @p9408 :rule scope :premises (@p9407))
(step-pop @p9409 :rule scope :premises (@p9408))
(step @p5234 :rule process_scope :premises (@p9409) :args (@t760))
(step @p5247 :rule and_intro :premises (@p9382 @p9380 @p9378 @p9376 @p9375 @p9377 @p9379 @p9381 @p9383 @p9384 @p9385 @p9386))
(step @p5248 :rule modus_ponens :premises (@p5247 @p5234))
(step-pop @p9410 :rule scope :premises (@p5248))
(step-pop @p9411 :rule scope :premises (@p9410))
(step-pop @p9412 :rule scope :premises (@p9411))
(step-pop @p9413 :rule scope :premises (@p9412))
(step-pop @p9414 :rule scope :premises (@p9413))
(step-pop @p9415 :rule scope :premises (@p9414))
(step-pop @p9416 :rule scope :premises (@p9415))
(step-pop @p9417 :rule scope :premises (@p9416))
(step-pop @p9418 :rule scope :premises (@p9417))
(step-pop @p9419 :rule scope :premises (@p9418))
(step-pop @p9420 :rule scope :premises (@p9419))
(step-pop @p9421 :rule scope :premises (@p9420))
(step @p5249 :rule process_scope :premises (@p9421) :args (@t760))
(step @p5262 :rule implies_elim :premises (@p5249))
(step @p5263 :rule cnf_and_neg :args (@t837))
(step @p5264 :rule resolution :premises (@p5263 @p5262) :args (true @t837))
(assume-push @p9423 @t703)
(assume-push @p9424 @t713)
(assume-push @p9425 @t721)
(assume-push @p9426 @t770)
(assume-push @p9427 @t727)
(assume-push @p9428 @t776)
(assume-push @p9429 @t733)
(assume-push @p9430 @t778)
(assume-push @p9431 @t739)
(assume-push @p9432 @t745)
(assume-push @p9433 @t751)
(assume-push @p9434 @t757)
(assume-push @p9435 @t778)
(assume-push @p9436 @t776)
(assume-push @p9437 @t770)
(assume-push @p9438 @t713)
(assume-push @p9439 @t703)
(assume-push @p9440 @t721)
(assume-push @p9441 @t727)
(assume-push @p9442 @t733)
(assume-push @p9443 @t739)
(assume-push @p9444 @t745)
(assume-push @p9445 @t751)
(assume-push @p9446 @t757)
(step @p5289 :rule symm :premises (@p9430))
(step @p5290 :rule symm :premises (@p9428))
(step @p5291 :rule symm :premises (@p5290))
(step @p5292 :rule symm :premises (@p9426))
(step @p5293 :rule symm :premises (@p5292))
(step @p5294 :rule symm :premises (@p9424))
(step @p5295 :rule symm :premises (@p5294))
(step @p5296 :rule symm :premises (@p9423))
(step @p5297 :rule symm :premises (@p9425))
(step @p5298 :rule symm :premises (@p9427))
(step @p5299 :rule symm :premises (@p9429))
(step @p5300 :rule symm :premises (@p9431))
(step @p5301 :rule symm :premises (@p9432))
(step @p5302 :rule symm :premises (@p9433))
(step @p5303 :rule symm :premises (@p9434))
(step @p5304 :rule trans :premises (@p5303 @p5302 @p5301 @p5300 @p5299 @p5298 @p5297 @p5296 @p5295 @p5293 @p5291 @p5289))
(step @p5305 :rule cong :premises (@p1101 @p5304) :args (=))
(step @p5306 :rule trans :premises (@p5305 @p1801))
(step @p5307 :rule false_elim :premises (@p5306))
(step-pop @p9446 :rule scope :premises (@p5307))
(step-pop @p9447 :rule scope :premises (@p9446))
(step-pop @p9448 :rule scope :premises (@p9447))
(step-pop @p9449 :rule scope :premises (@p9448))
(step-pop @p9450 :rule scope :premises (@p9449))
(step-pop @p9451 :rule scope :premises (@p9450))
(step-pop @p9452 :rule scope :premises (@p9451))
(step-pop @p9453 :rule scope :premises (@p9452))
(step-pop @p9454 :rule scope :premises (@p9453))
(step-pop @p9455 :rule scope :premises (@p9454))
(step-pop @p9456 :rule scope :premises (@p9455))
(step-pop @p9457 :rule scope :premises (@p9456))
(step @p5308 :rule process_scope :premises (@p9457) :args (@t763))
(step @p5321 :rule and_intro :premises (@p9430 @p9428 @p9426 @p9424 @p9423 @p9425 @p9427 @p9429 @p9431 @p9432 @p9433 @p9434))
(step @p5322 :rule modus_ponens :premises (@p5321 @p5308))
(step-pop @p9458 :rule scope :premises (@p5322))
(step-pop @p9459 :rule scope :premises (@p9458))
(step-pop @p9460 :rule scope :premises (@p9459))
(step-pop @p9461 :rule scope :premises (@p9460))
(step-pop @p9462 :rule scope :premises (@p9461))
(step-pop @p9463 :rule scope :premises (@p9462))
(step-pop @p9464 :rule scope :premises (@p9463))
(step-pop @p9465 :rule scope :premises (@p9464))
(step-pop @p9466 :rule scope :premises (@p9465))
(step-pop @p9467 :rule scope :premises (@p9466))
(step-pop @p9468 :rule scope :premises (@p9467))
(step-pop @p9469 :rule scope :premises (@p9468))
(step @p5323 :rule process_scope :premises (@p9469) :args (@t763))
(step @p5336 :rule implies_elim :premises (@p5323))
(step @p5337 :rule resolution :premises (@p5263 @p5336) :args (true @t837))
(step @p5338 :rule chain_resolution :premises (@p2863 @p2861 @p5337 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261 @p5264 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args ((@list false true false false false false false false false true false false false false false false false) (@list @t669 @t762 @t733 @t776 @t727 @t770 @t721 @t713 @t703 @t759 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p5339 :rule factoring :premises (@p5338))
(step @p5340 :rule chain_resolution :premises (@p5339 @p2739 @p2738 @p5190 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args (@t838 (@list @t757 @t671 @t753 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p5341 :rule factoring :premises (@p5340))
(step @p5342 :rule chain_resolution :premises (@p5341 @p2661 @p2660 @p5121 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args (@t838 (@list @t751 @t673 @t747 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p5343 :rule factoring :premises (@p5342))
(step @p5344 :rule chain_resolution :premises (@p5343 @p2588 @p2587 @p5057 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args (@t838 (@list @t745 @t675 @t741 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p5345 :rule factoring :premises (@p5344))
(step @p5346 :rule chain_resolution :premises (@p5345 @p2520 @p4998 @p2235 @p3057) :args (@t765 (@list @t739 @t677 @t668 @t778)))
(step @p5347 :rule factoring :premises (@p5346))
(step @p5348 :rule chain_resolution :premises (@p3058 @p5347) :args (@t155 (@list @t694)))
(assume-push @p9471 @t703)
(assume-push @p9472 @t713)
(assume-push @p9473 @t721)
(assume-push @p9474 @t770)
(assume-push @p9475 @t727)
(assume-push @p9476 @t776)
(assume-push @p9477 @t733)
(assume-push @p9478 @t782)
(assume-push @p9479 @t735)
(assume-push @p9480 @t735)
(assume-push @p9481 @t733)
(assume-push @p9482 @t727)
(assume-push @p9483 @t721)
(assume-push @p9484 @t703)
(assume-push @p9485 @t713)
(assume-push @p9486 @t770)
(assume-push @p9487 @t776)
(assume-push @p9488 @t782)
(step @p5367 :rule symm :premises (@p9479))
(step @p5368 :rule symm :premises (@p9477))
(step @p5369 :rule symm :premises (@p5368))
(step @p5370 :rule symm :premises (@p9475))
(step @p5371 :rule symm :premises (@p5370))
(step @p5372 :rule symm :premises (@p9473))
(step @p5373 :rule symm :premises (@p5372))
(step @p5374 :rule symm :premises (@p9471))
(step @p5375 :rule symm :premises (@p5374))
(step @p5376 :rule symm :premises (@p9472))
(step @p5377 :rule symm :premises (@p9474))
(step @p5378 :rule symm :premises (@p9476))
(step @p5379 :rule symm :premises (@p9478))
(step @p5380 :rule trans :premises (@p5379 @p5378 @p5377 @p5376 @p5375 @p5373 @p5371 @p5369 @p5367))
(step @p5381 :rule cong :premises (@p1110 @p5380) :args (=))
(step @p5382 :rule trans :premises (@p5381 @p1749))
(step @p5383 :rule false_elim :premises (@p5382))
(step-pop @p9488 :rule scope :premises (@p5383))
(step-pop @p9489 :rule scope :premises (@p9488))
(step-pop @p9490 :rule scope :premises (@p9489))
(step-pop @p9491 :rule scope :premises (@p9490))
(step-pop @p9492 :rule scope :premises (@p9491))
(step-pop @p9493 :rule scope :premises (@p9492))
(step-pop @p9494 :rule scope :premises (@p9493))
(step-pop @p9495 :rule scope :premises (@p9494))
(step-pop @p9496 :rule scope :premises (@p9495))
(step @p5384 :rule process_scope :premises (@p9496) :args (@t785))
(step @p5394 :rule and_intro :premises (@p9479 @p9477 @p9475 @p9473 @p9471 @p9472 @p9474 @p9476 @p9478))
(step @p5395 :rule modus_ponens :premises (@p5394 @p5384))
(step-pop @p9497 :rule scope :premises (@p5395))
(step-pop @p9498 :rule scope :premises (@p9497))
(step-pop @p9499 :rule scope :premises (@p9498))
(step-pop @p9500 :rule scope :premises (@p9499))
(step-pop @p9501 :rule scope :premises (@p9500))
(step-pop @p9502 :rule scope :premises (@p9501))
(step-pop @p9503 :rule scope :premises (@p9502))
(step-pop @p9504 :rule scope :premises (@p9503))
(step-pop @p9505 :rule scope :premises (@p9504))
(step @p5396 :rule process_scope :premises (@p9505) :args (@t785))
(step @p5406 :rule implies_elim :premises (@p5396))
(step @p5407 :rule cnf_and_neg :args (@t839))
(step @p5408 :rule resolution :premises (@p5407 @p5406) :args (true @t839))
(assume-push @p9507 @t703)
(assume-push @p9508 @t713)
(assume-push @p9509 @t721)
(assume-push @p9510 @t770)
(assume-push @p9511 @t727)
(assume-push @p9512 @t776)
(assume-push @p9513 @t733)
(assume-push @p9514 @t782)
(assume-push @p9515 @t735)
(assume-push @p9516 @t788)
(assume-push @p9517 @t735)
(assume-push @p9518 @t733)
(assume-push @p9519 @t727)
(assume-push @p9520 @t721)
(assume-push @p9521 @t703)
(assume-push @p9522 @t713)
(assume-push @p9523 @t770)
(assume-push @p9524 @t776)
(assume-push @p9525 @t782)
(assume-push @p9526 @t788)
(step @p5429 :rule symm :premises (@p9515))
(step @p5430 :rule symm :premises (@p9513))
(step @p5431 :rule symm :premises (@p5430))
(step @p5432 :rule symm :premises (@p9511))
(step @p5433 :rule symm :premises (@p5432))
(step @p5434 :rule symm :premises (@p9509))
(step @p5435 :rule symm :premises (@p5434))
(step @p5436 :rule symm :premises (@p9507))
(step @p5437 :rule symm :premises (@p5436))
(step @p5438 :rule symm :premises (@p9508))
(step @p5439 :rule symm :premises (@p9510))
(step @p5440 :rule symm :premises (@p9512))
(step @p5441 :rule symm :premises (@p9514))
(step @p5442 :rule symm :premises (@p9516))
(step @p5443 :rule trans :premises (@p5442 @p5441 @p5440 @p5439 @p5438 @p5437 @p5435 @p5433 @p5431 @p5429))
(step @p5444 :rule cong :premises (@p1107 @p5443) :args (=))
(step @p5445 :rule trans :premises (@p5444 @p1781))
(step @p5446 :rule false_elim :premises (@p5445))
(step-pop @p9526 :rule scope :premises (@p5446))
(step-pop @p9527 :rule scope :premises (@p9526))
(step-pop @p9528 :rule scope :premises (@p9527))
(step-pop @p9529 :rule scope :premises (@p9528))
(step-pop @p9530 :rule scope :premises (@p9529))
(step-pop @p9531 :rule scope :premises (@p9530))
(step-pop @p9532 :rule scope :premises (@p9531))
(step-pop @p9533 :rule scope :premises (@p9532))
(step-pop @p9534 :rule scope :premises (@p9533))
(step-pop @p9535 :rule scope :premises (@p9534))
(step @p5447 :rule process_scope :premises (@p9535) :args (@t791))
(step @p5458 :rule and_intro :premises (@p9515 @p9513 @p9511 @p9509 @p9507 @p9508 @p9510 @p9512 @p9514 @p9516))
(step @p5459 :rule modus_ponens :premises (@p5458 @p5447))
(step-pop @p9536 :rule scope :premises (@p5459))
(step-pop @p9537 :rule scope :premises (@p9536))
(step-pop @p9538 :rule scope :premises (@p9537))
(step-pop @p9539 :rule scope :premises (@p9538))
(step-pop @p9540 :rule scope :premises (@p9539))
(step-pop @p9541 :rule scope :premises (@p9540))
(step-pop @p9542 :rule scope :premises (@p9541))
(step-pop @p9543 :rule scope :premises (@p9542))
(step-pop @p9544 :rule scope :premises (@p9543))
(step-pop @p9545 :rule scope :premises (@p9544))
(step @p5460 :rule process_scope :premises (@p9545) :args (@t791))
(step @p5471 :rule implies_elim :premises (@p5460))
(step @p5472 :rule cnf_and_neg :args (@t840))
(step @p5473 :rule resolution :premises (@p5472 @p5471) :args (true @t840))
(assume-push @p9547 @t703)
(assume-push @p9548 @t713)
(assume-push @p9549 @t721)
(assume-push @p9550 @t770)
(assume-push @p9551 @t727)
(assume-push @p9552 @t776)
(assume-push @p9553 @t733)
(assume-push @p9554 @t782)
(assume-push @p9555 @t735)
(assume-push @p9556 @t788)
(assume-push @p9557 @t794)
(assume-push @p9558 @t735)
(assume-push @p9559 @t733)
(assume-push @p9560 @t727)
(assume-push @p9561 @t721)
(assume-push @p9562 @t703)
(assume-push @p9563 @t713)
(assume-push @p9564 @t770)
(assume-push @p9565 @t776)
(assume-push @p9566 @t782)
(assume-push @p9567 @t788)
(assume-push @p9568 @t794)
(step @p5496 :rule symm :premises (@p9555))
(step @p5497 :rule symm :premises (@p9553))
(step @p5498 :rule symm :premises (@p5497))
(step @p5499 :rule symm :premises (@p9551))
(step @p5500 :rule symm :premises (@p5499))
(step @p5501 :rule symm :premises (@p9549))
(step @p5502 :rule symm :premises (@p5501))
(step @p5503 :rule symm :premises (@p9547))
(step @p5504 :rule symm :premises (@p5503))
(step @p5505 :rule symm :premises (@p9548))
(step @p5506 :rule symm :premises (@p9550))
(step @p5507 :rule symm :premises (@p9552))
(step @p5508 :rule symm :premises (@p9554))
(step @p5509 :rule symm :premises (@p9556))
(step @p5510 :rule symm :premises (@p9557))
(step @p5511 :rule trans :premises (@p5510 @p5509 @p5508 @p5507 @p5506 @p5505 @p5504 @p5502 @p5500 @p5498 @p5496))
(step @p5512 :rule cong :premises (@p1104 @p5511) :args (=))
(step @p5513 :rule trans :premises (@p5512 @p1789))
(step @p5514 :rule false_elim :premises (@p5513))
(step-pop @p9568 :rule scope :premises (@p5514))
(step-pop @p9569 :rule scope :premises (@p9568))
(step-pop @p9570 :rule scope :premises (@p9569))
(step-pop @p9571 :rule scope :premises (@p9570))
(step-pop @p9572 :rule scope :premises (@p9571))
(step-pop @p9573 :rule scope :premises (@p9572))
(step-pop @p9574 :rule scope :premises (@p9573))
(step-pop @p9575 :rule scope :premises (@p9574))
(step-pop @p9576 :rule scope :premises (@p9575))
(step-pop @p9577 :rule scope :premises (@p9576))
(step-pop @p9578 :rule scope :premises (@p9577))
(step @p5515 :rule process_scope :premises (@p9578) :args (@t797))
(step @p5527 :rule and_intro :premises (@p9555 @p9553 @p9551 @p9549 @p9547 @p9548 @p9550 @p9552 @p9554 @p9556 @p9557))
(step @p5528 :rule modus_ponens :premises (@p5527 @p5515))
(step-pop @p9579 :rule scope :premises (@p5528))
(step-pop @p9580 :rule scope :premises (@p9579))
(step-pop @p9581 :rule scope :premises (@p9580))
(step-pop @p9582 :rule scope :premises (@p9581))
(step-pop @p9583 :rule scope :premises (@p9582))
(step-pop @p9584 :rule scope :premises (@p9583))
(step-pop @p9585 :rule scope :premises (@p9584))
(step-pop @p9586 :rule scope :premises (@p9585))
(step-pop @p9587 :rule scope :premises (@p9586))
(step-pop @p9588 :rule scope :premises (@p9587))
(step-pop @p9589 :rule scope :premises (@p9588))
(step @p5529 :rule process_scope :premises (@p9589) :args (@t797))
(step @p5541 :rule implies_elim :premises (@p5529))
(step @p5542 :rule cnf_and_neg :args (@t841))
(step @p5543 :rule resolution :premises (@p5542 @p5541) :args (true @t841))
(assume-push @p9591 @t703)
(assume-push @p9592 @t713)
(assume-push @p9593 @t721)
(assume-push @p9594 @t770)
(assume-push @p9595 @t727)
(assume-push @p9596 @t776)
(assume-push @p9597 @t733)
(assume-push @p9598 @t782)
(assume-push @p9599 @t735)
(assume-push @p9600 @t788)
(assume-push @p9601 @t794)
(assume-push @p9602 @t799)
(assume-push @p9603 @t735)
(assume-push @p9604 @t733)
(assume-push @p9605 @t727)
(assume-push @p9606 @t721)
(assume-push @p9607 @t703)
(assume-push @p9608 @t713)
(assume-push @p9609 @t770)
(assume-push @p9610 @t776)
(assume-push @p9611 @t782)
(assume-push @p9612 @t788)
(assume-push @p9613 @t794)
(assume-push @p9614 @t799)
(step @p5568 :rule symm :premises (@p9599))
(step @p5569 :rule symm :premises (@p9597))
(step @p5570 :rule symm :premises (@p5569))
(step @p5571 :rule symm :premises (@p9595))
(step @p5572 :rule symm :premises (@p5571))
(step @p5573 :rule symm :premises (@p9593))
(step @p5574 :rule symm :premises (@p5573))
(step @p5575 :rule symm :premises (@p9591))
(step @p5576 :rule symm :premises (@p5575))
(step @p5577 :rule symm :premises (@p9592))
(step @p5578 :rule symm :premises (@p9594))
(step @p5579 :rule symm :premises (@p9596))
(step @p5580 :rule symm :premises (@p9598))
(step @p5581 :rule symm :premises (@p9600))
(step @p5582 :rule symm :premises (@p9601))
(step @p5583 :rule symm :premises (@p9602))
(step @p5584 :rule trans :premises (@p5583 @p5582 @p5581 @p5580 @p5579 @p5578 @p5577 @p5576 @p5574 @p5572 @p5570 @p5568))
(step @p5585 :rule cong :premises (@p1100 @p5584) :args (=))
(step @p5586 :rule trans :premises (@p5585 @p1816))
(step @p5587 :rule false_elim :premises (@p5586))
(step-pop @p9614 :rule scope :premises (@p5587))
(step-pop @p9615 :rule scope :premises (@p9614))
(step-pop @p9616 :rule scope :premises (@p9615))
(step-pop @p9617 :rule scope :premises (@p9616))
(step-pop @p9618 :rule scope :premises (@p9617))
(step-pop @p9619 :rule scope :premises (@p9618))
(step-pop @p9620 :rule scope :premises (@p9619))
(step-pop @p9621 :rule scope :premises (@p9620))
(step-pop @p9622 :rule scope :premises (@p9621))
(step-pop @p9623 :rule scope :premises (@p9622))
(step-pop @p9624 :rule scope :premises (@p9623))
(step-pop @p9625 :rule scope :premises (@p9624))
(step @p5588 :rule process_scope :premises (@p9625) :args (@t801))
(step @p5601 :rule and_intro :premises (@p9599 @p9597 @p9595 @p9593 @p9591 @p9592 @p9594 @p9596 @p9598 @p9600 @p9601 @p9602))
(step @p5602 :rule modus_ponens :premises (@p5601 @p5588))
(step-pop @p9626 :rule scope :premises (@p5602))
(step-pop @p9627 :rule scope :premises (@p9626))
(step-pop @p9628 :rule scope :premises (@p9627))
(step-pop @p9629 :rule scope :premises (@p9628))
(step-pop @p9630 :rule scope :premises (@p9629))
(step-pop @p9631 :rule scope :premises (@p9630))
(step-pop @p9632 :rule scope :premises (@p9631))
(step-pop @p9633 :rule scope :premises (@p9632))
(step-pop @p9634 :rule scope :premises (@p9633))
(step-pop @p9635 :rule scope :premises (@p9634))
(step-pop @p9636 :rule scope :premises (@p9635))
(step-pop @p9637 :rule scope :premises (@p9636))
(step @p5603 :rule process_scope :premises (@p9637) :args (@t801))
(step @p5616 :rule implies_elim :premises (@p5603))
(step @p5617 :rule cnf_and_neg :args (@t842))
(step @p5618 :rule resolution :premises (@p5617 @p5616) :args (true @t842))
(assume-push @p9639 @t703)
(assume-push @p9640 @t713)
(assume-push @p9641 @t721)
(assume-push @p9642 @t770)
(assume-push @p9643 @t727)
(assume-push @p9644 @t776)
(assume-push @p9645 @t733)
(assume-push @p9646 @t782)
(assume-push @p9647 @t735)
(assume-push @p9648 @t788)
(assume-push @p9649 @t794)
(assume-push @p9650 @t799)
(assume-push @p9651 @t735)
(assume-push @p9652 @t733)
(assume-push @p9653 @t727)
(assume-push @p9654 @t721)
(assume-push @p9655 @t703)
(assume-push @p9656 @t713)
(assume-push @p9657 @t770)
(assume-push @p9658 @t776)
(assume-push @p9659 @t782)
(assume-push @p9660 @t788)
(assume-push @p9661 @t794)
(assume-push @p9662 @t799)
(step @p5643 :rule symm :premises (@p9647))
(step @p5644 :rule symm :premises (@p9645))
(step @p5645 :rule symm :premises (@p5644))
(step @p5646 :rule symm :premises (@p9643))
(step @p5647 :rule symm :premises (@p5646))
(step @p5648 :rule symm :premises (@p9641))
(step @p5649 :rule symm :premises (@p5648))
(step @p5650 :rule symm :premises (@p9639))
(step @p5651 :rule symm :premises (@p5650))
(step @p5652 :rule symm :premises (@p9640))
(step @p5653 :rule symm :premises (@p9642))
(step @p5654 :rule symm :premises (@p9644))
(step @p5655 :rule symm :premises (@p9646))
(step @p5656 :rule symm :premises (@p9648))
(step @p5657 :rule symm :premises (@p9649))
(step @p5658 :rule symm :premises (@p9650))
(step @p5659 :rule trans :premises (@p5658 @p5657 @p5656 @p5655 @p5654 @p5653 @p5652 @p5651 @p5649 @p5647 @p5645 @p5643))
(step @p5660 :rule cong :premises (@p1101 @p5659) :args (=))
(step @p5661 :rule trans :premises (@p5660 @p1801))
(step @p5662 :rule false_elim :premises (@p5661))
(step-pop @p9662 :rule scope :premises (@p5662))
(step-pop @p9663 :rule scope :premises (@p9662))
(step-pop @p9664 :rule scope :premises (@p9663))
(step-pop @p9665 :rule scope :premises (@p9664))
(step-pop @p9666 :rule scope :premises (@p9665))
(step-pop @p9667 :rule scope :premises (@p9666))
(step-pop @p9668 :rule scope :premises (@p9667))
(step-pop @p9669 :rule scope :premises (@p9668))
(step-pop @p9670 :rule scope :premises (@p9669))
(step-pop @p9671 :rule scope :premises (@p9670))
(step-pop @p9672 :rule scope :premises (@p9671))
(step-pop @p9673 :rule scope :premises (@p9672))
(step @p5663 :rule process_scope :premises (@p9673) :args (@t803))
(step @p5676 :rule and_intro :premises (@p9647 @p9645 @p9643 @p9641 @p9639 @p9640 @p9642 @p9644 @p9646 @p9648 @p9649 @p9650))
(step @p5677 :rule modus_ponens :premises (@p5676 @p5663))
(step-pop @p9674 :rule scope :premises (@p5677))
(step-pop @p9675 :rule scope :premises (@p9674))
(step-pop @p9676 :rule scope :premises (@p9675))
(step-pop @p9677 :rule scope :premises (@p9676))
(step-pop @p9678 :rule scope :premises (@p9677))
(step-pop @p9679 :rule scope :premises (@p9678))
(step-pop @p9680 :rule scope :premises (@p9679))
(step-pop @p9681 :rule scope :premises (@p9680))
(step-pop @p9682 :rule scope :premises (@p9681))
(step-pop @p9683 :rule scope :premises (@p9682))
(step-pop @p9684 :rule scope :premises (@p9683))
(step-pop @p9685 :rule scope :premises (@p9684))
(step @p5678 :rule process_scope :premises (@p9685) :args (@t803))
(step @p5691 :rule implies_elim :premises (@p5678))
(step @p5692 :rule resolution :premises (@p5617 @p5691) :args (true @t842))
(step @p5693 :rule chain_resolution :premises (@p2254 @p3387 @p5692 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261 @p5618 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args ((@list false true false false false false false false false false true false false false false false false false false) (@list @t686 @t710 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703 @t709 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p5694 :rule factoring :premises (@p5693))
(step @p5695 :rule chain_resolution :premises (@p5694 @p3273 @p3272 @p5543 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args (@t843 (@list @t799 @t688 @t796 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p5696 :rule factoring :premises (@p5695))
(step @p5697 :rule chain_resolution :premises (@p5696 @p3201 @p3200 @p5473 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args (@t843 (@list @t794 @t690 @t790 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p5698 :rule factoring :premises (@p5697))
(step @p5699 :rule chain_resolution :premises (@p5698 @p3127 @p3126 @p5408 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args (@t843 (@list @t788 @t692 @t784 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p5700 :rule factoring :premises (@p5699))
(step @p5701 :rule chain_resolution :premises (@p2519 @p5700) :args (@t155 (@list @t735)))
(step @p5702 :rule chain_resolution :premises (@p2520 @p5701) :args (@t155 (@list @t677)))
(step @p5703 :rule refl :args (@t789))
(step @p5704 :rule refl :args (@t746))
(step @p5705 :rule nary_cong :premises (@p5704 @p5703 @p2288) :args (or))
(assume-push @p9687 @t692)
(assume-push @p9688 @t675)
(assume-push @p9689 @t716)
; trust TRUST_THEORY_REWRITE
(step @p2295 :rule trust :premises () :args (@t718))
(step @p5709 :rule symm :premises (@p9687))
(step @p5710 :rule symm :premises (@p5709))
(step @p5711 :rule symm :premises (@p9688))
(step @p5712 :rule trans :premises (@p5711 @p5710))
(step @p5713 :rule true_intro :premises (@p5712))
(step @p5714 :rule false_intro :premises (@p9689))
(step @p5715 :rule symm :premises (@p5714))
(step @p5716 :rule trans :premises (@p5715 @p5713))
(step @p5717 false :rule eq_resolve :premises (@p5716 @p2295))
(step-pop @p9689 :rule scope :premises (@p5717))
(step-pop @p9690 :rule scope :premises (@p9689))
(step-pop @p9691 :rule scope :premises (@p9690))
(step @p5718 :rule process_scope :premises (@p9691) :args (false))
(assume-push @p9693 @t675)
(assume-push @p9694 @t692)
(assume-push @p9695 @t716)
(step @p5725 :rule and_intro :premises (@p9694 @p9693 @p9695))
(step-pop @p9695 :rule scope :premises (@p5725))
(step-pop @p9696 :rule scope :premises (@p9695))
(step-pop @p9697 :rule scope :premises (@p9696))
(step @p5726 :rule process_scope :premises (@p9697) :args (@t844))
(step @p5730 :rule implies_elim :premises (@p5726))
(step @p5731 :rule resolution :premises (@p5730 @p5718) :args (true @t844))
(step @p5732 :rule not_and :premises (@p5731))
(step @p5733 :rule eq_resolve :premises (@p5732 @p5705))
(step @p5734 :rule reordering :premises (@p5733) :args ((or @t668 @t789 @t746)))
(assume-push @p9699 @t703)
(assume-push @p9700 @t713)
(assume-push @p9701 @t721)
(assume-push @p9702 @t770)
(assume-push @p9703 @t727)
(assume-push @p9704 @t776)
(assume-push @p9705 @t733)
(assume-push @p9706 @t782)
(assume-push @p9707 @t739)
(assume-push @p9708 @t784)
(assume-push @p9709 @t745)
(assume-push @p9710 @t784)
(assume-push @p9711 @t782)
(assume-push @p9712 @t776)
(assume-push @p9713 @t770)
(assume-push @p9714 @t713)
(assume-push @p9715 @t703)
(assume-push @p9716 @t721)
(assume-push @p9717 @t727)
(assume-push @p9718 @t733)
(assume-push @p9719 @t739)
(assume-push @p9720 @t745)
(step @p5757 :rule symm :premises (@p9708))
(step @p5758 :rule symm :premises (@p9706))
(step @p5759 :rule symm :premises (@p5758))
(step @p5760 :rule symm :premises (@p9704))
(step @p5761 :rule symm :premises (@p5760))
(step @p5762 :rule symm :premises (@p9702))
(step @p5763 :rule symm :premises (@p5762))
(step @p5764 :rule symm :premises (@p9700))
(step @p5765 :rule symm :premises (@p5764))
(step @p5766 :rule symm :premises (@p9699))
(step @p5767 :rule symm :premises (@p9701))
(step @p5768 :rule symm :premises (@p9703))
(step @p5769 :rule symm :premises (@p9705))
(step @p5770 :rule symm :premises (@p9707))
(step @p5771 :rule symm :premises (@p9709))
(step @p5772 :rule trans :premises (@p5771 @p5770 @p5769 @p5768 @p5767 @p5766 @p5765 @p5763 @p5761 @p5759 @p5757))
(step @p5773 :rule cong :premises (@p1107 @p5772) :args (=))
(step @p5774 :rule trans :premises (@p5773 @p1655))
(step @p5775 :rule false_elim :premises (@p5774))
(step-pop @p9720 :rule scope :premises (@p5775))
(step-pop @p9721 :rule scope :premises (@p9720))
(step-pop @p9722 :rule scope :premises (@p9721))
(step-pop @p9723 :rule scope :premises (@p9722))
(step-pop @p9724 :rule scope :premises (@p9723))
(step-pop @p9725 :rule scope :premises (@p9724))
(step-pop @p9726 :rule scope :premises (@p9725))
(step-pop @p9727 :rule scope :premises (@p9726))
(step-pop @p9728 :rule scope :premises (@p9727))
(step-pop @p9729 :rule scope :premises (@p9728))
(step-pop @p9730 :rule scope :premises (@p9729))
(step @p5776 :rule process_scope :premises (@p9730) :args (@t748))
(step @p5788 :rule and_intro :premises (@p9708 @p9706 @p9704 @p9702 @p9700 @p9699 @p9701 @p9703 @p9705 @p9707 @p9709))
(step @p5789 :rule modus_ponens :premises (@p5788 @p5776))
(step-pop @p9731 :rule scope :premises (@p5789))
(step-pop @p9732 :rule scope :premises (@p9731))
(step-pop @p9733 :rule scope :premises (@p9732))
(step-pop @p9734 :rule scope :premises (@p9733))
(step-pop @p9735 :rule scope :premises (@p9734))
(step-pop @p9736 :rule scope :premises (@p9735))
(step-pop @p9737 :rule scope :premises (@p9736))
(step-pop @p9738 :rule scope :premises (@p9737))
(step-pop @p9739 :rule scope :premises (@p9738))
(step-pop @p9740 :rule scope :premises (@p9739))
(step-pop @p9741 :rule scope :premises (@p9740))
(step @p5790 :rule process_scope :premises (@p9741) :args (@t748))
(step @p5802 :rule implies_elim :premises (@p5790))
(step @p5803 :rule cnf_and_neg :args (@t845))
(step @p5804 :rule resolution :premises (@p5803 @p5802) :args (true @t845))
(assume-push @p9743 @t703)
(assume-push @p9744 @t713)
(assume-push @p9745 @t721)
(assume-push @p9746 @t770)
(assume-push @p9747 @t727)
(assume-push @p9748 @t776)
(assume-push @p9749 @t733)
(assume-push @p9750 @t782)
(assume-push @p9751 @t739)
(assume-push @p9752 @t784)
(assume-push @p9753 @t745)
(assume-push @p9754 @t751)
(assume-push @p9755 @t784)
(assume-push @p9756 @t782)
(assume-push @p9757 @t776)
(assume-push @p9758 @t770)
(assume-push @p9759 @t713)
(assume-push @p9760 @t703)
(assume-push @p9761 @t721)
(assume-push @p9762 @t727)
(assume-push @p9763 @t733)
(assume-push @p9764 @t739)
(assume-push @p9765 @t745)
(assume-push @p9766 @t751)
(step @p5829 :rule symm :premises (@p9752))
(step @p5830 :rule symm :premises (@p9750))
(step @p5831 :rule symm :premises (@p5830))
(step @p5832 :rule symm :premises (@p9748))
(step @p5833 :rule symm :premises (@p5832))
(step @p5834 :rule symm :premises (@p9746))
(step @p5835 :rule symm :premises (@p5834))
(step @p5836 :rule symm :premises (@p9744))
(step @p5837 :rule symm :premises (@p5836))
(step @p5838 :rule symm :premises (@p9743))
(step @p5839 :rule symm :premises (@p9745))
(step @p5840 :rule symm :premises (@p9747))
(step @p5841 :rule symm :premises (@p9749))
(step @p5842 :rule symm :premises (@p9751))
(step @p5843 :rule symm :premises (@p9753))
(step @p5844 :rule symm :premises (@p9754))
(step @p5845 :rule trans :premises (@p5844 @p5843 @p5842 @p5841 @p5840 @p5839 @p5838 @p5837 @p5835 @p5833 @p5831 @p5829))
(step @p5846 :rule cong :premises (@p1104 @p5845) :args (=))
(step @p5847 :rule trans :premises (@p5846 @p1668))
(step @p5848 :rule false_elim :premises (@p5847))
(step-pop @p9766 :rule scope :premises (@p5848))
(step-pop @p9767 :rule scope :premises (@p9766))
(step-pop @p9768 :rule scope :premises (@p9767))
(step-pop @p9769 :rule scope :premises (@p9768))
(step-pop @p9770 :rule scope :premises (@p9769))
(step-pop @p9771 :rule scope :premises (@p9770))
(step-pop @p9772 :rule scope :premises (@p9771))
(step-pop @p9773 :rule scope :premises (@p9772))
(step-pop @p9774 :rule scope :premises (@p9773))
(step-pop @p9775 :rule scope :premises (@p9774))
(step-pop @p9776 :rule scope :premises (@p9775))
(step-pop @p9777 :rule scope :premises (@p9776))
(step @p5849 :rule process_scope :premises (@p9777) :args (@t754))
(step @p5862 :rule and_intro :premises (@p9752 @p9750 @p9748 @p9746 @p9744 @p9743 @p9745 @p9747 @p9749 @p9751 @p9753 @p9754))
(step @p5863 :rule modus_ponens :premises (@p5862 @p5849))
(step-pop @p9778 :rule scope :premises (@p5863))
(step-pop @p9779 :rule scope :premises (@p9778))
(step-pop @p9780 :rule scope :premises (@p9779))
(step-pop @p9781 :rule scope :premises (@p9780))
(step-pop @p9782 :rule scope :premises (@p9781))
(step-pop @p9783 :rule scope :premises (@p9782))
(step-pop @p9784 :rule scope :premises (@p9783))
(step-pop @p9785 :rule scope :premises (@p9784))
(step-pop @p9786 :rule scope :premises (@p9785))
(step-pop @p9787 :rule scope :premises (@p9786))
(step-pop @p9788 :rule scope :premises (@p9787))
(step-pop @p9789 :rule scope :premises (@p9788))
(step @p5864 :rule process_scope :premises (@p9789) :args (@t754))
(step @p5877 :rule implies_elim :premises (@p5864))
(step @p5878 :rule cnf_and_neg :args (@t846))
(step @p5879 :rule resolution :premises (@p5878 @p5877) :args (true @t846))
(assume-push @p9791 @t703)
(assume-push @p9792 @t713)
(assume-push @p9793 @t721)
(assume-push @p9794 @t770)
(assume-push @p9795 @t727)
(assume-push @p9796 @t776)
(assume-push @p9797 @t733)
(assume-push @p9798 @t782)
(assume-push @p9799 @t739)
(assume-push @p9800 @t784)
(assume-push @p9801 @t745)
(assume-push @p9802 @t751)
(assume-push @p9803 @t757)
(assume-push @p9804 @t784)
(assume-push @p9805 @t782)
(assume-push @p9806 @t776)
(assume-push @p9807 @t770)
(assume-push @p9808 @t713)
(assume-push @p9809 @t703)
(assume-push @p9810 @t721)
(assume-push @p9811 @t727)
(assume-push @p9812 @t733)
(assume-push @p9813 @t739)
(assume-push @p9814 @t745)
(assume-push @p9815 @t751)
(assume-push @p9816 @t757)
(step @p5906 :rule symm :premises (@p9800))
(step @p5907 :rule symm :premises (@p9798))
(step @p5908 :rule symm :premises (@p5907))
(step @p5909 :rule symm :premises (@p9796))
(step @p5910 :rule symm :premises (@p5909))
(step @p5911 :rule symm :premises (@p9794))
(step @p5912 :rule symm :premises (@p5911))
(step @p5913 :rule symm :premises (@p9792))
(step @p5914 :rule symm :premises (@p5913))
(step @p5915 :rule symm :premises (@p9791))
(step @p5916 :rule symm :premises (@p9793))
(step @p5917 :rule symm :premises (@p9795))
(step @p5918 :rule symm :premises (@p9797))
(step @p5919 :rule symm :premises (@p9799))
(step @p5920 :rule symm :premises (@p9801))
(step @p5921 :rule symm :premises (@p9802))
(step @p5922 :rule symm :premises (@p9803))
(step @p5923 :rule trans :premises (@p5922 @p5921 @p5920 @p5919 @p5918 @p5917 @p5916 @p5915 @p5914 @p5912 @p5910 @p5908 @p5906))
(step @p5924 :rule cong :premises (@p1100 @p5923) :args (=))
(step @p5925 :rule trans :premises (@p5924 @p1695))
(step @p5926 :rule false_elim :premises (@p5925))
(step-pop @p9816 :rule scope :premises (@p5926))
(step-pop @p9817 :rule scope :premises (@p9816))
(step-pop @p9818 :rule scope :premises (@p9817))
(step-pop @p9819 :rule scope :premises (@p9818))
(step-pop @p9820 :rule scope :premises (@p9819))
(step-pop @p9821 :rule scope :premises (@p9820))
(step-pop @p9822 :rule scope :premises (@p9821))
(step-pop @p9823 :rule scope :premises (@p9822))
(step-pop @p9824 :rule scope :premises (@p9823))
(step-pop @p9825 :rule scope :premises (@p9824))
(step-pop @p9826 :rule scope :premises (@p9825))
(step-pop @p9827 :rule scope :premises (@p9826))
(step-pop @p9828 :rule scope :premises (@p9827))
(step @p5927 :rule process_scope :premises (@p9828) :args (@t760))
(step @p5941 :rule and_intro :premises (@p9800 @p9798 @p9796 @p9794 @p9792 @p9791 @p9793 @p9795 @p9797 @p9799 @p9801 @p9802 @p9803))
(step @p5942 :rule modus_ponens :premises (@p5941 @p5927))
(step-pop @p9829 :rule scope :premises (@p5942))
(step-pop @p9830 :rule scope :premises (@p9829))
(step-pop @p9831 :rule scope :premises (@p9830))
(step-pop @p9832 :rule scope :premises (@p9831))
(step-pop @p9833 :rule scope :premises (@p9832))
(step-pop @p9834 :rule scope :premises (@p9833))
(step-pop @p9835 :rule scope :premises (@p9834))
(step-pop @p9836 :rule scope :premises (@p9835))
(step-pop @p9837 :rule scope :premises (@p9836))
(step-pop @p9838 :rule scope :premises (@p9837))
(step-pop @p9839 :rule scope :premises (@p9838))
(step-pop @p9840 :rule scope :premises (@p9839))
(step-pop @p9841 :rule scope :premises (@p9840))
(step @p5943 :rule process_scope :premises (@p9841) :args (@t760))
(step @p5957 :rule implies_elim :premises (@p5943))
(step @p5958 :rule cnf_and_neg :args (@t847))
(step @p5959 :rule resolution :premises (@p5958 @p5957) :args (true @t847))
(assume-push @p9843 @t703)
(assume-push @p9844 @t713)
(assume-push @p9845 @t721)
(assume-push @p9846 @t770)
(assume-push @p9847 @t727)
(assume-push @p9848 @t776)
(assume-push @p9849 @t733)
(assume-push @p9850 @t782)
(assume-push @p9851 @t739)
(assume-push @p9852 @t784)
(assume-push @p9853 @t745)
(assume-push @p9854 @t751)
(assume-push @p9855 @t757)
(assume-push @p9856 @t784)
(assume-push @p9857 @t782)
(assume-push @p9858 @t776)
(assume-push @p9859 @t770)
(assume-push @p9860 @t713)
(assume-push @p9861 @t703)
(assume-push @p9862 @t721)
(assume-push @p9863 @t727)
(assume-push @p9864 @t733)
(assume-push @p9865 @t739)
(assume-push @p9866 @t745)
(assume-push @p9867 @t751)
(assume-push @p9868 @t757)
(step @p5986 :rule symm :premises (@p9852))
(step @p5987 :rule symm :premises (@p9850))
(step @p5988 :rule symm :premises (@p5987))
(step @p5989 :rule symm :premises (@p9848))
(step @p5990 :rule symm :premises (@p5989))
(step @p5991 :rule symm :premises (@p9846))
(step @p5992 :rule symm :premises (@p5991))
(step @p5993 :rule symm :premises (@p9844))
(step @p5994 :rule symm :premises (@p5993))
(step @p5995 :rule symm :premises (@p9843))
(step @p5996 :rule symm :premises (@p9845))
(step @p5997 :rule symm :premises (@p9847))
(step @p5998 :rule symm :premises (@p9849))
(step @p5999 :rule symm :premises (@p9851))
(step @p6000 :rule symm :premises (@p9853))
(step @p6001 :rule symm :premises (@p9854))
(step @p6002 :rule symm :premises (@p9855))
(step @p6003 :rule trans :premises (@p6002 @p6001 @p6000 @p5999 @p5998 @p5997 @p5996 @p5995 @p5994 @p5992 @p5990 @p5988 @p5986))
(step @p6004 :rule cong :premises (@p1101 @p6003) :args (=))
(step @p6005 :rule trans :premises (@p6004 @p1680))
(step @p6006 :rule false_elim :premises (@p6005))
(step-pop @p9868 :rule scope :premises (@p6006))
(step-pop @p9869 :rule scope :premises (@p9868))
(step-pop @p9870 :rule scope :premises (@p9869))
(step-pop @p9871 :rule scope :premises (@p9870))
(step-pop @p9872 :rule scope :premises (@p9871))
(step-pop @p9873 :rule scope :premises (@p9872))
(step-pop @p9874 :rule scope :premises (@p9873))
(step-pop @p9875 :rule scope :premises (@p9874))
(step-pop @p9876 :rule scope :premises (@p9875))
(step-pop @p9877 :rule scope :premises (@p9876))
(step-pop @p9878 :rule scope :premises (@p9877))
(step-pop @p9879 :rule scope :premises (@p9878))
(step-pop @p9880 :rule scope :premises (@p9879))
(step @p6007 :rule process_scope :premises (@p9880) :args (@t763))
(step @p6021 :rule and_intro :premises (@p9852 @p9850 @p9848 @p9846 @p9844 @p9843 @p9845 @p9847 @p9849 @p9851 @p9853 @p9854 @p9855))
(step @p6022 :rule modus_ponens :premises (@p6021 @p6007))
(step-pop @p9881 :rule scope :premises (@p6022))
(step-pop @p9882 :rule scope :premises (@p9881))
(step-pop @p9883 :rule scope :premises (@p9882))
(step-pop @p9884 :rule scope :premises (@p9883))
(step-pop @p9885 :rule scope :premises (@p9884))
(step-pop @p9886 :rule scope :premises (@p9885))
(step-pop @p9887 :rule scope :premises (@p9886))
(step-pop @p9888 :rule scope :premises (@p9887))
(step-pop @p9889 :rule scope :premises (@p9888))
(step-pop @p9890 :rule scope :premises (@p9889))
(step-pop @p9891 :rule scope :premises (@p9890))
(step-pop @p9892 :rule scope :premises (@p9891))
(step-pop @p9893 :rule scope :premises (@p9892))
(step @p6023 :rule process_scope :premises (@p9893) :args (@t763))
(step @p6037 :rule implies_elim :premises (@p6023))
(step @p6038 :rule resolution :premises (@p5958 @p6037) :args (true @t847))
(step @p6039 :rule chain_resolution :premises (@p2863 @p2861 @p6038 @p5702 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261 @p5959 @p5702 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args ((@list false true false false false false false false false false false true false false false false false false false false false) (@list @t669 @t762 @t739 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703 @t759 @t739 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p6040 :rule factoring :premises (@p6039))
(step @p6041 :rule chain_resolution :premises (@p6040 @p2739 @p2738 @p5879 @p5702 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args (@t848 (@list @t757 @t671 @t753 @t739 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p6042 :rule factoring :premises (@p6041))
(step @p6043 :rule chain_resolution :premises (@p6042 @p2661 @p2660 @p5804 @p5702 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args (@t848 (@list @t751 @t673 @t747 @t739 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p6044 :rule factoring :premises (@p6043))
(step @p6045 :rule chain_resolution :premises (@p6044 @p2588 @p5734 @p2235 @p3126) :args (@t765 (@list @t745 @t675 @t668 @t784)))
(step @p6046 :rule factoring :premises (@p6045))
(step @p6047 :rule chain_resolution :premises (@p3127 @p6046) :args (@t155 (@list @t692)))
(assume-push @p9895 @t703)
(assume-push @p9896 @t713)
(assume-push @p9897 @t721)
(assume-push @p9898 @t770)
(assume-push @p9899 @t727)
(assume-push @p9900 @t776)
(assume-push @p9901 @t733)
(assume-push @p9902 @t782)
(assume-push @p9903 @t739)
(assume-push @p9904 @t788)
(assume-push @p9905 @t741)
(assume-push @p9906 @t741)
(assume-push @p9907 @t739)
(assume-push @p9908 @t733)
(assume-push @p9909 @t727)
(assume-push @p9910 @t721)
(assume-push @p9911 @t703)
(assume-push @p9912 @t713)
(assume-push @p9913 @t770)
(assume-push @p9914 @t776)
(assume-push @p9915 @t782)
(assume-push @p9916 @t788)
(step @p6070 :rule symm :premises (@p9905))
(step @p6071 :rule symm :premises (@p9903))
(step @p6072 :rule symm :premises (@p6071))
(step @p6073 :rule symm :premises (@p9901))
(step @p6074 :rule symm :premises (@p6073))
(step @p6075 :rule symm :premises (@p9899))
(step @p6076 :rule symm :premises (@p6075))
(step @p6077 :rule symm :premises (@p9897))
(step @p6078 :rule symm :premises (@p6077))
(step @p6079 :rule symm :premises (@p9895))
(step @p6080 :rule symm :premises (@p6079))
(step @p6081 :rule symm :premises (@p9896))
(step @p6082 :rule symm :premises (@p9898))
(step @p6083 :rule symm :premises (@p9900))
(step @p6084 :rule symm :premises (@p9902))
(step @p6085 :rule symm :premises (@p9904))
(step @p6086 :rule trans :premises (@p6085 @p6084 @p6083 @p6082 @p6081 @p6080 @p6078 @p6076 @p6074 @p6072 @p6070))
(step @p6087 :rule cong :premises (@p1107 @p6086) :args (=))
(step @p6088 :rule trans :premises (@p6087 @p1655))
(step @p6089 :rule false_elim :premises (@p6088))
(step-pop @p9916 :rule scope :premises (@p6089))
(step-pop @p9917 :rule scope :premises (@p9916))
(step-pop @p9918 :rule scope :premises (@p9917))
(step-pop @p9919 :rule scope :premises (@p9918))
(step-pop @p9920 :rule scope :premises (@p9919))
(step-pop @p9921 :rule scope :premises (@p9920))
(step-pop @p9922 :rule scope :premises (@p9921))
(step-pop @p9923 :rule scope :premises (@p9922))
(step-pop @p9924 :rule scope :premises (@p9923))
(step-pop @p9925 :rule scope :premises (@p9924))
(step-pop @p9926 :rule scope :premises (@p9925))
(step @p6090 :rule process_scope :premises (@p9926) :args (@t791))
(step @p6102 :rule and_intro :premises (@p9905 @p9903 @p9901 @p9899 @p9897 @p9895 @p9896 @p9898 @p9900 @p9902 @p9904))
(step @p6103 :rule modus_ponens :premises (@p6102 @p6090))
(step-pop @p9927 :rule scope :premises (@p6103))
(step-pop @p9928 :rule scope :premises (@p9927))
(step-pop @p9929 :rule scope :premises (@p9928))
(step-pop @p9930 :rule scope :premises (@p9929))
(step-pop @p9931 :rule scope :premises (@p9930))
(step-pop @p9932 :rule scope :premises (@p9931))
(step-pop @p9933 :rule scope :premises (@p9932))
(step-pop @p9934 :rule scope :premises (@p9933))
(step-pop @p9935 :rule scope :premises (@p9934))
(step-pop @p9936 :rule scope :premises (@p9935))
(step-pop @p9937 :rule scope :premises (@p9936))
(step @p6104 :rule process_scope :premises (@p9937) :args (@t791))
(step @p6116 :rule implies_elim :premises (@p6104))
(step @p6117 :rule cnf_and_neg :args (@t849))
(step @p6118 :rule resolution :premises (@p6117 @p6116) :args (true @t849))
(assume-push @p9939 @t703)
(assume-push @p9940 @t713)
(assume-push @p9941 @t721)
(assume-push @p9942 @t770)
(assume-push @p9943 @t727)
(assume-push @p9944 @t776)
(assume-push @p9945 @t733)
(assume-push @p9946 @t782)
(assume-push @p9947 @t739)
(assume-push @p9948 @t788)
(assume-push @p9949 @t741)
(assume-push @p9950 @t794)
(assume-push @p9951 @t741)
(assume-push @p9952 @t739)
(assume-push @p9953 @t733)
(assume-push @p9954 @t727)
(assume-push @p9955 @t721)
(assume-push @p9956 @t703)
(assume-push @p9957 @t713)
(assume-push @p9958 @t770)
(assume-push @p9959 @t776)
(assume-push @p9960 @t782)
(assume-push @p9961 @t788)
(assume-push @p9962 @t794)
(step @p6143 :rule symm :premises (@p9949))
(step @p6144 :rule symm :premises (@p9947))
(step @p6145 :rule symm :premises (@p6144))
(step @p6146 :rule symm :premises (@p9945))
(step @p6147 :rule symm :premises (@p6146))
(step @p6148 :rule symm :premises (@p9943))
(step @p6149 :rule symm :premises (@p6148))
(step @p6150 :rule symm :premises (@p9941))
(step @p6151 :rule symm :premises (@p6150))
(step @p6152 :rule symm :premises (@p9939))
(step @p6153 :rule symm :premises (@p6152))
(step @p6154 :rule symm :premises (@p9940))
(step @p6155 :rule symm :premises (@p9942))
(step @p6156 :rule symm :premises (@p9944))
(step @p6157 :rule symm :premises (@p9946))
(step @p6158 :rule symm :premises (@p9948))
(step @p6159 :rule symm :premises (@p9950))
(step @p6160 :rule trans :premises (@p6159 @p6158 @p6157 @p6156 @p6155 @p6154 @p6153 @p6151 @p6149 @p6147 @p6145 @p6143))
(step @p6161 :rule cong :premises (@p1104 @p6160) :args (=))
(step @p6162 :rule trans :premises (@p6161 @p1668))
(step @p6163 :rule false_elim :premises (@p6162))
(step-pop @p9962 :rule scope :premises (@p6163))
(step-pop @p9963 :rule scope :premises (@p9962))
(step-pop @p9964 :rule scope :premises (@p9963))
(step-pop @p9965 :rule scope :premises (@p9964))
(step-pop @p9966 :rule scope :premises (@p9965))
(step-pop @p9967 :rule scope :premises (@p9966))
(step-pop @p9968 :rule scope :premises (@p9967))
(step-pop @p9969 :rule scope :premises (@p9968))
(step-pop @p9970 :rule scope :premises (@p9969))
(step-pop @p9971 :rule scope :premises (@p9970))
(step-pop @p9972 :rule scope :premises (@p9971))
(step-pop @p9973 :rule scope :premises (@p9972))
(step @p6164 :rule process_scope :premises (@p9973) :args (@t797))
(step @p6177 :rule and_intro :premises (@p9949 @p9947 @p9945 @p9943 @p9941 @p9939 @p9940 @p9942 @p9944 @p9946 @p9948 @p9950))
(step @p6178 :rule modus_ponens :premises (@p6177 @p6164))
(step-pop @p9974 :rule scope :premises (@p6178))
(step-pop @p9975 :rule scope :premises (@p9974))
(step-pop @p9976 :rule scope :premises (@p9975))
(step-pop @p9977 :rule scope :premises (@p9976))
(step-pop @p9978 :rule scope :premises (@p9977))
(step-pop @p9979 :rule scope :premises (@p9978))
(step-pop @p9980 :rule scope :premises (@p9979))
(step-pop @p9981 :rule scope :premises (@p9980))
(step-pop @p9982 :rule scope :premises (@p9981))
(step-pop @p9983 :rule scope :premises (@p9982))
(step-pop @p9984 :rule scope :premises (@p9983))
(step-pop @p9985 :rule scope :premises (@p9984))
(step @p6179 :rule process_scope :premises (@p9985) :args (@t797))
(step @p6192 :rule implies_elim :premises (@p6179))
(step @p6193 :rule cnf_and_neg :args (@t850))
(step @p6194 :rule resolution :premises (@p6193 @p6192) :args (true @t850))
(assume-push @p9987 @t703)
(assume-push @p9988 @t713)
(assume-push @p9989 @t721)
(assume-push @p9990 @t770)
(assume-push @p9991 @t727)
(assume-push @p9992 @t776)
(assume-push @p9993 @t733)
(assume-push @p9994 @t782)
(assume-push @p9995 @t739)
(assume-push @p9996 @t788)
(assume-push @p9997 @t741)
(assume-push @p9998 @t794)
(assume-push @p9999 @t799)
(assume-push @p10000 @t741)
(assume-push @p10001 @t739)
(assume-push @p10002 @t733)
(assume-push @p10003 @t727)
(assume-push @p10004 @t721)
(assume-push @p10005 @t703)
(assume-push @p10006 @t713)
(assume-push @p10007 @t770)
(assume-push @p10008 @t776)
(assume-push @p10009 @t782)
(assume-push @p10010 @t788)
(assume-push @p10011 @t794)
(assume-push @p10012 @t799)
(step @p6221 :rule symm :premises (@p9997))
(step @p6222 :rule symm :premises (@p9995))
(step @p6223 :rule symm :premises (@p6222))
(step @p6224 :rule symm :premises (@p9993))
(step @p6225 :rule symm :premises (@p6224))
(step @p6226 :rule symm :premises (@p9991))
(step @p6227 :rule symm :premises (@p6226))
(step @p6228 :rule symm :premises (@p9989))
(step @p6229 :rule symm :premises (@p6228))
(step @p6230 :rule symm :premises (@p9987))
(step @p6231 :rule symm :premises (@p6230))
(step @p6232 :rule symm :premises (@p9988))
(step @p6233 :rule symm :premises (@p9990))
(step @p6234 :rule symm :premises (@p9992))
(step @p6235 :rule symm :premises (@p9994))
(step @p6236 :rule symm :premises (@p9996))
(step @p6237 :rule symm :premises (@p9998))
(step @p6238 :rule symm :premises (@p9999))
(step @p6239 :rule trans :premises (@p6238 @p6237 @p6236 @p6235 @p6234 @p6233 @p6232 @p6231 @p6229 @p6227 @p6225 @p6223 @p6221))
(step @p6240 :rule cong :premises (@p1100 @p6239) :args (=))
(step @p6241 :rule trans :premises (@p6240 @p1695))
(step @p6242 :rule false_elim :premises (@p6241))
(step-pop @p10012 :rule scope :premises (@p6242))
(step-pop @p10013 :rule scope :premises (@p10012))
(step-pop @p10014 :rule scope :premises (@p10013))
(step-pop @p10015 :rule scope :premises (@p10014))
(step-pop @p10016 :rule scope :premises (@p10015))
(step-pop @p10017 :rule scope :premises (@p10016))
(step-pop @p10018 :rule scope :premises (@p10017))
(step-pop @p10019 :rule scope :premises (@p10018))
(step-pop @p10020 :rule scope :premises (@p10019))
(step-pop @p10021 :rule scope :premises (@p10020))
(step-pop @p10022 :rule scope :premises (@p10021))
(step-pop @p10023 :rule scope :premises (@p10022))
(step-pop @p10024 :rule scope :premises (@p10023))
(step @p6243 :rule process_scope :premises (@p10024) :args (@t801))
(step @p6257 :rule and_intro :premises (@p9997 @p9995 @p9993 @p9991 @p9989 @p9987 @p9988 @p9990 @p9992 @p9994 @p9996 @p9998 @p9999))
(step @p6258 :rule modus_ponens :premises (@p6257 @p6243))
(step-pop @p10025 :rule scope :premises (@p6258))
(step-pop @p10026 :rule scope :premises (@p10025))
(step-pop @p10027 :rule scope :premises (@p10026))
(step-pop @p10028 :rule scope :premises (@p10027))
(step-pop @p10029 :rule scope :premises (@p10028))
(step-pop @p10030 :rule scope :premises (@p10029))
(step-pop @p10031 :rule scope :premises (@p10030))
(step-pop @p10032 :rule scope :premises (@p10031))
(step-pop @p10033 :rule scope :premises (@p10032))
(step-pop @p10034 :rule scope :premises (@p10033))
(step-pop @p10035 :rule scope :premises (@p10034))
(step-pop @p10036 :rule scope :premises (@p10035))
(step-pop @p10037 :rule scope :premises (@p10036))
(step @p6259 :rule process_scope :premises (@p10037) :args (@t801))
(step @p6273 :rule implies_elim :premises (@p6259))
(step @p6274 :rule cnf_and_neg :args (@t851))
(step @p6275 :rule resolution :premises (@p6274 @p6273) :args (true @t851))
(assume-push @p10039 @t703)
(assume-push @p10040 @t713)
(assume-push @p10041 @t721)
(assume-push @p10042 @t770)
(assume-push @p10043 @t727)
(assume-push @p10044 @t776)
(assume-push @p10045 @t733)
(assume-push @p10046 @t782)
(assume-push @p10047 @t739)
(assume-push @p10048 @t788)
(assume-push @p10049 @t741)
(assume-push @p10050 @t794)
(assume-push @p10051 @t799)
(assume-push @p10052 @t741)
(assume-push @p10053 @t739)
(assume-push @p10054 @t733)
(assume-push @p10055 @t727)
(assume-push @p10056 @t721)
(assume-push @p10057 @t703)
(assume-push @p10058 @t713)
(assume-push @p10059 @t770)
(assume-push @p10060 @t776)
(assume-push @p10061 @t782)
(assume-push @p10062 @t788)
(assume-push @p10063 @t794)
(assume-push @p10064 @t799)
(step @p6302 :rule symm :premises (@p10049))
(step @p6303 :rule symm :premises (@p10047))
(step @p6304 :rule symm :premises (@p6303))
(step @p6305 :rule symm :premises (@p10045))
(step @p6306 :rule symm :premises (@p6305))
(step @p6307 :rule symm :premises (@p10043))
(step @p6308 :rule symm :premises (@p6307))
(step @p6309 :rule symm :premises (@p10041))
(step @p6310 :rule symm :premises (@p6309))
(step @p6311 :rule symm :premises (@p10039))
(step @p6312 :rule symm :premises (@p6311))
(step @p6313 :rule symm :premises (@p10040))
(step @p6314 :rule symm :premises (@p10042))
(step @p6315 :rule symm :premises (@p10044))
(step @p6316 :rule symm :premises (@p10046))
(step @p6317 :rule symm :premises (@p10048))
(step @p6318 :rule symm :premises (@p10050))
(step @p6319 :rule symm :premises (@p10051))
(step @p6320 :rule trans :premises (@p6319 @p6318 @p6317 @p6316 @p6315 @p6314 @p6313 @p6312 @p6310 @p6308 @p6306 @p6304 @p6302))
(step @p6321 :rule cong :premises (@p1101 @p6320) :args (=))
(step @p6322 :rule trans :premises (@p6321 @p1680))
(step @p6323 :rule false_elim :premises (@p6322))
(step-pop @p10064 :rule scope :premises (@p6323))
(step-pop @p10065 :rule scope :premises (@p10064))
(step-pop @p10066 :rule scope :premises (@p10065))
(step-pop @p10067 :rule scope :premises (@p10066))
(step-pop @p10068 :rule scope :premises (@p10067))
(step-pop @p10069 :rule scope :premises (@p10068))
(step-pop @p10070 :rule scope :premises (@p10069))
(step-pop @p10071 :rule scope :premises (@p10070))
(step-pop @p10072 :rule scope :premises (@p10071))
(step-pop @p10073 :rule scope :premises (@p10072))
(step-pop @p10074 :rule scope :premises (@p10073))
(step-pop @p10075 :rule scope :premises (@p10074))
(step-pop @p10076 :rule scope :premises (@p10075))
(step @p6324 :rule process_scope :premises (@p10076) :args (@t803))
(step @p6338 :rule and_intro :premises (@p10049 @p10047 @p10045 @p10043 @p10041 @p10039 @p10040 @p10042 @p10044 @p10046 @p10048 @p10050 @p10051))
(step @p6339 :rule modus_ponens :premises (@p6338 @p6324))
(step-pop @p10077 :rule scope :premises (@p6339))
(step-pop @p10078 :rule scope :premises (@p10077))
(step-pop @p10079 :rule scope :premises (@p10078))
(step-pop @p10080 :rule scope :premises (@p10079))
(step-pop @p10081 :rule scope :premises (@p10080))
(step-pop @p10082 :rule scope :premises (@p10081))
(step-pop @p10083 :rule scope :premises (@p10082))
(step-pop @p10084 :rule scope :premises (@p10083))
(step-pop @p10085 :rule scope :premises (@p10084))
(step-pop @p10086 :rule scope :premises (@p10085))
(step-pop @p10087 :rule scope :premises (@p10086))
(step-pop @p10088 :rule scope :premises (@p10087))
(step-pop @p10089 :rule scope :premises (@p10088))
(step @p6340 :rule process_scope :premises (@p10089) :args (@t803))
(step @p6354 :rule implies_elim :premises (@p6340))
(step @p6355 :rule resolution :premises (@p6274 @p6354) :args (true @t851))
(step @p6356 :rule chain_resolution :premises (@p2254 @p3387 @p6355 @p6047 @p5702 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261 @p6275 @p6047 @p5702 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args ((@list false true false false false false false false false false false false true false false false false false false false false false false) (@list @t686 @t710 @t788 @t739 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703 @t709 @t788 @t739 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p6357 :rule factoring :premises (@p6356))
(step @p6358 :rule chain_resolution :premises (@p6357 @p3273 @p3272 @p6194 @p6047 @p5702 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args (@t852 (@list @t799 @t688 @t796 @t788 @t739 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p6359 :rule factoring :premises (@p6358))
(step @p6360 :rule chain_resolution :premises (@p6359 @p3201 @p3200 @p6118 @p6047 @p5702 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args (@t852 (@list @t794 @t690 @t790 @t788 @t739 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p6361 :rule factoring :premises (@p6360))
(step @p6362 :rule chain_resolution :premises (@p2587 @p6361) :args (@t155 (@list @t741)))
(step @p6363 :rule chain_resolution :premises (@p2588 @p6362) :args (@t155 (@list @t675)))
(step @p6364 :rule refl :args (@t795))
(step @p6365 :rule refl :args (@t752))
(step @p6366 :rule nary_cong :premises (@p6365 @p6364 @p2288) :args (or))
(assume-push @p10091 @t690)
(assume-push @p10092 @t673)
(assume-push @p10093 @t716)
; trust TRUST_THEORY_REWRITE
(step @p2295 :rule trust :premises () :args (@t718))
(step @p6370 :rule symm :premises (@p10091))
(step @p6371 :rule symm :premises (@p6370))
(step @p6372 :rule symm :premises (@p10092))
(step @p6373 :rule trans :premises (@p6372 @p6371))
(step @p6374 :rule true_intro :premises (@p6373))
(step @p6375 :rule false_intro :premises (@p10093))
(step @p6376 :rule symm :premises (@p6375))
(step @p6377 :rule trans :premises (@p6376 @p6374))
(step @p6378 false :rule eq_resolve :premises (@p6377 @p2295))
(step-pop @p10093 :rule scope :premises (@p6378))
(step-pop @p10094 :rule scope :premises (@p10093))
(step-pop @p10095 :rule scope :premises (@p10094))
(step @p6379 :rule process_scope :premises (@p10095) :args (false))
(assume-push @p10097 @t673)
(assume-push @p10098 @t690)
(assume-push @p10099 @t716)
(step @p6386 :rule and_intro :premises (@p10098 @p10097 @p10099))
(step-pop @p10099 :rule scope :premises (@p6386))
(step-pop @p10100 :rule scope :premises (@p10099))
(step-pop @p10101 :rule scope :premises (@p10100))
(step @p6387 :rule process_scope :premises (@p10101) :args (@t853))
(step @p6391 :rule implies_elim :premises (@p6387))
(step @p6392 :rule resolution :premises (@p6391 @p6379) :args (true @t853))
(step @p6393 :rule not_and :premises (@p6392))
(step @p6394 :rule eq_resolve :premises (@p6393 @p6366))
(step @p6395 :rule reordering :premises (@p6394) :args ((or @t668 @t795 @t752)))
(assume-push @p10103 @t703)
(assume-push @p10104 @t713)
(assume-push @p10105 @t721)
(assume-push @p10106 @t770)
(assume-push @p10107 @t727)
(assume-push @p10108 @t776)
(assume-push @p10109 @t733)
(assume-push @p10110 @t782)
(assume-push @p10111 @t739)
(assume-push @p10112 @t788)
(assume-push @p10113 @t745)
(assume-push @p10114 @t790)
(assume-push @p10115 @t751)
(assume-push @p10116 @t790)
(assume-push @p10117 @t788)
(assume-push @p10118 @t782)
(assume-push @p10119 @t776)
(assume-push @p10120 @t770)
(assume-push @p10121 @t713)
(assume-push @p10122 @t703)
(assume-push @p10123 @t721)
(assume-push @p10124 @t727)
(assume-push @p10125 @t733)
(assume-push @p10126 @t739)
(assume-push @p10127 @t745)
(assume-push @p10128 @t751)
(step @p6422 :rule symm :premises (@p10114))
(step @p6423 :rule symm :premises (@p10112))
(step @p6424 :rule symm :premises (@p6423))
(step @p6425 :rule symm :premises (@p10110))
(step @p6426 :rule symm :premises (@p6425))
(step @p6427 :rule symm :premises (@p10108))
(step @p6428 :rule symm :premises (@p6427))
(step @p6429 :rule symm :premises (@p10106))
(step @p6430 :rule symm :premises (@p6429))
(step @p6431 :rule symm :premises (@p10104))
(step @p6432 :rule symm :premises (@p6431))
(step @p6433 :rule symm :premises (@p10103))
(step @p6434 :rule symm :premises (@p10105))
(step @p6435 :rule symm :premises (@p10107))
(step @p6436 :rule symm :premises (@p10109))
(step @p6437 :rule symm :premises (@p10111))
(step @p6438 :rule symm :premises (@p10113))
(step @p6439 :rule symm :premises (@p10115))
(step @p6440 :rule trans :premises (@p6439 @p6438 @p6437 @p6436 @p6435 @p6434 @p6433 @p6432 @p6430 @p6428 @p6426 @p6424 @p6422))
(step @p6441 :rule cong :premises (@p1104 @p6440) :args (=))
(step @p6442 :rule trans :premises (@p6441 @p1545))
(step @p6443 :rule false_elim :premises (@p6442))
(step-pop @p10128 :rule scope :premises (@p6443))
(step-pop @p10129 :rule scope :premises (@p10128))
(step-pop @p10130 :rule scope :premises (@p10129))
(step-pop @p10131 :rule scope :premises (@p10130))
(step-pop @p10132 :rule scope :premises (@p10131))
(step-pop @p10133 :rule scope :premises (@p10132))
(step-pop @p10134 :rule scope :premises (@p10133))
(step-pop @p10135 :rule scope :premises (@p10134))
(step-pop @p10136 :rule scope :premises (@p10135))
(step-pop @p10137 :rule scope :premises (@p10136))
(step-pop @p10138 :rule scope :premises (@p10137))
(step-pop @p10139 :rule scope :premises (@p10138))
(step-pop @p10140 :rule scope :premises (@p10139))
(step @p6444 :rule process_scope :premises (@p10140) :args (@t754))
(step @p6458 :rule and_intro :premises (@p10114 @p10112 @p10110 @p10108 @p10106 @p10104 @p10103 @p10105 @p10107 @p10109 @p10111 @p10113 @p10115))
(step @p6459 :rule modus_ponens :premises (@p6458 @p6444))
(step-pop @p10141 :rule scope :premises (@p6459))
(step-pop @p10142 :rule scope :premises (@p10141))
(step-pop @p10143 :rule scope :premises (@p10142))
(step-pop @p10144 :rule scope :premises (@p10143))
(step-pop @p10145 :rule scope :premises (@p10144))
(step-pop @p10146 :rule scope :premises (@p10145))
(step-pop @p10147 :rule scope :premises (@p10146))
(step-pop @p10148 :rule scope :premises (@p10147))
(step-pop @p10149 :rule scope :premises (@p10148))
(step-pop @p10150 :rule scope :premises (@p10149))
(step-pop @p10151 :rule scope :premises (@p10150))
(step-pop @p10152 :rule scope :premises (@p10151))
(step-pop @p10153 :rule scope :premises (@p10152))
(step @p6460 :rule process_scope :premises (@p10153) :args (@t754))
(step @p6474 :rule implies_elim :premises (@p6460))
(step @p6475 :rule cnf_and_neg :args (@t854))
(step @p6476 :rule resolution :premises (@p6475 @p6474) :args (true @t854))
(assume-push @p10155 @t703)
(assume-push @p10156 @t713)
(assume-push @p10157 @t721)
(assume-push @p10158 @t770)
(assume-push @p10159 @t727)
(assume-push @p10160 @t776)
(assume-push @p10161 @t733)
(assume-push @p10162 @t782)
(assume-push @p10163 @t739)
(assume-push @p10164 @t788)
(assume-push @p10165 @t745)
(assume-push @p10166 @t790)
(assume-push @p10167 @t751)
(assume-push @p10168 @t757)
(assume-push @p10169 @t790)
(assume-push @p10170 @t788)
(assume-push @p10171 @t782)
(assume-push @p10172 @t776)
(assume-push @p10173 @t770)
(assume-push @p10174 @t713)
(assume-push @p10175 @t703)
(assume-push @p10176 @t721)
(assume-push @p10177 @t727)
(assume-push @p10178 @t733)
(assume-push @p10179 @t739)
(assume-push @p10180 @t745)
(assume-push @p10181 @t751)
(assume-push @p10182 @t757)
(step @p6505 :rule symm :premises (@p10166))
(step @p6506 :rule symm :premises (@p10164))
(step @p6507 :rule symm :premises (@p6506))
(step @p6508 :rule symm :premises (@p10162))
(step @p6509 :rule symm :premises (@p6508))
(step @p6510 :rule symm :premises (@p10160))
(step @p6511 :rule symm :premises (@p6510))
(step @p6512 :rule symm :premises (@p10158))
(step @p6513 :rule symm :premises (@p6512))
(step @p6514 :rule symm :premises (@p10156))
(step @p6515 :rule symm :premises (@p6514))
(step @p6516 :rule symm :premises (@p10155))
(step @p6517 :rule symm :premises (@p10157))
(step @p6518 :rule symm :premises (@p10159))
(step @p6519 :rule symm :premises (@p10161))
(step @p6520 :rule symm :premises (@p10163))
(step @p6521 :rule symm :premises (@p10165))
(step @p6522 :rule symm :premises (@p10167))
(step @p6523 :rule symm :premises (@p10168))
(step @p6524 :rule trans :premises (@p6523 @p6522 @p6521 @p6520 @p6519 @p6518 @p6517 @p6516 @p6515 @p6513 @p6511 @p6509 @p6507 @p6505))
(step @p6525 :rule cong :premises (@p1100 @p6524) :args (=))
(step @p6526 :rule trans :premises (@p6525 @p1572))
(step @p6527 :rule false_elim :premises (@p6526))
(step-pop @p10182 :rule scope :premises (@p6527))
(step-pop @p10183 :rule scope :premises (@p10182))
(step-pop @p10184 :rule scope :premises (@p10183))
(step-pop @p10185 :rule scope :premises (@p10184))
(step-pop @p10186 :rule scope :premises (@p10185))
(step-pop @p10187 :rule scope :premises (@p10186))
(step-pop @p10188 :rule scope :premises (@p10187))
(step-pop @p10189 :rule scope :premises (@p10188))
(step-pop @p10190 :rule scope :premises (@p10189))
(step-pop @p10191 :rule scope :premises (@p10190))
(step-pop @p10192 :rule scope :premises (@p10191))
(step-pop @p10193 :rule scope :premises (@p10192))
(step-pop @p10194 :rule scope :premises (@p10193))
(step-pop @p10195 :rule scope :premises (@p10194))
(step @p6528 :rule process_scope :premises (@p10195) :args (@t760))
(step @p6543 :rule and_intro :premises (@p10166 @p10164 @p10162 @p10160 @p10158 @p10156 @p10155 @p10157 @p10159 @p10161 @p10163 @p10165 @p10167 @p10168))
(step @p6544 :rule modus_ponens :premises (@p6543 @p6528))
(step-pop @p10196 :rule scope :premises (@p6544))
(step-pop @p10197 :rule scope :premises (@p10196))
(step-pop @p10198 :rule scope :premises (@p10197))
(step-pop @p10199 :rule scope :premises (@p10198))
(step-pop @p10200 :rule scope :premises (@p10199))
(step-pop @p10201 :rule scope :premises (@p10200))
(step-pop @p10202 :rule scope :premises (@p10201))
(step-pop @p10203 :rule scope :premises (@p10202))
(step-pop @p10204 :rule scope :premises (@p10203))
(step-pop @p10205 :rule scope :premises (@p10204))
(step-pop @p10206 :rule scope :premises (@p10205))
(step-pop @p10207 :rule scope :premises (@p10206))
(step-pop @p10208 :rule scope :premises (@p10207))
(step-pop @p10209 :rule scope :premises (@p10208))
(step @p6545 :rule process_scope :premises (@p10209) :args (@t760))
(step @p6560 :rule implies_elim :premises (@p6545))
(step @p6561 :rule cnf_and_neg :args (@t855))
(step @p6562 :rule resolution :premises (@p6561 @p6560) :args (true @t855))
(assume-push @p10211 @t703)
(assume-push @p10212 @t713)
(assume-push @p10213 @t721)
(assume-push @p10214 @t770)
(assume-push @p10215 @t727)
(assume-push @p10216 @t776)
(assume-push @p10217 @t733)
(assume-push @p10218 @t782)
(assume-push @p10219 @t739)
(assume-push @p10220 @t788)
(assume-push @p10221 @t745)
(assume-push @p10222 @t790)
(assume-push @p10223 @t751)
(assume-push @p10224 @t757)
(assume-push @p10225 @t790)
(assume-push @p10226 @t788)
(assume-push @p10227 @t782)
(assume-push @p10228 @t776)
(assume-push @p10229 @t770)
(assume-push @p10230 @t713)
(assume-push @p10231 @t703)
(assume-push @p10232 @t721)
(assume-push @p10233 @t727)
(assume-push @p10234 @t733)
(assume-push @p10235 @t739)
(assume-push @p10236 @t745)
(assume-push @p10237 @t751)
(assume-push @p10238 @t757)
(step @p6591 :rule symm :premises (@p10222))
(step @p6592 :rule symm :premises (@p10220))
(step @p6593 :rule symm :premises (@p6592))
(step @p6594 :rule symm :premises (@p10218))
(step @p6595 :rule symm :premises (@p6594))
(step @p6596 :rule symm :premises (@p10216))
(step @p6597 :rule symm :premises (@p6596))
(step @p6598 :rule symm :premises (@p10214))
(step @p6599 :rule symm :premises (@p6598))
(step @p6600 :rule symm :premises (@p10212))
(step @p6601 :rule symm :premises (@p6600))
(step @p6602 :rule symm :premises (@p10211))
(step @p6603 :rule symm :premises (@p10213))
(step @p6604 :rule symm :premises (@p10215))
(step @p6605 :rule symm :premises (@p10217))
(step @p6606 :rule symm :premises (@p10219))
(step @p6607 :rule symm :premises (@p10221))
(step @p6608 :rule symm :premises (@p10223))
(step @p6609 :rule symm :premises (@p10224))
(step @p6610 :rule trans :premises (@p6609 @p6608 @p6607 @p6606 @p6605 @p6604 @p6603 @p6602 @p6601 @p6599 @p6597 @p6595 @p6593 @p6591))
(step @p6611 :rule cong :premises (@p1101 @p6610) :args (=))
(step @p6612 :rule trans :premises (@p6611 @p1557))
(step @p6613 :rule false_elim :premises (@p6612))
(step-pop @p10238 :rule scope :premises (@p6613))
(step-pop @p10239 :rule scope :premises (@p10238))
(step-pop @p10240 :rule scope :premises (@p10239))
(step-pop @p10241 :rule scope :premises (@p10240))
(step-pop @p10242 :rule scope :premises (@p10241))
(step-pop @p10243 :rule scope :premises (@p10242))
(step-pop @p10244 :rule scope :premises (@p10243))
(step-pop @p10245 :rule scope :premises (@p10244))
(step-pop @p10246 :rule scope :premises (@p10245))
(step-pop @p10247 :rule scope :premises (@p10246))
(step-pop @p10248 :rule scope :premises (@p10247))
(step-pop @p10249 :rule scope :premises (@p10248))
(step-pop @p10250 :rule scope :premises (@p10249))
(step-pop @p10251 :rule scope :premises (@p10250))
(step @p6614 :rule process_scope :premises (@p10251) :args (@t763))
(step @p6629 :rule and_intro :premises (@p10222 @p10220 @p10218 @p10216 @p10214 @p10212 @p10211 @p10213 @p10215 @p10217 @p10219 @p10221 @p10223 @p10224))
(step @p6630 :rule modus_ponens :premises (@p6629 @p6614))
(step-pop @p10252 :rule scope :premises (@p6630))
(step-pop @p10253 :rule scope :premises (@p10252))
(step-pop @p10254 :rule scope :premises (@p10253))
(step-pop @p10255 :rule scope :premises (@p10254))
(step-pop @p10256 :rule scope :premises (@p10255))
(step-pop @p10257 :rule scope :premises (@p10256))
(step-pop @p10258 :rule scope :premises (@p10257))
(step-pop @p10259 :rule scope :premises (@p10258))
(step-pop @p10260 :rule scope :premises (@p10259))
(step-pop @p10261 :rule scope :premises (@p10260))
(step-pop @p10262 :rule scope :premises (@p10261))
(step-pop @p10263 :rule scope :premises (@p10262))
(step-pop @p10264 :rule scope :premises (@p10263))
(step-pop @p10265 :rule scope :premises (@p10264))
(step @p6631 :rule process_scope :premises (@p10265) :args (@t763))
(step @p6646 :rule implies_elim :premises (@p6631))
(step @p6647 :rule resolution :premises (@p6561 @p6646) :args (true @t855))
(step @p6648 :rule chain_resolution :premises (@p2863 @p2861 @p6647 @p6363 @p6047 @p5702 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261 @p6562 @p6363 @p6047 @p5702 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args ((@list false true false false false false false false false false false false false true false false false false false false false false false false false) (@list @t669 @t762 @t745 @t788 @t739 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703 @t759 @t745 @t788 @t739 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p6649 :rule factoring :premises (@p6648))
(step @p6650 :rule chain_resolution :premises (@p6649 @p2739 @p2738 @p6476 @p6363 @p6047 @p5702 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args ((@list false true true false false false false false false false false false false false) (@list @t757 @t671 @t753 @t745 @t788 @t739 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p6651 :rule factoring :premises (@p6650))
(step @p6652 :rule chain_resolution :premises (@p6651 @p2661 @p6395 @p2235 @p3200) :args (@t765 (@list @t751 @t673 @t668 @t790)))
(step @p6653 :rule factoring :premises (@p6652))
(step @p6654 :rule chain_resolution :premises (@p3201 @p6653) :args (@t155 (@list @t690)))
(assume-push @p10267 @t703)
(assume-push @p10268 @t713)
(assume-push @p10269 @t721)
(assume-push @p10270 @t770)
(assume-push @p10271 @t727)
(assume-push @p10272 @t776)
(assume-push @p10273 @t733)
(assume-push @p10274 @t782)
(assume-push @p10275 @t739)
(assume-push @p10276 @t788)
(assume-push @p10277 @t745)
(assume-push @p10278 @t794)
(assume-push @p10279 @t747)
(assume-push @p10280 @t747)
(assume-push @p10281 @t745)
(assume-push @p10282 @t739)
(assume-push @p10283 @t733)
(assume-push @p10284 @t727)
(assume-push @p10285 @t721)
(assume-push @p10286 @t703)
(assume-push @p10287 @t713)
(assume-push @p10288 @t770)
(assume-push @p10289 @t776)
(assume-push @p10290 @t782)
(assume-push @p10291 @t788)
(assume-push @p10292 @t794)
(step @p6681 :rule symm :premises (@p10279))
(step @p6682 :rule symm :premises (@p10277))
(step @p6683 :rule symm :premises (@p6682))
(step @p6684 :rule symm :premises (@p10275))
(step @p6685 :rule symm :premises (@p6684))
(step @p6686 :rule symm :premises (@p10273))
(step @p6687 :rule symm :premises (@p6686))
(step @p6688 :rule symm :premises (@p10271))
(step @p6689 :rule symm :premises (@p6688))
(step @p6690 :rule symm :premises (@p10269))
(step @p6691 :rule symm :premises (@p6690))
(step @p6692 :rule symm :premises (@p10267))
(step @p6693 :rule symm :premises (@p6692))
(step @p6694 :rule symm :premises (@p10268))
(step @p6695 :rule symm :premises (@p10270))
(step @p6696 :rule symm :premises (@p10272))
(step @p6697 :rule symm :premises (@p10274))
(step @p6698 :rule symm :premises (@p10276))
(step @p6699 :rule symm :premises (@p10278))
(step @p6700 :rule trans :premises (@p6699 @p6698 @p6697 @p6696 @p6695 @p6694 @p6693 @p6691 @p6689 @p6687 @p6685 @p6683 @p6681))
(step @p6701 :rule cong :premises (@p1104 @p6700) :args (=))
(step @p6702 :rule trans :premises (@p6701 @p1545))
(step @p6703 :rule false_elim :premises (@p6702))
(step-pop @p10292 :rule scope :premises (@p6703))
(step-pop @p10293 :rule scope :premises (@p10292))
(step-pop @p10294 :rule scope :premises (@p10293))
(step-pop @p10295 :rule scope :premises (@p10294))
(step-pop @p10296 :rule scope :premises (@p10295))
(step-pop @p10297 :rule scope :premises (@p10296))
(step-pop @p10298 :rule scope :premises (@p10297))
(step-pop @p10299 :rule scope :premises (@p10298))
(step-pop @p10300 :rule scope :premises (@p10299))
(step-pop @p10301 :rule scope :premises (@p10300))
(step-pop @p10302 :rule scope :premises (@p10301))
(step-pop @p10303 :rule scope :premises (@p10302))
(step-pop @p10304 :rule scope :premises (@p10303))
(step @p6704 :rule process_scope :premises (@p10304) :args (@t797))
(step @p6718 :rule and_intro :premises (@p10279 @p10277 @p10275 @p10273 @p10271 @p10269 @p10267 @p10268 @p10270 @p10272 @p10274 @p10276 @p10278))
(step @p6719 :rule modus_ponens :premises (@p6718 @p6704))
(step-pop @p10305 :rule scope :premises (@p6719))
(step-pop @p10306 :rule scope :premises (@p10305))
(step-pop @p10307 :rule scope :premises (@p10306))
(step-pop @p10308 :rule scope :premises (@p10307))
(step-pop @p10309 :rule scope :premises (@p10308))
(step-pop @p10310 :rule scope :premises (@p10309))
(step-pop @p10311 :rule scope :premises (@p10310))
(step-pop @p10312 :rule scope :premises (@p10311))
(step-pop @p10313 :rule scope :premises (@p10312))
(step-pop @p10314 :rule scope :premises (@p10313))
(step-pop @p10315 :rule scope :premises (@p10314))
(step-pop @p10316 :rule scope :premises (@p10315))
(step-pop @p10317 :rule scope :premises (@p10316))
(step @p6720 :rule process_scope :premises (@p10317) :args (@t797))
(step @p6734 :rule implies_elim :premises (@p6720))
(step @p6735 :rule cnf_and_neg :args (@t856))
(step @p6736 :rule resolution :premises (@p6735 @p6734) :args (true @t856))
(assume-push @p10319 @t703)
(assume-push @p10320 @t713)
(assume-push @p10321 @t721)
(assume-push @p10322 @t770)
(assume-push @p10323 @t727)
(assume-push @p10324 @t776)
(assume-push @p10325 @t733)
(assume-push @p10326 @t782)
(assume-push @p10327 @t739)
(assume-push @p10328 @t788)
(assume-push @p10329 @t745)
(assume-push @p10330 @t794)
(assume-push @p10331 @t747)
(assume-push @p10332 @t799)
(assume-push @p10333 @t747)
(assume-push @p10334 @t745)
(assume-push @p10335 @t739)
(assume-push @p10336 @t733)
(assume-push @p10337 @t727)
(assume-push @p10338 @t721)
(assume-push @p10339 @t703)
(assume-push @p10340 @t713)
(assume-push @p10341 @t770)
(assume-push @p10342 @t776)
(assume-push @p10343 @t782)
(assume-push @p10344 @t788)
(assume-push @p10345 @t794)
(assume-push @p10346 @t799)
(step @p6765 :rule symm :premises (@p10331))
(step @p6766 :rule symm :premises (@p10329))
(step @p6767 :rule symm :premises (@p6766))
(step @p6768 :rule symm :premises (@p10327))
(step @p6769 :rule symm :premises (@p6768))
(step @p6770 :rule symm :premises (@p10325))
(step @p6771 :rule symm :premises (@p6770))
(step @p6772 :rule symm :premises (@p10323))
(step @p6773 :rule symm :premises (@p6772))
(step @p6774 :rule symm :premises (@p10321))
(step @p6775 :rule symm :premises (@p6774))
(step @p6776 :rule symm :premises (@p10319))
(step @p6777 :rule symm :premises (@p6776))
(step @p6778 :rule symm :premises (@p10320))
(step @p6779 :rule symm :premises (@p10322))
(step @p6780 :rule symm :premises (@p10324))
(step @p6781 :rule symm :premises (@p10326))
(step @p6782 :rule symm :premises (@p10328))
(step @p6783 :rule symm :premises (@p10330))
(step @p6784 :rule symm :premises (@p10332))
(step @p6785 :rule trans :premises (@p6784 @p6783 @p6782 @p6781 @p6780 @p6779 @p6778 @p6777 @p6775 @p6773 @p6771 @p6769 @p6767 @p6765))
(step @p6786 :rule cong :premises (@p1100 @p6785) :args (=))
(step @p6787 :rule trans :premises (@p6786 @p1572))
(step @p6788 :rule false_elim :premises (@p6787))
(step-pop @p10346 :rule scope :premises (@p6788))
(step-pop @p10347 :rule scope :premises (@p10346))
(step-pop @p10348 :rule scope :premises (@p10347))
(step-pop @p10349 :rule scope :premises (@p10348))
(step-pop @p10350 :rule scope :premises (@p10349))
(step-pop @p10351 :rule scope :premises (@p10350))
(step-pop @p10352 :rule scope :premises (@p10351))
(step-pop @p10353 :rule scope :premises (@p10352))
(step-pop @p10354 :rule scope :premises (@p10353))
(step-pop @p10355 :rule scope :premises (@p10354))
(step-pop @p10356 :rule scope :premises (@p10355))
(step-pop @p10357 :rule scope :premises (@p10356))
(step-pop @p10358 :rule scope :premises (@p10357))
(step-pop @p10359 :rule scope :premises (@p10358))
(step @p6789 :rule process_scope :premises (@p10359) :args (@t801))
(step @p6804 :rule and_intro :premises (@p10331 @p10329 @p10327 @p10325 @p10323 @p10321 @p10319 @p10320 @p10322 @p10324 @p10326 @p10328 @p10330 @p10332))
(step @p6805 :rule modus_ponens :premises (@p6804 @p6789))
(step-pop @p10360 :rule scope :premises (@p6805))
(step-pop @p10361 :rule scope :premises (@p10360))
(step-pop @p10362 :rule scope :premises (@p10361))
(step-pop @p10363 :rule scope :premises (@p10362))
(step-pop @p10364 :rule scope :premises (@p10363))
(step-pop @p10365 :rule scope :premises (@p10364))
(step-pop @p10366 :rule scope :premises (@p10365))
(step-pop @p10367 :rule scope :premises (@p10366))
(step-pop @p10368 :rule scope :premises (@p10367))
(step-pop @p10369 :rule scope :premises (@p10368))
(step-pop @p10370 :rule scope :premises (@p10369))
(step-pop @p10371 :rule scope :premises (@p10370))
(step-pop @p10372 :rule scope :premises (@p10371))
(step-pop @p10373 :rule scope :premises (@p10372))
(step @p6806 :rule process_scope :premises (@p10373) :args (@t801))
(step @p6821 :rule implies_elim :premises (@p6806))
(step @p6822 :rule cnf_and_neg :args (@t857))
(step @p6823 :rule resolution :premises (@p6822 @p6821) :args (true @t857))
(assume-push @p10375 @t703)
(assume-push @p10376 @t713)
(assume-push @p10377 @t721)
(assume-push @p10378 @t770)
(assume-push @p10379 @t727)
(assume-push @p10380 @t776)
(assume-push @p10381 @t733)
(assume-push @p10382 @t782)
(assume-push @p10383 @t739)
(assume-push @p10384 @t788)
(assume-push @p10385 @t745)
(assume-push @p10386 @t794)
(assume-push @p10387 @t747)
(assume-push @p10388 @t799)
(assume-push @p10389 @t747)
(assume-push @p10390 @t745)
(assume-push @p10391 @t739)
(assume-push @p10392 @t733)
(assume-push @p10393 @t727)
(assume-push @p10394 @t721)
(assume-push @p10395 @t703)
(assume-push @p10396 @t713)
(assume-push @p10397 @t770)
(assume-push @p10398 @t776)
(assume-push @p10399 @t782)
(assume-push @p10400 @t788)
(assume-push @p10401 @t794)
(assume-push @p10402 @t799)
(step @p6852 :rule symm :premises (@p10387))
(step @p6853 :rule symm :premises (@p10385))
(step @p6854 :rule symm :premises (@p6853))
(step @p6855 :rule symm :premises (@p10383))
(step @p6856 :rule symm :premises (@p6855))
(step @p6857 :rule symm :premises (@p10381))
(step @p6858 :rule symm :premises (@p6857))
(step @p6859 :rule symm :premises (@p10379))
(step @p6860 :rule symm :premises (@p6859))
(step @p6861 :rule symm :premises (@p10377))
(step @p6862 :rule symm :premises (@p6861))
(step @p6863 :rule symm :premises (@p10375))
(step @p6864 :rule symm :premises (@p6863))
(step @p6865 :rule symm :premises (@p10376))
(step @p6866 :rule symm :premises (@p10378))
(step @p6867 :rule symm :premises (@p10380))
(step @p6868 :rule symm :premises (@p10382))
(step @p6869 :rule symm :premises (@p10384))
(step @p6870 :rule symm :premises (@p10386))
(step @p6871 :rule symm :premises (@p10388))
(step @p6872 :rule trans :premises (@p6871 @p6870 @p6869 @p6868 @p6867 @p6866 @p6865 @p6864 @p6862 @p6860 @p6858 @p6856 @p6854 @p6852))
(step @p6873 :rule cong :premises (@p1101 @p6872) :args (=))
(step @p6874 :rule trans :premises (@p6873 @p1557))
(step @p6875 :rule false_elim :premises (@p6874))
(step-pop @p10402 :rule scope :premises (@p6875))
(step-pop @p10403 :rule scope :premises (@p10402))
(step-pop @p10404 :rule scope :premises (@p10403))
(step-pop @p10405 :rule scope :premises (@p10404))
(step-pop @p10406 :rule scope :premises (@p10405))
(step-pop @p10407 :rule scope :premises (@p10406))
(step-pop @p10408 :rule scope :premises (@p10407))
(step-pop @p10409 :rule scope :premises (@p10408))
(step-pop @p10410 :rule scope :premises (@p10409))
(step-pop @p10411 :rule scope :premises (@p10410))
(step-pop @p10412 :rule scope :premises (@p10411))
(step-pop @p10413 :rule scope :premises (@p10412))
(step-pop @p10414 :rule scope :premises (@p10413))
(step-pop @p10415 :rule scope :premises (@p10414))
(step @p6876 :rule process_scope :premises (@p10415) :args (@t803))
(step @p6891 :rule and_intro :premises (@p10387 @p10385 @p10383 @p10381 @p10379 @p10377 @p10375 @p10376 @p10378 @p10380 @p10382 @p10384 @p10386 @p10388))
(step @p6892 :rule modus_ponens :premises (@p6891 @p6876))
(step-pop @p10416 :rule scope :premises (@p6892))
(step-pop @p10417 :rule scope :premises (@p10416))
(step-pop @p10418 :rule scope :premises (@p10417))
(step-pop @p10419 :rule scope :premises (@p10418))
(step-pop @p10420 :rule scope :premises (@p10419))
(step-pop @p10421 :rule scope :premises (@p10420))
(step-pop @p10422 :rule scope :premises (@p10421))
(step-pop @p10423 :rule scope :premises (@p10422))
(step-pop @p10424 :rule scope :premises (@p10423))
(step-pop @p10425 :rule scope :premises (@p10424))
(step-pop @p10426 :rule scope :premises (@p10425))
(step-pop @p10427 :rule scope :premises (@p10426))
(step-pop @p10428 :rule scope :premises (@p10427))
(step-pop @p10429 :rule scope :premises (@p10428))
(step @p6893 :rule process_scope :premises (@p10429) :args (@t803))
(step @p6908 :rule implies_elim :premises (@p6893))
(step @p6909 :rule resolution :premises (@p6822 @p6908) :args (true @t857))
(step @p6910 :rule chain_resolution :premises (@p2254 @p3387 @p6909 @p6654 @p6363 @p6047 @p5702 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261 @p6823 @p6654 @p6363 @p6047 @p5702 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args ((@list false true false false false false false false false false false false false false true false false false false false false false false false false false false) (@list @t686 @t710 @t794 @t745 @t788 @t739 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703 @t709 @t794 @t745 @t788 @t739 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p6911 :rule factoring :premises (@p6910))
(step @p6912 :rule chain_resolution :premises (@p6911 @p3273 @p3272 @p6736 @p6654 @p6363 @p6047 @p5702 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args ((@list false true true false false false false false false false false false false false false) (@list @t799 @t688 @t796 @t794 @t745 @t788 @t739 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p6913 :rule factoring :premises (@p6912))
(step @p6914 :rule chain_resolution :premises (@p2660 @p6913) :args (@t155 (@list @t747)))
(step @p6915 :rule chain_resolution :premises (@p2661 @p6914) :args (@t155 (@list @t673)))
(step @p6916 :rule refl :args (@t800))
(step @p6917 :rule refl :args (@t758))
(step @p6918 :rule nary_cong :premises (@p6917 @p6916 @p2288) :args (or))
(assume-push @p10431 @t688)
(assume-push @p10432 @t671)
(assume-push @p10433 @t716)
; trust TRUST_THEORY_REWRITE
(step @p2295 :rule trust :premises () :args (@t718))
(step @p6922 :rule symm :premises (@p10431))
(step @p6923 :rule symm :premises (@p6922))
(step @p6924 :rule symm :premises (@p10432))
(step @p6925 :rule trans :premises (@p6924 @p6923))
(step @p6926 :rule true_intro :premises (@p6925))
(step @p6927 :rule false_intro :premises (@p10433))
(step @p6928 :rule symm :premises (@p6927))
(step @p6929 :rule trans :premises (@p6928 @p6926))
(step @p6930 false :rule eq_resolve :premises (@p6929 @p2295))
(step-pop @p10433 :rule scope :premises (@p6930))
(step-pop @p10434 :rule scope :premises (@p10433))
(step-pop @p10435 :rule scope :premises (@p10434))
(step @p6931 :rule process_scope :premises (@p10435) :args (false))
(assume-push @p10437 @t671)
(assume-push @p10438 @t688)
(assume-push @p10439 @t716)
(step @p6938 :rule and_intro :premises (@p10438 @p10437 @p10439))
(step-pop @p10439 :rule scope :premises (@p6938))
(step-pop @p10440 :rule scope :premises (@p10439))
(step-pop @p10441 :rule scope :premises (@p10440))
(step @p6939 :rule process_scope :premises (@p10441) :args (@t858))
(step @p6943 :rule implies_elim :premises (@p6939))
(step @p6944 :rule resolution :premises (@p6943 @p6931) :args (true @t858))
(step @p6945 :rule not_and :premises (@p6944))
(step @p6946 :rule eq_resolve :premises (@p6945 @p6918))
(step @p6947 :rule reordering :premises (@p6946) :args ((or @t668 @t800 @t758)))
(assume-push @p10443 @t703)
(assume-push @p10444 @t713)
(assume-push @p10445 @t721)
(assume-push @p10446 @t770)
(assume-push @p10447 @t727)
(assume-push @p10448 @t776)
(assume-push @p10449 @t733)
(assume-push @p10450 @t782)
(assume-push @p10451 @t739)
(assume-push @p10452 @t788)
(assume-push @p10453 @t745)
(assume-push @p10454 @t794)
(assume-push @p10455 @t751)
(assume-push @p10456 @t796)
(assume-push @p10457 @t757)
(assume-push @p10458 @t796)
(assume-push @p10459 @t794)
(assume-push @p10460 @t788)
(assume-push @p10461 @t782)
(assume-push @p10462 @t776)
(assume-push @p10463 @t770)
(assume-push @p10464 @t713)
(assume-push @p10465 @t703)
(assume-push @p10466 @t721)
(assume-push @p10467 @t727)
(assume-push @p10468 @t733)
(assume-push @p10469 @t739)
(assume-push @p10470 @t745)
(assume-push @p10471 @t751)
(assume-push @p10472 @t757)
(step @p6978 :rule symm :premises (@p10456))
(step @p6979 :rule symm :premises (@p10454))
(step @p6980 :rule symm :premises (@p6979))
(step @p6981 :rule symm :premises (@p10452))
(step @p6982 :rule symm :premises (@p6981))
(step @p6983 :rule symm :premises (@p10450))
(step @p6984 :rule symm :premises (@p6983))
(step @p6985 :rule symm :premises (@p10448))
(step @p6986 :rule symm :premises (@p6985))
(step @p6987 :rule symm :premises (@p10446))
(step @p6988 :rule symm :premises (@p6987))
(step @p6989 :rule symm :premises (@p10444))
(step @p6990 :rule symm :premises (@p6989))
(step @p6991 :rule symm :premises (@p10443))
(step @p6992 :rule symm :premises (@p10445))
(step @p6993 :rule symm :premises (@p10447))
(step @p6994 :rule symm :premises (@p10449))
(step @p6995 :rule symm :premises (@p10451))
(step @p6996 :rule symm :premises (@p10453))
(step @p6997 :rule symm :premises (@p10455))
(step @p6998 :rule symm :premises (@p10457))
(step @p6999 :rule trans :premises (@p6998 @p6997 @p6996 @p6995 @p6994 @p6993 @p6992 @p6991 @p6990 @p6988 @p6986 @p6984 @p6982 @p6980 @p6978))
(step @p7000 :rule cong :premises (@p1100 @p6999) :args (=))
(step @p7001 :rule trans :premises (@p7000 @p1443))
(step @p7002 :rule false_elim :premises (@p7001))
(step-pop @p10472 :rule scope :premises (@p7002))
(step-pop @p10473 :rule scope :premises (@p10472))
(step-pop @p10474 :rule scope :premises (@p10473))
(step-pop @p10475 :rule scope :premises (@p10474))
(step-pop @p10476 :rule scope :premises (@p10475))
(step-pop @p10477 :rule scope :premises (@p10476))
(step-pop @p10478 :rule scope :premises (@p10477))
(step-pop @p10479 :rule scope :premises (@p10478))
(step-pop @p10480 :rule scope :premises (@p10479))
(step-pop @p10481 :rule scope :premises (@p10480))
(step-pop @p10482 :rule scope :premises (@p10481))
(step-pop @p10483 :rule scope :premises (@p10482))
(step-pop @p10484 :rule scope :premises (@p10483))
(step-pop @p10485 :rule scope :premises (@p10484))
(step-pop @p10486 :rule scope :premises (@p10485))
(step @p7003 :rule process_scope :premises (@p10486) :args (@t760))
(step @p7019 :rule and_intro :premises (@p10456 @p10454 @p10452 @p10450 @p10448 @p10446 @p10444 @p10443 @p10445 @p10447 @p10449 @p10451 @p10453 @p10455 @p10457))
(step @p7020 :rule modus_ponens :premises (@p7019 @p7003))
(step-pop @p10487 :rule scope :premises (@p7020))
(step-pop @p10488 :rule scope :premises (@p10487))
(step-pop @p10489 :rule scope :premises (@p10488))
(step-pop @p10490 :rule scope :premises (@p10489))
(step-pop @p10491 :rule scope :premises (@p10490))
(step-pop @p10492 :rule scope :premises (@p10491))
(step-pop @p10493 :rule scope :premises (@p10492))
(step-pop @p10494 :rule scope :premises (@p10493))
(step-pop @p10495 :rule scope :premises (@p10494))
(step-pop @p10496 :rule scope :premises (@p10495))
(step-pop @p10497 :rule scope :premises (@p10496))
(step-pop @p10498 :rule scope :premises (@p10497))
(step-pop @p10499 :rule scope :premises (@p10498))
(step-pop @p10500 :rule scope :premises (@p10499))
(step-pop @p10501 :rule scope :premises (@p10500))
(step @p7021 :rule process_scope :premises (@p10501) :args (@t760))
(step @p7037 :rule implies_elim :premises (@p7021))
(step @p7038 :rule cnf_and_neg :args (@t859))
(step @p7039 :rule resolution :premises (@p7038 @p7037) :args (true @t859))
(assume-push @p10503 @t703)
(assume-push @p10504 @t713)
(assume-push @p10505 @t721)
(assume-push @p10506 @t770)
(assume-push @p10507 @t727)
(assume-push @p10508 @t776)
(assume-push @p10509 @t733)
(assume-push @p10510 @t782)
(assume-push @p10511 @t739)
(assume-push @p10512 @t788)
(assume-push @p10513 @t745)
(assume-push @p10514 @t794)
(assume-push @p10515 @t751)
(assume-push @p10516 @t796)
(assume-push @p10517 @t757)
(assume-push @p10518 @t796)
(assume-push @p10519 @t794)
(assume-push @p10520 @t788)
(assume-push @p10521 @t782)
(assume-push @p10522 @t776)
(assume-push @p10523 @t770)
(assume-push @p10524 @t713)
(assume-push @p10525 @t703)
(assume-push @p10526 @t721)
(assume-push @p10527 @t727)
(assume-push @p10528 @t733)
(assume-push @p10529 @t739)
(assume-push @p10530 @t745)
(assume-push @p10531 @t751)
(assume-push @p10532 @t757)
(step @p7070 :rule symm :premises (@p10516))
(step @p7071 :rule symm :premises (@p10514))
(step @p7072 :rule symm :premises (@p7071))
(step @p7073 :rule symm :premises (@p10512))
(step @p7074 :rule symm :premises (@p7073))
(step @p7075 :rule symm :premises (@p10510))
(step @p7076 :rule symm :premises (@p7075))
(step @p7077 :rule symm :premises (@p10508))
(step @p7078 :rule symm :premises (@p7077))
(step @p7079 :rule symm :premises (@p10506))
(step @p7080 :rule symm :premises (@p7079))
(step @p7081 :rule symm :premises (@p10504))
(step @p7082 :rule symm :premises (@p7081))
(step @p7083 :rule symm :premises (@p10503))
(step @p7084 :rule symm :premises (@p10505))
(step @p7085 :rule symm :premises (@p10507))
(step @p7086 :rule symm :premises (@p10509))
(step @p7087 :rule symm :premises (@p10511))
(step @p7088 :rule symm :premises (@p10513))
(step @p7089 :rule symm :premises (@p10515))
(step @p7090 :rule symm :premises (@p10517))
(step @p7091 :rule trans :premises (@p7090 @p7089 @p7088 @p7087 @p7086 @p7085 @p7084 @p7083 @p7082 @p7080 @p7078 @p7076 @p7074 @p7072 @p7070))
(step @p7092 :rule cong :premises (@p1101 @p7091) :args (=))
(step @p7093 :rule trans :premises (@p7092 @p1423))
(step @p7094 :rule false_elim :premises (@p7093))
(step-pop @p10532 :rule scope :premises (@p7094))
(step-pop @p10533 :rule scope :premises (@p10532))
(step-pop @p10534 :rule scope :premises (@p10533))
(step-pop @p10535 :rule scope :premises (@p10534))
(step-pop @p10536 :rule scope :premises (@p10535))
(step-pop @p10537 :rule scope :premises (@p10536))
(step-pop @p10538 :rule scope :premises (@p10537))
(step-pop @p10539 :rule scope :premises (@p10538))
(step-pop @p10540 :rule scope :premises (@p10539))
(step-pop @p10541 :rule scope :premises (@p10540))
(step-pop @p10542 :rule scope :premises (@p10541))
(step-pop @p10543 :rule scope :premises (@p10542))
(step-pop @p10544 :rule scope :premises (@p10543))
(step-pop @p10545 :rule scope :premises (@p10544))
(step-pop @p10546 :rule scope :premises (@p10545))
(step @p7095 :rule process_scope :premises (@p10546) :args (@t763))
(step @p7111 :rule and_intro :premises (@p10516 @p10514 @p10512 @p10510 @p10508 @p10506 @p10504 @p10503 @p10505 @p10507 @p10509 @p10511 @p10513 @p10515 @p10517))
(step @p7112 :rule modus_ponens :premises (@p7111 @p7095))
(step-pop @p10547 :rule scope :premises (@p7112))
(step-pop @p10548 :rule scope :premises (@p10547))
(step-pop @p10549 :rule scope :premises (@p10548))
(step-pop @p10550 :rule scope :premises (@p10549))
(step-pop @p10551 :rule scope :premises (@p10550))
(step-pop @p10552 :rule scope :premises (@p10551))
(step-pop @p10553 :rule scope :premises (@p10552))
(step-pop @p10554 :rule scope :premises (@p10553))
(step-pop @p10555 :rule scope :premises (@p10554))
(step-pop @p10556 :rule scope :premises (@p10555))
(step-pop @p10557 :rule scope :premises (@p10556))
(step-pop @p10558 :rule scope :premises (@p10557))
(step-pop @p10559 :rule scope :premises (@p10558))
(step-pop @p10560 :rule scope :premises (@p10559))
(step-pop @p10561 :rule scope :premises (@p10560))
(step @p7113 :rule process_scope :premises (@p10561) :args (@t763))
(step @p7129 :rule implies_elim :premises (@p7113))
(step @p7130 :rule resolution :premises (@p7038 @p7129) :args (true @t859))
(step @p7131 :rule chain_resolution :premises (@p2863 @p2861 @p7130 @p6915 @p6654 @p6363 @p6047 @p5702 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261 @p7039 @p6915 @p6654 @p6363 @p6047 @p5702 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args ((@list false true false false false false false false false false false false false false false true false false false false false false false false false false false false false) (@list @t669 @t762 @t751 @t794 @t745 @t788 @t739 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703 @t759 @t751 @t794 @t745 @t788 @t739 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p7132 :rule factoring :premises (@p7131))
(step @p7133 :rule chain_resolution :premises (@p7132 @p2739 @p6947 @p2235 @p3272) :args (@t765 (@list @t757 @t671 @t668 @t796)))
(step @p7134 :rule factoring :premises (@p7133))
(step @p7135 :rule chain_resolution :premises (@p3273 @p7134) :args (@t155 (@list @t688)))
(assume-push @p10563 @t703)
(assume-push @p10564 @t713)
(assume-push @p10565 @t721)
(assume-push @p10566 @t770)
(assume-push @p10567 @t727)
(assume-push @p10568 @t776)
(assume-push @p10569 @t733)
(assume-push @p10570 @t782)
(assume-push @p10571 @t739)
(assume-push @p10572 @t788)
(assume-push @p10573 @t745)
(assume-push @p10574 @t794)
(assume-push @p10575 @t751)
(assume-push @p10576 @t799)
(assume-push @p10577 @t753)
(assume-push @p10578 @t753)
(assume-push @p10579 @t751)
(assume-push @p10580 @t745)
(assume-push @p10581 @t739)
(assume-push @p10582 @t733)
(assume-push @p10583 @t727)
(assume-push @p10584 @t721)
(assume-push @p10585 @t703)
(assume-push @p10586 @t713)
(assume-push @p10587 @t770)
(assume-push @p10588 @t776)
(assume-push @p10589 @t782)
(assume-push @p10590 @t788)
(assume-push @p10591 @t794)
(assume-push @p10592 @t799)
(step @p7166 :rule symm :premises (@p10577))
(step @p7167 :rule symm :premises (@p10575))
(step @p7168 :rule symm :premises (@p7167))
(step @p7169 :rule symm :premises (@p10573))
(step @p7170 :rule symm :premises (@p7169))
(step @p7171 :rule symm :premises (@p10571))
(step @p7172 :rule symm :premises (@p7171))
(step @p7173 :rule symm :premises (@p10569))
(step @p7174 :rule symm :premises (@p7173))
(step @p7175 :rule symm :premises (@p10567))
(step @p7176 :rule symm :premises (@p7175))
(step @p7177 :rule symm :premises (@p10565))
(step @p7178 :rule symm :premises (@p7177))
(step @p7179 :rule symm :premises (@p10563))
(step @p7180 :rule symm :premises (@p7179))
(step @p7181 :rule symm :premises (@p10564))
(step @p7182 :rule symm :premises (@p10566))
(step @p7183 :rule symm :premises (@p10568))
(step @p7184 :rule symm :premises (@p10570))
(step @p7185 :rule symm :premises (@p10572))
(step @p7186 :rule symm :premises (@p10574))
(step @p7187 :rule symm :premises (@p10576))
(step @p7188 :rule trans :premises (@p7187 @p7186 @p7185 @p7184 @p7183 @p7182 @p7181 @p7180 @p7178 @p7176 @p7174 @p7172 @p7170 @p7168 @p7166))
(step @p7189 :rule cong :premises (@p1100 @p7188) :args (=))
(step @p7190 :rule trans :premises (@p7189 @p1443))
(step @p7191 :rule false_elim :premises (@p7190))
(step-pop @p10592 :rule scope :premises (@p7191))
(step-pop @p10593 :rule scope :premises (@p10592))
(step-pop @p10594 :rule scope :premises (@p10593))
(step-pop @p10595 :rule scope :premises (@p10594))
(step-pop @p10596 :rule scope :premises (@p10595))
(step-pop @p10597 :rule scope :premises (@p10596))
(step-pop @p10598 :rule scope :premises (@p10597))
(step-pop @p10599 :rule scope :premises (@p10598))
(step-pop @p10600 :rule scope :premises (@p10599))
(step-pop @p10601 :rule scope :premises (@p10600))
(step-pop @p10602 :rule scope :premises (@p10601))
(step-pop @p10603 :rule scope :premises (@p10602))
(step-pop @p10604 :rule scope :premises (@p10603))
(step-pop @p10605 :rule scope :premises (@p10604))
(step-pop @p10606 :rule scope :premises (@p10605))
(step @p7192 :rule process_scope :premises (@p10606) :args (@t801))
(step @p7208 :rule and_intro :premises (@p10577 @p10575 @p10573 @p10571 @p10569 @p10567 @p10565 @p10563 @p10564 @p10566 @p10568 @p10570 @p10572 @p10574 @p10576))
(step @p7209 :rule modus_ponens :premises (@p7208 @p7192))
(step-pop @p10607 :rule scope :premises (@p7209))
(step-pop @p10608 :rule scope :premises (@p10607))
(step-pop @p10609 :rule scope :premises (@p10608))
(step-pop @p10610 :rule scope :premises (@p10609))
(step-pop @p10611 :rule scope :premises (@p10610))
(step-pop @p10612 :rule scope :premises (@p10611))
(step-pop @p10613 :rule scope :premises (@p10612))
(step-pop @p10614 :rule scope :premises (@p10613))
(step-pop @p10615 :rule scope :premises (@p10614))
(step-pop @p10616 :rule scope :premises (@p10615))
(step-pop @p10617 :rule scope :premises (@p10616))
(step-pop @p10618 :rule scope :premises (@p10617))
(step-pop @p10619 :rule scope :premises (@p10618))
(step-pop @p10620 :rule scope :premises (@p10619))
(step-pop @p10621 :rule scope :premises (@p10620))
(step @p7210 :rule process_scope :premises (@p10621) :args (@t801))
(step @p7226 :rule implies_elim :premises (@p7210))
(step @p7227 :rule cnf_and_neg :args (@t860))
(step @p7228 :rule resolution :premises (@p7227 @p7226) :args (true @t860))
(assume-push @p10623 @t703)
(assume-push @p10624 @t713)
(assume-push @p10625 @t721)
(assume-push @p10626 @t770)
(assume-push @p10627 @t727)
(assume-push @p10628 @t776)
(assume-push @p10629 @t733)
(assume-push @p10630 @t782)
(assume-push @p10631 @t739)
(assume-push @p10632 @t788)
(assume-push @p10633 @t745)
(assume-push @p10634 @t794)
(assume-push @p10635 @t751)
(assume-push @p10636 @t799)
(assume-push @p10637 @t753)
(assume-push @p10638 @t753)
(assume-push @p10639 @t751)
(assume-push @p10640 @t745)
(assume-push @p10641 @t739)
(assume-push @p10642 @t733)
(assume-push @p10643 @t727)
(assume-push @p10644 @t721)
(assume-push @p10645 @t703)
(assume-push @p10646 @t713)
(assume-push @p10647 @t770)
(assume-push @p10648 @t776)
(assume-push @p10649 @t782)
(assume-push @p10650 @t788)
(assume-push @p10651 @t794)
(assume-push @p10652 @t799)
(step @p7259 :rule symm :premises (@p10637))
(step @p7260 :rule symm :premises (@p10635))
(step @p7261 :rule symm :premises (@p7260))
(step @p7262 :rule symm :premises (@p10633))
(step @p7263 :rule symm :premises (@p7262))
(step @p7264 :rule symm :premises (@p10631))
(step @p7265 :rule symm :premises (@p7264))
(step @p7266 :rule symm :premises (@p10629))
(step @p7267 :rule symm :premises (@p7266))
(step @p7268 :rule symm :premises (@p10627))
(step @p7269 :rule symm :premises (@p7268))
(step @p7270 :rule symm :premises (@p10625))
(step @p7271 :rule symm :premises (@p7270))
(step @p7272 :rule symm :premises (@p10623))
(step @p7273 :rule symm :premises (@p7272))
(step @p7274 :rule symm :premises (@p10624))
(step @p7275 :rule symm :premises (@p10626))
(step @p7276 :rule symm :premises (@p10628))
(step @p7277 :rule symm :premises (@p10630))
(step @p7278 :rule symm :premises (@p10632))
(step @p7279 :rule symm :premises (@p10634))
(step @p7280 :rule symm :premises (@p10636))
(step @p7281 :rule trans :premises (@p7280 @p7279 @p7278 @p7277 @p7276 @p7275 @p7274 @p7273 @p7271 @p7269 @p7267 @p7265 @p7263 @p7261 @p7259))
(step @p7282 :rule cong :premises (@p1101 @p7281) :args (=))
(step @p7283 :rule trans :premises (@p7282 @p1423))
(step @p7284 :rule false_elim :premises (@p7283))
(step-pop @p10652 :rule scope :premises (@p7284))
(step-pop @p10653 :rule scope :premises (@p10652))
(step-pop @p10654 :rule scope :premises (@p10653))
(step-pop @p10655 :rule scope :premises (@p10654))
(step-pop @p10656 :rule scope :premises (@p10655))
(step-pop @p10657 :rule scope :premises (@p10656))
(step-pop @p10658 :rule scope :premises (@p10657))
(step-pop @p10659 :rule scope :premises (@p10658))
(step-pop @p10660 :rule scope :premises (@p10659))
(step-pop @p10661 :rule scope :premises (@p10660))
(step-pop @p10662 :rule scope :premises (@p10661))
(step-pop @p10663 :rule scope :premises (@p10662))
(step-pop @p10664 :rule scope :premises (@p10663))
(step-pop @p10665 :rule scope :premises (@p10664))
(step-pop @p10666 :rule scope :premises (@p10665))
(step @p7285 :rule process_scope :premises (@p10666) :args (@t803))
(step @p7301 :rule and_intro :premises (@p10637 @p10635 @p10633 @p10631 @p10629 @p10627 @p10625 @p10623 @p10624 @p10626 @p10628 @p10630 @p10632 @p10634 @p10636))
(step @p7302 :rule modus_ponens :premises (@p7301 @p7285))
(step-pop @p10667 :rule scope :premises (@p7302))
(step-pop @p10668 :rule scope :premises (@p10667))
(step-pop @p10669 :rule scope :premises (@p10668))
(step-pop @p10670 :rule scope :premises (@p10669))
(step-pop @p10671 :rule scope :premises (@p10670))
(step-pop @p10672 :rule scope :premises (@p10671))
(step-pop @p10673 :rule scope :premises (@p10672))
(step-pop @p10674 :rule scope :premises (@p10673))
(step-pop @p10675 :rule scope :premises (@p10674))
(step-pop @p10676 :rule scope :premises (@p10675))
(step-pop @p10677 :rule scope :premises (@p10676))
(step-pop @p10678 :rule scope :premises (@p10677))
(step-pop @p10679 :rule scope :premises (@p10678))
(step-pop @p10680 :rule scope :premises (@p10679))
(step-pop @p10681 :rule scope :premises (@p10680))
(step @p7303 :rule process_scope :premises (@p10681) :args (@t803))
(step @p7319 :rule implies_elim :premises (@p7303))
(step @p7320 :rule resolution :premises (@p7227 @p7319) :args (true @t860))
(step @p7321 :rule chain_resolution :premises (@p2254 @p3387 @p7320 @p7135 @p6915 @p6654 @p6363 @p6047 @p5702 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261 @p7228 @p7135 @p6915 @p6654 @p6363 @p6047 @p5702 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261) :args ((@list false true false false false false false false false false false false false false false false true false false false false false false false false false false false false false false) (@list @t686 @t710 @t799 @t751 @t794 @t745 @t788 @t739 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703 @t709 @t799 @t751 @t794 @t745 @t788 @t739 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703)))
(step @p7322 :rule factoring :premises (@p7321))
(step @p7323 :rule chain_resolution :premises (@p2738 @p7322) :args (@t155 (@list @t753)))
(step @p7324 :rule chain_resolution :premises (@p2739 @p7323) :args (@t155 (@list @t671)))
(assume-push @p10683 @t703)
(assume-push @p10684 @t713)
(assume-push @p10685 @t721)
(assume-push @p10686 @t770)
(assume-push @p10687 @t727)
(assume-push @p10688 @t776)
(assume-push @p10689 @t733)
(assume-push @p10690 @t782)
(assume-push @p10691 @t739)
(assume-push @p10692 @t788)
(assume-push @p10693 @t745)
(assume-push @p10694 @t794)
(assume-push @p10695 @t751)
(assume-push @p10696 @t799)
(assume-push @p10697 @t757)
(assume-push @p10698 @t710)
(assume-push @p10699 @t710)
(assume-push @p10700 @t799)
(assume-push @p10701 @t794)
(assume-push @p10702 @t788)
(assume-push @p10703 @t782)
(assume-push @p10704 @t776)
(assume-push @p10705 @t770)
(assume-push @p10706 @t713)
(assume-push @p10707 @t703)
(assume-push @p10708 @t721)
(assume-push @p10709 @t727)
(assume-push @p10710 @t733)
(assume-push @p10711 @t739)
(assume-push @p10712 @t745)
(assume-push @p10713 @t751)
(assume-push @p10714 @t757)
(step @p7357 :rule symm :premises (@p10698))
(step @p7358 :rule symm :premises (@p10696))
(step @p7359 :rule symm :premises (@p7358))
(step @p7360 :rule symm :premises (@p10694))
(step @p7361 :rule symm :premises (@p7360))
(step @p7362 :rule symm :premises (@p10692))
(step @p7363 :rule symm :premises (@p7362))
(step @p7364 :rule symm :premises (@p10690))
(step @p7365 :rule symm :premises (@p7364))
(step @p7366 :rule symm :premises (@p10688))
(step @p7367 :rule symm :premises (@p7366))
(step @p7368 :rule symm :premises (@p10686))
(step @p7369 :rule symm :premises (@p7368))
(step @p7370 :rule symm :premises (@p10684))
(step @p7371 :rule symm :premises (@p7370))
(step @p7372 :rule symm :premises (@p10683))
(step @p7373 :rule symm :premises (@p10685))
(step @p7374 :rule symm :premises (@p10687))
(step @p7375 :rule symm :premises (@p10689))
(step @p7376 :rule symm :premises (@p10691))
(step @p7377 :rule symm :premises (@p10693))
(step @p7378 :rule symm :premises (@p10695))
(step @p7379 :rule symm :premises (@p10697))
(step @p7380 :rule trans :premises (@p7379 @p7378 @p7377 @p7376 @p7375 @p7374 @p7373 @p7372 @p7371 @p7369 @p7367 @p7365 @p7363 @p7361 @p7359 @p7357))
(step @p7381 :rule cong :premises (@p1100 @p7380) :args (=))
(step @p7382 :rule trans :premises (@p7381 @p1312))
(step @p7383 :rule false_elim :premises (@p7382))
(step-pop @p10714 :rule scope :premises (@p7383))
(step-pop @p10715 :rule scope :premises (@p10714))
(step-pop @p10716 :rule scope :premises (@p10715))
(step-pop @p10717 :rule scope :premises (@p10716))
(step-pop @p10718 :rule scope :premises (@p10717))
(step-pop @p10719 :rule scope :premises (@p10718))
(step-pop @p10720 :rule scope :premises (@p10719))
(step-pop @p10721 :rule scope :premises (@p10720))
(step-pop @p10722 :rule scope :premises (@p10721))
(step-pop @p10723 :rule scope :premises (@p10722))
(step-pop @p10724 :rule scope :premises (@p10723))
(step-pop @p10725 :rule scope :premises (@p10724))
(step-pop @p10726 :rule scope :premises (@p10725))
(step-pop @p10727 :rule scope :premises (@p10726))
(step-pop @p10728 :rule scope :premises (@p10727))
(step-pop @p10729 :rule scope :premises (@p10728))
(step @p7384 :rule process_scope :premises (@p10729) :args (@t760))
(step @p7401 :rule and_intro :premises (@p10698 @p10696 @p10694 @p10692 @p10690 @p10688 @p10686 @p10684 @p10683 @p10685 @p10687 @p10689 @p10691 @p10693 @p10695 @p10697))
(step @p7402 :rule modus_ponens :premises (@p7401 @p7384))
(step-pop @p10730 :rule scope :premises (@p7402))
(step-pop @p10731 :rule scope :premises (@p10730))
(step-pop @p10732 :rule scope :premises (@p10731))
(step-pop @p10733 :rule scope :premises (@p10732))
(step-pop @p10734 :rule scope :premises (@p10733))
(step-pop @p10735 :rule scope :premises (@p10734))
(step-pop @p10736 :rule scope :premises (@p10735))
(step-pop @p10737 :rule scope :premises (@p10736))
(step-pop @p10738 :rule scope :premises (@p10737))
(step-pop @p10739 :rule scope :premises (@p10738))
(step-pop @p10740 :rule scope :premises (@p10739))
(step-pop @p10741 :rule scope :premises (@p10740))
(step-pop @p10742 :rule scope :premises (@p10741))
(step-pop @p10743 :rule scope :premises (@p10742))
(step-pop @p10744 :rule scope :premises (@p10743))
(step-pop @p10745 :rule scope :premises (@p10744))
(step @p7403 :rule process_scope :premises (@p10745) :args (@t760))
(step @p7420 :rule implies_elim :premises (@p7403))
(step @p7421 :rule cnf_and_neg :args (@t861))
(step @p7422 :rule resolution :premises (@p7421 @p7420) :args (true @t861))
(step @p7423 :rule refl :args (@t711))
(step @p7424 :rule refl :args (@t764))
(step @p7425 :rule nary_cong :premises (@p7424 @p7423 @p2288) :args (or))
(assume-push @p10747 @t686)
(assume-push @p10748 @t669)
(assume-push @p10749 @t716)
; trust TRUST_THEORY_REWRITE
(step @p2295 :rule trust :premises () :args (@t718))
(step @p7429 :rule symm :premises (@p10747))
(step @p7430 :rule symm :premises (@p7429))
(step @p7431 :rule symm :premises (@p10748))
(step @p7432 :rule trans :premises (@p7431 @p7430))
(step @p7433 :rule true_intro :premises (@p7432))
(step @p7434 :rule false_intro :premises (@p10749))
(step @p7435 :rule symm :premises (@p7434))
(step @p7436 :rule trans :premises (@p7435 @p7433))
(step @p7437 false :rule eq_resolve :premises (@p7436 @p2295))
(step-pop @p10749 :rule scope :premises (@p7437))
(step-pop @p10750 :rule scope :premises (@p10749))
(step-pop @p10751 :rule scope :premises (@p10750))
(step @p7438 :rule process_scope :premises (@p10751) :args (false))
(assume-push @p10753 @t669)
(assume-push @p10754 @t686)
(assume-push @p10755 @t716)
(step @p7445 :rule and_intro :premises (@p10754 @p10753 @p10755))
(step-pop @p10755 :rule scope :premises (@p7445))
(step-pop @p10756 :rule scope :premises (@p10755))
(step-pop @p10757 :rule scope :premises (@p10756))
(step @p7446 :rule process_scope :premises (@p10757) :args (@t862))
(step @p7450 :rule implies_elim :premises (@p7446))
(step @p7451 :rule resolution :premises (@p7450 @p7438) :args (true @t862))
(step @p7452 :rule not_and :premises (@p7451))
(step @p7453 :rule eq_resolve :premises (@p7452 @p7425))
(step @p7454 :rule reordering :premises (@p7453) :args ((or @t668 @t711 @t764)))
(step @p7455 :rule chain_resolution :premises (@p7454 @p2235 @p2861 @p7422 @p7324 @p7135 @p6915 @p6654 @p6363 @p6047 @p5702 @p5348 @p4966 @p4591 @p4189 @p3810 @p3405 @p2881 @p2261 @p2254) :args ((@list true false true false false false false false false false false false false false false false false false false) (@list @t668 @t669 @t759 @t757 @t799 @t751 @t794 @t745 @t788 @t739 @t782 @t733 @t776 @t727 @t770 @t721 @t713 @t703 @t710)))
(step @p7456 :rule factoring :premises (@p7455))
(step @p7457 :rule chain_resolution :premises (@p3387 @p7456) :args (@t155 (@list @t686)))
(assume-push @p10759 @t703)
(assume-push @p10760 @t713)
(assume-push @p10761 @t721)
(assume-push @p10762 @t770)
(assume-push @p10763 @t727)
(assume-push @p10764 @t776)
(assume-push @p10765 @t733)
(assume-push @p10766 @t782)
(assume-push @p10767 @t739)
(assume-push @p10768 @t788)
(assume-push @p10769 @t745)
(assume-push @p10770 @t794)
(assume-push @p10771 @t751)
(assume-push @p10772 @t799)
(assume-push @p10773 @t757)
(assume-push @p10774 @t709)
(assume-push @p10775 @t709)
(assume-push @p10776 @t799)
(assume-push @p10777 @t794)
(assume-push @p10778 @t788)
(assume-push @p10779 @t782)
(assume-push @p10780 @t776)
(assume-push @p10781 @t770)
(assume-push @p10782 @t713)
(assume-push @p10783 @t703)
(assume-push @p10784 @t721)
(assume-push @p10785 @t727)
(assume-push @p10786 @t733)
(assume-push @p10787 @t739)
(assume-push @p10788 @t745)
(assume-push @p10789 @t751)
(assume-push @p10790 @t757)
(step @p7490 :rule symm :premises (@p10774))
(step @p7491 :rule symm :premises (@p10772))
(step @p7492 :rule symm :premises (@p7491))
(step @p7493 :rule symm :premises (@p10770))
(step @p7494 :rule symm :premises (@p7493))
(step @p7495 :rule symm :premises (@p10768))
(step @p7496 :rule symm :premises (@p7495))
(step @p7497 :rule symm :premises (@p10766))
(step @p7498 :rule symm :premises (@p7497))
(step @p7499 :rule symm :premises (@p10764))
(step @p7500 :rule symm :premises (@p7499))
(step @p7501 :rule symm :premises (@p10762))
(step @p7502 :rule symm :premises (@p7501))
(step @p7503 :rule symm :premises (@p10760))
(step @p7504 :rule symm :premises (@p7503))
(step @p7505 :rule symm :premises (@p10759))
(step @p7506 :rule symm :premises (@p10761))
(step @p7507 :rule symm :premises (@p10763))
(step @p7508 :rule symm :premises (@p10765))
(step @p7509 :rule symm :premises (@p10767))
(step @p7510 :rule symm :premises (@p10769))
(step @p7511 :rule symm :premises (@p10771))
(step @p7512 :rule symm :premises (@p10773))
(step @p7513 :rule trans :premises (@p7512 @p7511 @p7510 @p7509 @p7508 @p7507 @p7506 @p7505 @p7504 @p7502 @p7500 @p7498 @p7496 @p7494 @p7492 @p7490))
(step @p7514 :rule cong :premises (@p1101 @p7513) :args (=))
(step @p7515 :rule trans :premises (@p7514 @p1289))
(step @p7516 :rule false_elim :premises (@p7515))
(step-pop @p10790 :rule scope :premises (@p7516))
(step-pop @p10791 :rule scope :premises (@p10790))
(step-pop @p10792 :rule scope :premises (@p10791))
(step-pop @p10793 :rule scope :premises (@p10792))
(step-pop @p10794 :rule scope :premises (@p10793))
(step-pop @p10795 :rule scope :premises (@p10794))
(step-pop @p10796 :rule scope :premises (@p10795))
(step-pop @p10797 :rule scope :premises (@p10796))
(step-pop @p10798 :rule scope :premises (@p10797))
(step-pop @p10799 :rule scope :premises (@p10798))
(step-pop @p10800 :rule scope :premises (@p10799))
(step-pop @p10801 :rule scope :premises (@p10800))
(step-pop @p10802 :rule scope :premises (@p10801))
(step-pop @p10803 :rule scope :premises (@p10802))
(step-pop @p10804 :rule scope :premises (@p10803))
(step-pop @p10805 :rule scope :premises (@p10804))
(step @p7517 :rule process_scope :premises (@p10805) :args (@t763))
(step @p7534 :rule and_intro :premises (@p10774 @p10772 @p10770 @p10768 @p10766 @p10764 @p10762 @p10760 @p10759 @p10761 @p10763 @p10765 @p10767 @p10769 @p10771 @p10773))
(step @p7535 :rule modus_ponens :premises (@p7534 @p7517))
(step-pop @p10806 :rule scope :premises (@p7535))
(step-pop @p10807 :rule scope :premises (@p10806))
(step-pop @p10808 :rule scope :premises (@p10807))
(step-pop @p10809 :rule scope :premises (@p10808))
(step-pop @p10810 :rule scope :premises (@p10809))
(step-pop @p10811 :rule scope :premises (@p10810))
(step-pop @p10812 :rule scope :premises (@p10811))
(step-pop @p10813 :rule scope :premises (@p10812))
(step-pop @p10814 :rule scope :premises (@p10813))
(step-pop @p10815 :rule scope :premises (@p10814))
(step-pop @p10816 :rule scope :premises (@p10815))
(step-pop @p10817 :rule scope :premises (@p10816))
(step-pop @p10818 :rule scope :premises (@p10817))
(step-pop @p10819 :rule scope :premises (@p10818))
(step-pop @p10820 :rule scope :premises (@p10819))
(step-pop @p10821 :rule scope :premises (@p10820))
(step @p7536 :rule process_scope :premises (@p10821) :args (@t763))
(step @p7553 :rule implies_elim :premises (@p7536))
(step @p7554 :rule cnf_and_neg :args (@t863))
(step @p7555 :rule resolution :premises (@p7554 @p7553) :args (true @t863))
(step @p7556 :rule chain_resolution :premises (@p7555 @p2261 @p2881 @p3405 @p3810 @p4189 @p4591 @p4966 @p5348 @p5702 @p6047 @p6363 @p6654 @p6915 @p7135 @p7324 @p7457) :args ((@list false false false false false false false false false false false false false false false false) (@list @t703 @t713 @t721 @t770 @t727 @t776 @t733 @t782 @t739 @t788 @t745 @t794 @t751 @t799 @t757 @t709)))
(step @p7557 :rule chain_resolution :premises (@p2863 @p7556) :args (@t155 (@list @t762)))
; trust TRUST_THEORY_REWRITE
(step @p7558 :rule trust :premises () :args ((= @t864 @t683)))
; trust TRUST_THEORY_REWRITE
(step @p7559 :rule trust :premises () :args ((= @t865 @t864)))
(step @p7560 :rule trans :premises (@p7559 @p7558))
; trust TRUST_THEORY_REWRITE
(step @p7561 :rule trust :premises () :args ((= @t866 @t681)))
; trust TRUST_THEORY_REWRITE
(step @p7562 :rule trust :premises () :args ((= @t867 @t866)))
(step @p7563 :rule trans :premises (@p7562 @p7561))
; trust TRUST_THEORY_REWRITE
(step @p7564 :rule trust :premises () :args ((= @t868 @t679)))
; trust TRUST_THEORY_REWRITE
(step @p7565 :rule trust :premises () :args ((= @t869 @t868)))
(step @p7566 :rule trans :premises (@p7565 @p7564))
; trust TRUST_THEORY_REWRITE
(step @p7567 :rule trust :premises () :args ((= @t870 @t677)))
; trust TRUST_THEORY_REWRITE
(step @p7568 :rule trust :premises () :args ((= @t871 @t870)))
(step @p7569 :rule trans :premises (@p7568 @p7567))
; trust TRUST_THEORY_REWRITE
(step @p7570 :rule trust :premises () :args ((= @t872 @t675)))
; trust TRUST_THEORY_REWRITE
(step @p7571 :rule trust :premises () :args ((= @t873 @t872)))
(step @p7572 :rule trans :premises (@p7571 @p7570))
; trust TRUST_THEORY_REWRITE
(step @p7573 :rule trust :premises () :args ((= @t874 @t673)))
; trust TRUST_THEORY_REWRITE
(step @p7574 :rule trust :premises () :args ((= @t875 @t874)))
(step @p7575 :rule trans :premises (@p7574 @p7573))
; trust TRUST_THEORY_REWRITE
(step @p7576 :rule trust :premises () :args ((= @t876 @t671)))
; trust TRUST_THEORY_REWRITE
(step @p7577 :rule trust :premises () :args ((= @t877 @t876)))
(step @p7578 :rule trans :premises (@p7577 @p7576))
; trust TRUST_THEORY_REWRITE
(step @p7579 :rule trust :premises () :args ((= @t878 @t669)))
; trust TRUST_THEORY_REWRITE
(step @p7580 :rule trust :premises () :args ((= @t879 @t878)))
(step @p7581 :rule trans :premises (@p7580 @p7579))
; trust TRUST_THEORY_REWRITE
(step @p7582 :rule trust :premises () :args ((= @t881 @t880)))
; trust TRUST_THEORY_REWRITE
(step @p7583 :rule trust :premises () :args ((= @t882 @t881)))
(step @p7584 :rule trans :premises (@p7583 @p7582))
(step @p7585 :rule nary_cong :premises (@p7584 @p7581 @p7578 @p7575 @p7572 @p7569 @p7566 @p7563 @p7560) :args (or))
; WARNING: add trust step for DT_SPLIT
; trust DT_SPLIT
(step @p7586 :rule trust :premises () :args ((or @t882 @t879 @t877 @t875 @t873 @t871 @t869 @t867 @t865)))
(step @p7587 :rule eq_resolve :premises (@p7586 @p7585))
(step @p7588 :rule reordering :premises (@p7587) :args ((or @t683 @t681 @t679 @t677 @t675 @t673 @t671 @t669 @t880)))
(step @p7589 :rule chain_resolution :premises (@p7588 @p3404 @p4188 @p4965 @p5701 @p6362 @p6914 @p7323 @p7557) :args (@t127 (@list @t683 @t681 @t679 @t677 @t675 @t673 @t671 @t669)))
; trust TRUST_THEORY_REWRITE
(step @p7590 :rule trust :premises () :args ((= @t883 @t700)))
; trust TRUST_THEORY_REWRITE
(step @p7591 :rule trust :premises () :args ((= @t884 @t883)))
(step @p7592 :rule trans :premises (@p7591 @p7590))
; trust TRUST_THEORY_REWRITE
(step @p7593 :rule trust :premises () :args ((= @t885 @t698)))
; trust TRUST_THEORY_REWRITE
(step @p7594 :rule trust :premises () :args ((= @t886 @t885)))
(step @p7595 :rule trans :premises (@p7594 @p7593))
; trust TRUST_THEORY_REWRITE
(step @p7596 :rule trust :premises () :args ((= @t887 @t696)))
; trust TRUST_THEORY_REWRITE
(step @p7597 :rule trust :premises () :args ((= @t888 @t887)))
(step @p7598 :rule trans :premises (@p7597 @p7596))
; trust TRUST_THEORY_REWRITE
(step @p7599 :rule trust :premises () :args ((= @t889 @t694)))
; trust TRUST_THEORY_REWRITE
(step @p7600 :rule trust :premises () :args ((= @t890 @t889)))
(step @p7601 :rule trans :premises (@p7600 @p7599))
; trust TRUST_THEORY_REWRITE
(step @p7602 :rule trust :premises () :args ((= @t891 @t692)))
; trust TRUST_THEORY_REWRITE
(step @p7603 :rule trust :premises () :args ((= @t892 @t891)))
(step @p7604 :rule trans :premises (@p7603 @p7602))
; trust TRUST_THEORY_REWRITE
(step @p7605 :rule trust :premises () :args ((= @t893 @t690)))
; trust TRUST_THEORY_REWRITE
(step @p7606 :rule trust :premises () :args ((= @t894 @t893)))
(step @p7607 :rule trans :premises (@p7606 @p7605))
; trust TRUST_THEORY_REWRITE
(step @p7608 :rule trust :premises () :args ((= @t895 @t688)))
; trust TRUST_THEORY_REWRITE
(step @p7609 :rule trust :premises () :args ((= @t896 @t895)))
(step @p7610 :rule trans :premises (@p7609 @p7608))
; trust TRUST_THEORY_REWRITE
(step @p7611 :rule trust :premises () :args ((= @t897 @t686)))
; trust TRUST_THEORY_REWRITE
(step @p7612 :rule trust :premises () :args ((= @t898 @t897)))
(step @p7613 :rule trans :premises (@p7612 @p7611))
; trust TRUST_THEORY_REWRITE
(step @p7614 :rule trust :premises () :args ((= @t900 @t899)))
; trust TRUST_THEORY_REWRITE
(step @p7615 :rule trust :premises () :args ((= @t901 @t900)))
(step @p7616 :rule trans :premises (@p7615 @p7614))
(step @p7617 :rule nary_cong :premises (@p7616 @p7613 @p7610 @p7607 @p7604 @p7601 @p7598 @p7595 @p7592) :args (or))
; trust DT_SPLIT
(step @p7618 :rule trust :premises () :args ((or @t901 @t898 @t896 @t894 @t892 @t890 @t888 @t886 @t884)))
(step @p7619 :rule eq_resolve :premises (@p7618 @p7617))
(step @p7620 :rule reordering :premises (@p7619) :args ((or @t700 @t698 @t696 @t694 @t692 @t690 @t688 @t686 @t899)))
(step @p7621 :rule chain_resolution :premises (@p7620 @p2879 @p3809 @p4590 @p5347 @p6046 @p6653 @p7134 @p7456) :args (@t127 (@list @t700 @t698 @t696 @t694 @t692 @t690 @t688 @t686)))
(step @p7622 :rule refl :args ((not @t899)))
(step @p7623 :rule refl :args ((not @t880)))
(step @p7624 :rule nary_cong :premises (@p2288 @p7623 @p7622) :args (or))
(assume-push @p10823 @t880)
(assume-push @p10824 @t899)
(assume-push @p10825 @t716)
; trust TRUST_THEORY_REWRITE
(step @p2295 :rule trust :premises () :args (@t718))
(step @p7628 :rule symm :premises (@p10823))
(step @p7629 :rule symm :premises (@p7628))
(step @p7630 :rule symm :premises (@p10824))
(step @p7631 :rule trans :premises (@p7630 @p7629))
(step @p7632 :rule symm :premises (@p7631))
(step @p7633 :rule true_intro :premises (@p7632))
(step @p7634 :rule false_intro :premises (@p10825))
(step @p7635 :rule symm :premises (@p7634))
(step @p7636 :rule trans :premises (@p7635 @p7633))
(step @p7637 false :rule eq_resolve :premises (@p7636 @p2295))
(step-pop @p10825 :rule scope :premises (@p7637))
(step-pop @p10826 :rule scope :premises (@p10825))
(step-pop @p10827 :rule scope :premises (@p10826))
(step @p7638 :rule process_scope :premises (@p10827) :args (false))
(assume-push @p10829 @t716)
(assume-push @p10830 @t880)
(assume-push @p10831 @t899)
(step @p7645 :rule and_intro :premises (@p10830 @p10831 @p10829))
(step-pop @p10831 :rule scope :premises (@p7645))
(step-pop @p10832 :rule scope :premises (@p10831))
(step-pop @p10833 :rule scope :premises (@p10832))
(step @p7646 :rule process_scope :premises (@p10833) :args (@t902))
(step @p7650 :rule implies_elim :premises (@p7646))
(step @p7651 :rule resolution :premises (@p7650 @p7638) :args (true @t902))
(step @p7652 :rule not_and :premises (@p7651))
(step @p7653 :rule eq_resolve :premises (@p7652 @p7624))
(step @p7654 false :rule chain_resolution :premises (@p7653 @p7621 @p7589 @p2235) :args ((@list false false true) (@list @t899 @t880 @t668)))

